
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002466  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002b8  00800060  00002466  000024fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000055b  00800318  00800318  000027b2  2**0
                  ALLOC
  3 .stab         000029ac  00000000  00000000  000027b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012bb  00000000  00000000  00005160  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e6       	ldi	r30, 0x66	; 102
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 31       	cpi	r26, 0x18	; 24
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	18 e0       	ldi	r17, 0x08	; 8
      78:	a8 e1       	ldi	r26, 0x18	; 24
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 37       	cpi	r26, 0x73	; 115
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <main>
      8a:	0c 94 31 12 	jmp	0x2462	; 0x2462 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CRC16_Calc>:
// This function calculates the one's complement of the standard
// 16-BIT CRC CCITT polynomial G(x) = 1 + x^5 + x^12 + x^16
//
//------------------------------------------------------------------------------
#ifdef __CRC16_TABLE__
uint16 CRC16_Calc(uint8* data, uint16 length, uint16 initVal) {
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	29 97       	sbiw	r28, 0x09	; 9
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	9c 83       	std	Y+4, r25	; 0x04
      a8:	8b 83       	std	Y+3, r24	; 0x03
      aa:	7e 83       	std	Y+6, r23	; 0x06
      ac:	6d 83       	std	Y+5, r22	; 0x05
      ae:	58 87       	std	Y+8, r21	; 0x08
      b0:	4f 83       	std	Y+7, r20	; 0x07
// init crc
	uint16 crc = initVal;
      b2:	8f 81       	ldd	r24, Y+7	; 0x07
      b4:	98 85       	ldd	r25, Y+8	; 0x08
      b6:	9a 83       	std	Y+2, r25	; 0x02
      b8:	89 83       	std	Y+1, r24	; 0x01
      ba:	1e c0       	rjmp	.+60     	; 0xf8 <CRC16_Calc+0x66>
// iterate over all bytes
	while (length--) {
// calc new crc
		crc = (crc >> 8) ^ CRC16_Table[(crc ^ *data++) & 0x00FF];
      bc:	89 81       	ldd	r24, Y+1	; 0x01
      be:	9a 81       	ldd	r25, Y+2	; 0x02
      c0:	49 2f       	mov	r20, r25
      c2:	55 27       	eor	r21, r21
      c4:	eb 81       	ldd	r30, Y+3	; 0x03
      c6:	fc 81       	ldd	r31, Y+4	; 0x04
      c8:	80 81       	ld	r24, Z
      ca:	28 2f       	mov	r18, r24
      cc:	30 e0       	ldi	r19, 0x00	; 0
      ce:	89 81       	ldd	r24, Y+1	; 0x01
      d0:	9a 81       	ldd	r25, Y+2	; 0x02
      d2:	82 27       	eor	r24, r18
      d4:	93 27       	eor	r25, r19
      d6:	90 70       	andi	r25, 0x00	; 0
      d8:	88 0f       	add	r24, r24
      da:	99 1f       	adc	r25, r25
      dc:	fc 01       	movw	r30, r24
      de:	e0 5f       	subi	r30, 0xF0	; 240
      e0:	fe 4f       	sbci	r31, 0xFE	; 254
      e2:	80 81       	ld	r24, Z
      e4:	91 81       	ldd	r25, Z+1	; 0x01
      e6:	84 27       	eor	r24, r20
      e8:	95 27       	eor	r25, r21
      ea:	9a 83       	std	Y+2, r25	; 0x02
      ec:	89 83       	std	Y+1, r24	; 0x01
      ee:	8b 81       	ldd	r24, Y+3	; 0x03
      f0:	9c 81       	ldd	r25, Y+4	; 0x04
      f2:	01 96       	adiw	r24, 0x01	; 1
      f4:	9c 83       	std	Y+4, r25	; 0x04
      f6:	8b 83       	std	Y+3, r24	; 0x03
#ifdef __CRC16_TABLE__
uint16 CRC16_Calc(uint8* data, uint16 length, uint16 initVal) {
// init crc
	uint16 crc = initVal;
// iterate over all bytes
	while (length--) {
      f8:	19 86       	std	Y+9, r1	; 0x09
      fa:	8d 81       	ldd	r24, Y+5	; 0x05
      fc:	9e 81       	ldd	r25, Y+6	; 0x06
      fe:	00 97       	sbiw	r24, 0x00	; 0
     100:	11 f0       	breq	.+4      	; 0x106 <CRC16_Calc+0x74>
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	89 87       	std	Y+9, r24	; 0x09
     106:	8d 81       	ldd	r24, Y+5	; 0x05
     108:	9e 81       	ldd	r25, Y+6	; 0x06
     10a:	01 97       	sbiw	r24, 0x01	; 1
     10c:	9e 83       	std	Y+6, r25	; 0x06
     10e:	8d 83       	std	Y+5, r24	; 0x05
     110:	89 85       	ldd	r24, Y+9	; 0x09
     112:	88 23       	and	r24, r24
     114:	99 f6       	brne	.-90     	; 0xbc <CRC16_Calc+0x2a>
// calc new crc
		crc = (crc >> 8) ^ CRC16_Table[(crc ^ *data++) & 0x00FF];
	}
// return result
	return crc;
     116:	89 81       	ldd	r24, Y+1	; 0x01
     118:	9a 81       	ldd	r25, Y+2	; 0x02
}
     11a:	29 96       	adiw	r28, 0x09	; 9
     11c:	0f b6       	in	r0, 0x3f	; 63
     11e:	f8 94       	cli
     120:	de bf       	out	0x3e, r29	; 62
     122:	0f be       	out	0x3f, r0	; 63
     124:	cd bf       	out	0x3d, r28	; 61
     126:	cf 91       	pop	r28
     128:	df 91       	pop	r29
     12a:	08 95       	ret

0000012c <CRC16_Check>:
//------------------------------------------------------------------------------
//
// This function checks a data block with attached CRC16
//
//------------------------------------------------------------------------------
bool CRC16_Check(uint8* data, uint16 length, uint16 initVal) {
     12c:	df 93       	push	r29
     12e:	cf 93       	push	r28
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
     134:	29 97       	sbiw	r28, 0x09	; 9
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	f8 94       	cli
     13a:	de bf       	out	0x3e, r29	; 62
     13c:	0f be       	out	0x3f, r0	; 63
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	9c 83       	std	Y+4, r25	; 0x04
     142:	8b 83       	std	Y+3, r24	; 0x03
     144:	7e 83       	std	Y+6, r23	; 0x06
     146:	6d 83       	std	Y+5, r22	; 0x05
     148:	58 87       	std	Y+8, r21	; 0x08
     14a:	4f 83       	std	Y+7, r20	; 0x07
// calc ones complement of CRC16
	uint16 crc = ~CRC16_Calc(data, length, initVal);
     14c:	8b 81       	ldd	r24, Y+3	; 0x03
     14e:	9c 81       	ldd	r25, Y+4	; 0x04
     150:	2d 81       	ldd	r18, Y+5	; 0x05
     152:	3e 81       	ldd	r19, Y+6	; 0x06
     154:	4f 81       	ldd	r20, Y+7	; 0x07
     156:	58 85       	ldd	r21, Y+8	; 0x08
     158:	b9 01       	movw	r22, r18
     15a:	0e 94 49 00 	call	0x92	; 0x92 <CRC16_Calc>
     15e:	80 95       	com	r24
     160:	90 95       	com	r25
     162:	9a 83       	std	Y+2, r25	; 0x02
     164:	89 83       	std	Y+1, r24	; 0x01
// CRC ok ?
	return (bool) (crc == CRC16_GOOD_VALUE);
     166:	19 86       	std	Y+9, r1	; 0x09
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	9a 81       	ldd	r25, Y+2	; 0x02
     16c:	2f e0       	ldi	r18, 0x0F	; 15
     16e:	87 34       	cpi	r24, 0x47	; 71
     170:	92 07       	cpc	r25, r18
     172:	11 f4       	brne	.+4      	; 0x178 <CRC16_Check+0x4c>
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	89 87       	std	Y+9, r24	; 0x09
     178:	89 85       	ldd	r24, Y+9	; 0x09
}
     17a:	29 96       	adiw	r28, 0x09	; 9
     17c:	0f b6       	in	r0, 0x3f	; 63
     17e:	f8 94       	cli
     180:	de bf       	out	0x3e, r29	; 62
     182:	0f be       	out	0x3f, r0	; 63
     184:	cd bf       	out	0x3d, r28	; 61
     186:	cf 91       	pop	r28
     188:	df 91       	pop	r29
     18a:	08 95       	ret

0000018c <DIO_voidInit>:
#include "DIO_config.h"
#include "DIO.h"


void DIO_voidInit(void)
{
     18c:	df 93       	push	r29
     18e:	cf 93       	push	r28
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62

}
     194:	cf 91       	pop	r28
     196:	df 91       	pop	r29
     198:	08 95       	ret

0000019a <DIO_voidSetPortDir>:


void DIO_voidSetPortDir(uint8 Port, uint8 Dir)
{
     19a:	df 93       	push	r29
     19c:	cf 93       	push	r28
     19e:	00 d0       	rcall	.+0      	; 0x1a0 <DIO_voidSetPortDir+0x6>
     1a0:	00 d0       	rcall	.+0      	; 0x1a2 <DIO_voidSetPortDir+0x8>
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
     1a6:	89 83       	std	Y+1, r24	; 0x01
     1a8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
     1aa:	89 81       	ldd	r24, Y+1	; 0x01
     1ac:	28 2f       	mov	r18, r24
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	3c 83       	std	Y+4, r19	; 0x04
     1b2:	2b 83       	std	Y+3, r18	; 0x03
     1b4:	8b 81       	ldd	r24, Y+3	; 0x03
     1b6:	9c 81       	ldd	r25, Y+4	; 0x04
     1b8:	81 30       	cpi	r24, 0x01	; 1
     1ba:	91 05       	cpc	r25, r1
     1bc:	19 f1       	breq	.+70     	; 0x204 <DIO_voidSetPortDir+0x6a>
     1be:	2b 81       	ldd	r18, Y+3	; 0x03
     1c0:	3c 81       	ldd	r19, Y+4	; 0x04
     1c2:	22 30       	cpi	r18, 0x02	; 2
     1c4:	31 05       	cpc	r19, r1
     1c6:	2c f4       	brge	.+10     	; 0x1d2 <DIO_voidSetPortDir+0x38>
     1c8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ca:	9c 81       	ldd	r25, Y+4	; 0x04
     1cc:	00 97       	sbiw	r24, 0x00	; 0
     1ce:	61 f0       	breq	.+24     	; 0x1e8 <DIO_voidSetPortDir+0x4e>
     1d0:	42 c0       	rjmp	.+132    	; 0x256 <DIO_voidSetPortDir+0xbc>
     1d2:	2b 81       	ldd	r18, Y+3	; 0x03
     1d4:	3c 81       	ldd	r19, Y+4	; 0x04
     1d6:	22 30       	cpi	r18, 0x02	; 2
     1d8:	31 05       	cpc	r19, r1
     1da:	11 f1       	breq	.+68     	; 0x220 <DIO_voidSetPortDir+0x86>
     1dc:	8b 81       	ldd	r24, Y+3	; 0x03
     1de:	9c 81       	ldd	r25, Y+4	; 0x04
     1e0:	83 30       	cpi	r24, 0x03	; 3
     1e2:	91 05       	cpc	r25, r1
     1e4:	59 f1       	breq	.+86     	; 0x23c <DIO_voidSetPortDir+0xa2>
     1e6:	37 c0       	rjmp	.+110    	; 0x256 <DIO_voidSetPortDir+0xbc>
	{
	case 0:
		if(Dir==Input)
     1e8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ea:	88 23       	and	r24, r24
     1ec:	19 f4       	brne	.+6      	; 0x1f4 <DIO_voidSetPortDir+0x5a>
		{
			CLRPORT(DDRA);
     1ee:	ea e3       	ldi	r30, 0x3A	; 58
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	10 82       	st	Z, r1

		}
		if(Dir==Output)
     1f4:	8a 81       	ldd	r24, Y+2	; 0x02
     1f6:	81 30       	cpi	r24, 0x01	; 1
     1f8:	71 f5       	brne	.+92     	; 0x256 <DIO_voidSetPortDir+0xbc>
		{
			SETPORT(DDRA);
     1fa:	ea e3       	ldi	r30, 0x3A	; 58
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	8f ef       	ldi	r24, 0xFF	; 255
     200:	80 83       	st	Z, r24
     202:	29 c0       	rjmp	.+82     	; 0x256 <DIO_voidSetPortDir+0xbc>
		}

		break;

	case 1:
		if(Dir==Input)
     204:	8a 81       	ldd	r24, Y+2	; 0x02
     206:	88 23       	and	r24, r24
     208:	19 f4       	brne	.+6      	; 0x210 <DIO_voidSetPortDir+0x76>
		{
			CLRPORT(DDRB);
     20a:	e7 e3       	ldi	r30, 0x37	; 55
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	10 82       	st	Z, r1

		}
		if(Dir==Output)
     210:	8a 81       	ldd	r24, Y+2	; 0x02
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	01 f5       	brne	.+64     	; 0x256 <DIO_voidSetPortDir+0xbc>
		{
			SETPORT(DDRB);
     216:	e7 e3       	ldi	r30, 0x37	; 55
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	8f ef       	ldi	r24, 0xFF	; 255
     21c:	80 83       	st	Z, r24
     21e:	1b c0       	rjmp	.+54     	; 0x256 <DIO_voidSetPortDir+0xbc>

		}
		break;

	case 2:
		if(Dir==Input)
     220:	8a 81       	ldd	r24, Y+2	; 0x02
     222:	88 23       	and	r24, r24
     224:	19 f4       	brne	.+6      	; 0x22c <DIO_voidSetPortDir+0x92>
		{
			CLRPORT(DDRC);
     226:	e4 e3       	ldi	r30, 0x34	; 52
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	10 82       	st	Z, r1

		}
		if(Dir==Output)
     22c:	8a 81       	ldd	r24, Y+2	; 0x02
     22e:	81 30       	cpi	r24, 0x01	; 1
     230:	91 f4       	brne	.+36     	; 0x256 <DIO_voidSetPortDir+0xbc>
		{
			SETPORT(DDRC);
     232:	e4 e3       	ldi	r30, 0x34	; 52
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	8f ef       	ldi	r24, 0xFF	; 255
     238:	80 83       	st	Z, r24
     23a:	0d c0       	rjmp	.+26     	; 0x256 <DIO_voidSetPortDir+0xbc>

		}
		break;
	case 3:
		if(Dir==Input)
     23c:	8a 81       	ldd	r24, Y+2	; 0x02
     23e:	88 23       	and	r24, r24
     240:	19 f4       	brne	.+6      	; 0x248 <DIO_voidSetPortDir+0xae>
		{
			CLRPORT(DDRD);
     242:	e1 e3       	ldi	r30, 0x31	; 49
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	10 82       	st	Z, r1

		}
		if(Dir==Output)
     248:	8a 81       	ldd	r24, Y+2	; 0x02
     24a:	81 30       	cpi	r24, 0x01	; 1
     24c:	21 f4       	brne	.+8      	; 0x256 <DIO_voidSetPortDir+0xbc>
		{
			SETPORT(DDRD);
     24e:	e1 e3       	ldi	r30, 0x31	; 49
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	8f ef       	ldi	r24, 0xFF	; 255
     254:	80 83       	st	Z, r24
		}
		break;

	}
}
     256:	0f 90       	pop	r0
     258:	0f 90       	pop	r0
     25a:	0f 90       	pop	r0
     25c:	0f 90       	pop	r0
     25e:	cf 91       	pop	r28
     260:	df 91       	pop	r29
     262:	08 95       	ret

00000264 <DIO_voidWritePortValue>:

void DIO_voidWritePortValue(uint8 Port, uint8 value)
{
     264:	df 93       	push	r29
     266:	cf 93       	push	r28
     268:	00 d0       	rcall	.+0      	; 0x26a <DIO_voidWritePortValue+0x6>
     26a:	00 d0       	rcall	.+0      	; 0x26c <DIO_voidWritePortValue+0x8>
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
     270:	89 83       	std	Y+1, r24	; 0x01
     272:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
     274:	89 81       	ldd	r24, Y+1	; 0x01
     276:	28 2f       	mov	r18, r24
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	3c 83       	std	Y+4, r19	; 0x04
     27c:	2b 83       	std	Y+3, r18	; 0x03
     27e:	8b 81       	ldd	r24, Y+3	; 0x03
     280:	9c 81       	ldd	r25, Y+4	; 0x04
     282:	81 30       	cpi	r24, 0x01	; 1
     284:	91 05       	cpc	r25, r1
     286:	d1 f0       	breq	.+52     	; 0x2bc <DIO_voidWritePortValue+0x58>
     288:	2b 81       	ldd	r18, Y+3	; 0x03
     28a:	3c 81       	ldd	r19, Y+4	; 0x04
     28c:	22 30       	cpi	r18, 0x02	; 2
     28e:	31 05       	cpc	r19, r1
     290:	2c f4       	brge	.+10     	; 0x29c <DIO_voidWritePortValue+0x38>
     292:	8b 81       	ldd	r24, Y+3	; 0x03
     294:	9c 81       	ldd	r25, Y+4	; 0x04
     296:	00 97       	sbiw	r24, 0x00	; 0
     298:	61 f0       	breq	.+24     	; 0x2b2 <DIO_voidWritePortValue+0x4e>
     29a:	1e c0       	rjmp	.+60     	; 0x2d8 <DIO_voidWritePortValue+0x74>
     29c:	2b 81       	ldd	r18, Y+3	; 0x03
     29e:	3c 81       	ldd	r19, Y+4	; 0x04
     2a0:	22 30       	cpi	r18, 0x02	; 2
     2a2:	31 05       	cpc	r19, r1
     2a4:	81 f0       	breq	.+32     	; 0x2c6 <DIO_voidWritePortValue+0x62>
     2a6:	8b 81       	ldd	r24, Y+3	; 0x03
     2a8:	9c 81       	ldd	r25, Y+4	; 0x04
     2aa:	83 30       	cpi	r24, 0x03	; 3
     2ac:	91 05       	cpc	r25, r1
     2ae:	81 f0       	breq	.+32     	; 0x2d0 <DIO_voidWritePortValue+0x6c>
     2b0:	13 c0       	rjmp	.+38     	; 0x2d8 <DIO_voidWritePortValue+0x74>
	{
	case 0:
		PORTA=value;
     2b2:	eb e3       	ldi	r30, 0x3B	; 59
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	8a 81       	ldd	r24, Y+2	; 0x02
     2b8:	80 83       	st	Z, r24
     2ba:	0e c0       	rjmp	.+28     	; 0x2d8 <DIO_voidWritePortValue+0x74>
		break;

	case 1:
		PORTB=value;
     2bc:	e8 e3       	ldi	r30, 0x38	; 56
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	8a 81       	ldd	r24, Y+2	; 0x02
     2c2:	80 83       	st	Z, r24
     2c4:	09 c0       	rjmp	.+18     	; 0x2d8 <DIO_voidWritePortValue+0x74>
		break;

	case 2:
		PORTC=value;
     2c6:	e5 e3       	ldi	r30, 0x35	; 53
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	8a 81       	ldd	r24, Y+2	; 0x02
     2cc:	80 83       	st	Z, r24
     2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <DIO_voidWritePortValue+0x74>
		break;
	case 3:
		PORTD=value;
     2d0:	e2 e3       	ldi	r30, 0x32	; 50
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	8a 81       	ldd	r24, Y+2	; 0x02
     2d6:	80 83       	st	Z, r24
		break;

	}
}
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	0f 90       	pop	r0
     2e0:	cf 91       	pop	r28
     2e2:	df 91       	pop	r29
     2e4:	08 95       	ret

000002e6 <DIO_U8ReadPortValue>:

uint8 DIO_U8ReadPortValue(uint8 Port)
{
     2e6:	df 93       	push	r29
     2e8:	cf 93       	push	r28
     2ea:	00 d0       	rcall	.+0      	; 0x2ec <DIO_U8ReadPortValue+0x6>
     2ec:	00 d0       	rcall	.+0      	; 0x2ee <DIO_U8ReadPortValue+0x8>
     2ee:	cd b7       	in	r28, 0x3d	; 61
     2f0:	de b7       	in	r29, 0x3e	; 62
     2f2:	8a 83       	std	Y+2, r24	; 0x02

	uint8 port;
	switch(Port)
     2f4:	8a 81       	ldd	r24, Y+2	; 0x02
     2f6:	28 2f       	mov	r18, r24
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	3c 83       	std	Y+4, r19	; 0x04
     2fc:	2b 83       	std	Y+3, r18	; 0x03
     2fe:	8b 81       	ldd	r24, Y+3	; 0x03
     300:	9c 81       	ldd	r25, Y+4	; 0x04
     302:	81 30       	cpi	r24, 0x01	; 1
     304:	91 05       	cpc	r25, r1
     306:	d1 f0       	breq	.+52     	; 0x33c <DIO_U8ReadPortValue+0x56>
     308:	2b 81       	ldd	r18, Y+3	; 0x03
     30a:	3c 81       	ldd	r19, Y+4	; 0x04
     30c:	22 30       	cpi	r18, 0x02	; 2
     30e:	31 05       	cpc	r19, r1
     310:	2c f4       	brge	.+10     	; 0x31c <DIO_U8ReadPortValue+0x36>
     312:	8b 81       	ldd	r24, Y+3	; 0x03
     314:	9c 81       	ldd	r25, Y+4	; 0x04
     316:	00 97       	sbiw	r24, 0x00	; 0
     318:	61 f0       	breq	.+24     	; 0x332 <DIO_U8ReadPortValue+0x4c>
     31a:	1e c0       	rjmp	.+60     	; 0x358 <DIO_U8ReadPortValue+0x72>
     31c:	2b 81       	ldd	r18, Y+3	; 0x03
     31e:	3c 81       	ldd	r19, Y+4	; 0x04
     320:	22 30       	cpi	r18, 0x02	; 2
     322:	31 05       	cpc	r19, r1
     324:	81 f0       	breq	.+32     	; 0x346 <DIO_U8ReadPortValue+0x60>
     326:	8b 81       	ldd	r24, Y+3	; 0x03
     328:	9c 81       	ldd	r25, Y+4	; 0x04
     32a:	83 30       	cpi	r24, 0x03	; 3
     32c:	91 05       	cpc	r25, r1
     32e:	81 f0       	breq	.+32     	; 0x350 <DIO_U8ReadPortValue+0x6a>
     330:	13 c0       	rjmp	.+38     	; 0x358 <DIO_U8ReadPortValue+0x72>
	{
	case 0:
	    port=GETPORT(PINA);
     332:	e9 e3       	ldi	r30, 0x39	; 57
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	80 81       	ld	r24, Z
     338:	89 83       	std	Y+1, r24	; 0x01
     33a:	0e c0       	rjmp	.+28     	; 0x358 <DIO_U8ReadPortValue+0x72>
		break;

	case 1:
		port=GETPORT(PINB);
     33c:	e6 e3       	ldi	r30, 0x36	; 54
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	80 81       	ld	r24, Z
     342:	89 83       	std	Y+1, r24	; 0x01
     344:	09 c0       	rjmp	.+18     	; 0x358 <DIO_U8ReadPortValue+0x72>
		break;

	case 2:
		port=GETPORT(PINC);
     346:	e3 e3       	ldi	r30, 0x33	; 51
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	80 81       	ld	r24, Z
     34c:	89 83       	std	Y+1, r24	; 0x01
     34e:	04 c0       	rjmp	.+8      	; 0x358 <DIO_U8ReadPortValue+0x72>
		break;
	case 3:
		port=GETPORT(PIND);
     350:	e0 e3       	ldi	r30, 0x30	; 48
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	80 81       	ld	r24, Z
     356:	89 83       	std	Y+1, r24	; 0x01
		break;

	}

	return port;
     358:	89 81       	ldd	r24, Y+1	; 0x01
}
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	cf 91       	pop	r28
     364:	df 91       	pop	r29
     366:	08 95       	ret

00000368 <DIO_voidSetPinDir>:

void DIO_voidSetPinDir(uint8 pin_num, uint8 Dir)
{
     368:	df 93       	push	r29
     36a:	cf 93       	push	r28
     36c:	00 d0       	rcall	.+0      	; 0x36e <DIO_voidSetPinDir+0x6>
     36e:	00 d0       	rcall	.+0      	; 0x370 <DIO_voidSetPinDir+0x8>
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
     374:	89 83       	std	Y+1, r24	; 0x01
     376:	6a 83       	std	Y+2, r22	; 0x02
	switch (Dir)
     378:	8a 81       	ldd	r24, Y+2	; 0x02
     37a:	28 2f       	mov	r18, r24
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	3c 83       	std	Y+4, r19	; 0x04
     380:	2b 83       	std	Y+3, r18	; 0x03
     382:	8b 81       	ldd	r24, Y+3	; 0x03
     384:	9c 81       	ldd	r25, Y+4	; 0x04
     386:	00 97       	sbiw	r24, 0x00	; 0
     388:	39 f0       	breq	.+14     	; 0x398 <DIO_voidSetPinDir+0x30>
     38a:	2b 81       	ldd	r18, Y+3	; 0x03
     38c:	3c 81       	ldd	r19, Y+4	; 0x04
     38e:	21 30       	cpi	r18, 0x01	; 1
     390:	31 05       	cpc	r19, r1
     392:	09 f4       	brne	.+2      	; 0x396 <DIO_voidSetPinDir+0x2e>
     394:	75 c0       	rjmp	.+234    	; 0x480 <DIO_voidSetPinDir+0x118>
     396:	e1 c0       	rjmp	.+450    	; 0x55a <DIO_voidSetPinDir+0x1f2>
	{
		case 0:

			/*Input */

			if((pin_num>=pin_A0)&&(pin_num<pin_B0))
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	88 30       	cpi	r24, 0x08	; 8
     39c:	b8 f4       	brcc	.+46     	; 0x3cc <DIO_voidSetPinDir+0x64>
			{
				/*DDRA*/
				CLRBIT(DDRA, pin_num%8);
     39e:	aa e3       	ldi	r26, 0x3A	; 58
     3a0:	b0 e0       	ldi	r27, 0x00	; 0
     3a2:	ea e3       	ldi	r30, 0x3A	; 58
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	80 81       	ld	r24, Z
     3a8:	48 2f       	mov	r20, r24
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	88 2f       	mov	r24, r24
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	9c 01       	movw	r18, r24
     3b2:	27 70       	andi	r18, 0x07	; 7
     3b4:	30 70       	andi	r19, 0x00	; 0
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	02 2e       	mov	r0, r18
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_voidSetPinDir+0x5a>
     3be:	88 0f       	add	r24, r24
     3c0:	99 1f       	adc	r25, r25
     3c2:	0a 94       	dec	r0
     3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_voidSetPinDir+0x56>
     3c6:	80 95       	com	r24
     3c8:	84 23       	and	r24, r20
     3ca:	8c 93       	st	X, r24
			}
			if((pin_num>=pin_B0)&&(pin_num<pin_C0))
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
     3ce:	88 30       	cpi	r24, 0x08	; 8
     3d0:	d0 f0       	brcs	.+52     	; 0x406 <DIO_voidSetPinDir+0x9e>
     3d2:	89 81       	ldd	r24, Y+1	; 0x01
     3d4:	80 31       	cpi	r24, 0x10	; 16
     3d6:	b8 f4       	brcc	.+46     	; 0x406 <DIO_voidSetPinDir+0x9e>
			{
				/*DDRB*/
				CLRBIT(DDRB, pin_num%8);
     3d8:	a7 e3       	ldi	r26, 0x37	; 55
     3da:	b0 e0       	ldi	r27, 0x00	; 0
     3dc:	e7 e3       	ldi	r30, 0x37	; 55
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	80 81       	ld	r24, Z
     3e2:	48 2f       	mov	r20, r24
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	88 2f       	mov	r24, r24
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	9c 01       	movw	r18, r24
     3ec:	27 70       	andi	r18, 0x07	; 7
     3ee:	30 70       	andi	r19, 0x00	; 0
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	02 2e       	mov	r0, r18
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_voidSetPinDir+0x94>
     3f8:	88 0f       	add	r24, r24
     3fa:	99 1f       	adc	r25, r25
     3fc:	0a 94       	dec	r0
     3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_voidSetPinDir+0x90>
     400:	80 95       	com	r24
     402:	84 23       	and	r24, r20
     404:	8c 93       	st	X, r24
			}
			if((pin_num>=pin_C0)&&(pin_num<pin_D0))
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	80 31       	cpi	r24, 0x10	; 16
     40a:	d0 f0       	brcs	.+52     	; 0x440 <DIO_voidSetPinDir+0xd8>
     40c:	89 81       	ldd	r24, Y+1	; 0x01
     40e:	88 31       	cpi	r24, 0x18	; 24
     410:	b8 f4       	brcc	.+46     	; 0x440 <DIO_voidSetPinDir+0xd8>
			{
				/*DDRC*/
				CLRBIT(DDRC, pin_num%8);
     412:	a4 e3       	ldi	r26, 0x34	; 52
     414:	b0 e0       	ldi	r27, 0x00	; 0
     416:	e4 e3       	ldi	r30, 0x34	; 52
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	80 81       	ld	r24, Z
     41c:	48 2f       	mov	r20, r24
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	88 2f       	mov	r24, r24
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	9c 01       	movw	r18, r24
     426:	27 70       	andi	r18, 0x07	; 7
     428:	30 70       	andi	r19, 0x00	; 0
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	02 2e       	mov	r0, r18
     430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_voidSetPinDir+0xce>
     432:	88 0f       	add	r24, r24
     434:	99 1f       	adc	r25, r25
     436:	0a 94       	dec	r0
     438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_voidSetPinDir+0xca>
     43a:	80 95       	com	r24
     43c:	84 23       	and	r24, r20
     43e:	8c 93       	st	X, r24
			}
			if((pin_num>=pin_D0)&&(pin_num<=pin_D7))
     440:	89 81       	ldd	r24, Y+1	; 0x01
     442:	88 31       	cpi	r24, 0x18	; 24
     444:	08 f4       	brcc	.+2      	; 0x448 <DIO_voidSetPinDir+0xe0>
     446:	89 c0       	rjmp	.+274    	; 0x55a <DIO_voidSetPinDir+0x1f2>
     448:	89 81       	ldd	r24, Y+1	; 0x01
     44a:	80 32       	cpi	r24, 0x20	; 32
     44c:	08 f0       	brcs	.+2      	; 0x450 <DIO_voidSetPinDir+0xe8>
     44e:	85 c0       	rjmp	.+266    	; 0x55a <DIO_voidSetPinDir+0x1f2>
			{
				/*DDRD*/
				CLRBIT(DDRD, pin_num%8);
     450:	a1 e3       	ldi	r26, 0x31	; 49
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	e1 e3       	ldi	r30, 0x31	; 49
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 81       	ld	r24, Z
     45a:	48 2f       	mov	r20, r24
     45c:	89 81       	ldd	r24, Y+1	; 0x01
     45e:	88 2f       	mov	r24, r24
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	9c 01       	movw	r18, r24
     464:	27 70       	andi	r18, 0x07	; 7
     466:	30 70       	andi	r19, 0x00	; 0
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	02 2e       	mov	r0, r18
     46e:	02 c0       	rjmp	.+4      	; 0x474 <DIO_voidSetPinDir+0x10c>
     470:	88 0f       	add	r24, r24
     472:	99 1f       	adc	r25, r25
     474:	0a 94       	dec	r0
     476:	e2 f7       	brpl	.-8      	; 0x470 <DIO_voidSetPinDir+0x108>
     478:	80 95       	com	r24
     47a:	84 23       	and	r24, r20
     47c:	8c 93       	st	X, r24
     47e:	6d c0       	rjmp	.+218    	; 0x55a <DIO_voidSetPinDir+0x1f2>
		case 1:

			/* Output */


			if((pin_num>=pin_A0)&&(pin_num<pin_B0))
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	88 30       	cpi	r24, 0x08	; 8
     484:	b0 f4       	brcc	.+44     	; 0x4b2 <DIO_voidSetPinDir+0x14a>
			{
				/*DDRA*/
				SETBIT(DDRA, pin_num%8);
     486:	aa e3       	ldi	r26, 0x3A	; 58
     488:	b0 e0       	ldi	r27, 0x00	; 0
     48a:	ea e3       	ldi	r30, 0x3A	; 58
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	80 81       	ld	r24, Z
     490:	48 2f       	mov	r20, r24
     492:	89 81       	ldd	r24, Y+1	; 0x01
     494:	88 2f       	mov	r24, r24
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	9c 01       	movw	r18, r24
     49a:	27 70       	andi	r18, 0x07	; 7
     49c:	30 70       	andi	r19, 0x00	; 0
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	02 2e       	mov	r0, r18
     4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_voidSetPinDir+0x142>
     4a6:	88 0f       	add	r24, r24
     4a8:	99 1f       	adc	r25, r25
     4aa:	0a 94       	dec	r0
     4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_voidSetPinDir+0x13e>
     4ae:	84 2b       	or	r24, r20
     4b0:	8c 93       	st	X, r24
			}
			if((pin_num>=pin_B0)&&(pin_num<pin_C0))
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	88 30       	cpi	r24, 0x08	; 8
     4b6:	c8 f0       	brcs	.+50     	; 0x4ea <DIO_voidSetPinDir+0x182>
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	80 31       	cpi	r24, 0x10	; 16
     4bc:	b0 f4       	brcc	.+44     	; 0x4ea <DIO_voidSetPinDir+0x182>
			{
				/*DDRB*/
				SETBIT(DDRB, pin_num%8);
     4be:	a7 e3       	ldi	r26, 0x37	; 55
     4c0:	b0 e0       	ldi	r27, 0x00	; 0
     4c2:	e7 e3       	ldi	r30, 0x37	; 55
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	80 81       	ld	r24, Z
     4c8:	48 2f       	mov	r20, r24
     4ca:	89 81       	ldd	r24, Y+1	; 0x01
     4cc:	88 2f       	mov	r24, r24
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	9c 01       	movw	r18, r24
     4d2:	27 70       	andi	r18, 0x07	; 7
     4d4:	30 70       	andi	r19, 0x00	; 0
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	02 2e       	mov	r0, r18
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_voidSetPinDir+0x17a>
     4de:	88 0f       	add	r24, r24
     4e0:	99 1f       	adc	r25, r25
     4e2:	0a 94       	dec	r0
     4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_voidSetPinDir+0x176>
     4e6:	84 2b       	or	r24, r20
     4e8:	8c 93       	st	X, r24
			}
			if((pin_num>=pin_C0)&&(pin_num<pin_D0))
     4ea:	89 81       	ldd	r24, Y+1	; 0x01
     4ec:	80 31       	cpi	r24, 0x10	; 16
     4ee:	c8 f0       	brcs	.+50     	; 0x522 <DIO_voidSetPinDir+0x1ba>
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	88 31       	cpi	r24, 0x18	; 24
     4f4:	b0 f4       	brcc	.+44     	; 0x522 <DIO_voidSetPinDir+0x1ba>
			{
				/*DDRC*/
				SETBIT(DDRC, pin_num%8);
     4f6:	a4 e3       	ldi	r26, 0x34	; 52
     4f8:	b0 e0       	ldi	r27, 0x00	; 0
     4fa:	e4 e3       	ldi	r30, 0x34	; 52
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	80 81       	ld	r24, Z
     500:	48 2f       	mov	r20, r24
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	88 2f       	mov	r24, r24
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	9c 01       	movw	r18, r24
     50a:	27 70       	andi	r18, 0x07	; 7
     50c:	30 70       	andi	r19, 0x00	; 0
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	02 2e       	mov	r0, r18
     514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_voidSetPinDir+0x1b2>
     516:	88 0f       	add	r24, r24
     518:	99 1f       	adc	r25, r25
     51a:	0a 94       	dec	r0
     51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_voidSetPinDir+0x1ae>
     51e:	84 2b       	or	r24, r20
     520:	8c 93       	st	X, r24
			}
			if((pin_num>=pin_D0)&&(pin_num<=pin_D7))
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	88 31       	cpi	r24, 0x18	; 24
     526:	c8 f0       	brcs	.+50     	; 0x55a <DIO_voidSetPinDir+0x1f2>
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	80 32       	cpi	r24, 0x20	; 32
     52c:	b0 f4       	brcc	.+44     	; 0x55a <DIO_voidSetPinDir+0x1f2>
			{
				/*DDRD*/
				SETBIT(DDRD, pin_num%8);
     52e:	a1 e3       	ldi	r26, 0x31	; 49
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	e1 e3       	ldi	r30, 0x31	; 49
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	80 81       	ld	r24, Z
     538:	48 2f       	mov	r20, r24
     53a:	89 81       	ldd	r24, Y+1	; 0x01
     53c:	88 2f       	mov	r24, r24
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	9c 01       	movw	r18, r24
     542:	27 70       	andi	r18, 0x07	; 7
     544:	30 70       	andi	r19, 0x00	; 0
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	02 2e       	mov	r0, r18
     54c:	02 c0       	rjmp	.+4      	; 0x552 <DIO_voidSetPinDir+0x1ea>
     54e:	88 0f       	add	r24, r24
     550:	99 1f       	adc	r25, r25
     552:	0a 94       	dec	r0
     554:	e2 f7       	brpl	.-8      	; 0x54e <DIO_voidSetPinDir+0x1e6>
     556:	84 2b       	or	r24, r20
     558:	8c 93       	st	X, r24
			}
			break;
		}

}
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	cf 91       	pop	r28
     564:	df 91       	pop	r29
     566:	08 95       	ret

00000568 <DIO_voidWritePinValue>:

void DIO_voidWritePinValue(uint8 pin_num, uint8 value)
{
     568:	df 93       	push	r29
     56a:	cf 93       	push	r28
     56c:	00 d0       	rcall	.+0      	; 0x56e <DIO_voidWritePinValue+0x6>
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	89 83       	std	Y+1, r24	; 0x01
     574:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num>=pin_A0)&&(pin_num<pin_B0))
     576:	89 81       	ldd	r24, Y+1	; 0x01
     578:	88 30       	cpi	r24, 0x08	; 8
     57a:	30 f5       	brcc	.+76     	; 0x5c8 <DIO_voidWritePinValue+0x60>
	{
		/*PORTA*/
		ASSIGNBIT(PORTA, pin_num%8, value);
     57c:	ab e3       	ldi	r26, 0x3B	; 59
     57e:	b0 e0       	ldi	r27, 0x00	; 0
     580:	eb e3       	ldi	r30, 0x3B	; 59
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	80 81       	ld	r24, Z
     586:	48 2f       	mov	r20, r24
     588:	89 81       	ldd	r24, Y+1	; 0x01
     58a:	88 2f       	mov	r24, r24
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	9c 01       	movw	r18, r24
     590:	27 70       	andi	r18, 0x07	; 7
     592:	30 70       	andi	r19, 0x00	; 0
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_voidWritePinValue+0x36>
     59a:	88 0f       	add	r24, r24
     59c:	99 1f       	adc	r25, r25
     59e:	2a 95       	dec	r18
     5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_voidWritePinValue+0x32>
     5a2:	80 95       	com	r24
     5a4:	48 23       	and	r20, r24
     5a6:	8a 81       	ldd	r24, Y+2	; 0x02
     5a8:	28 2f       	mov	r18, r24
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	89 81       	ldd	r24, Y+1	; 0x01
     5ae:	88 2f       	mov	r24, r24
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	87 70       	andi	r24, 0x07	; 7
     5b4:	90 70       	andi	r25, 0x00	; 0
     5b6:	b9 01       	movw	r22, r18
     5b8:	02 c0       	rjmp	.+4      	; 0x5be <DIO_voidWritePinValue+0x56>
     5ba:	66 0f       	add	r22, r22
     5bc:	77 1f       	adc	r23, r23
     5be:	8a 95       	dec	r24
     5c0:	e2 f7       	brpl	.-8      	; 0x5ba <DIO_voidWritePinValue+0x52>
     5c2:	cb 01       	movw	r24, r22
     5c4:	84 2b       	or	r24, r20
     5c6:	8c 93       	st	X, r24
	}
	if((pin_num>=pin_B0)&&(pin_num<pin_C0))
     5c8:	89 81       	ldd	r24, Y+1	; 0x01
     5ca:	88 30       	cpi	r24, 0x08	; 8
     5cc:	48 f1       	brcs	.+82     	; 0x620 <DIO_voidWritePinValue+0xb8>
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	80 31       	cpi	r24, 0x10	; 16
     5d2:	30 f5       	brcc	.+76     	; 0x620 <DIO_voidWritePinValue+0xb8>
	{
		/*PORTB*/
		ASSIGNBIT(PORTB, pin_num%8, value);
     5d4:	a8 e3       	ldi	r26, 0x38	; 56
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	e8 e3       	ldi	r30, 0x38	; 56
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	48 2f       	mov	r20, r24
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	88 2f       	mov	r24, r24
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	9c 01       	movw	r18, r24
     5e8:	27 70       	andi	r18, 0x07	; 7
     5ea:	30 70       	andi	r19, 0x00	; 0
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DIO_voidWritePinValue+0x8e>
     5f2:	88 0f       	add	r24, r24
     5f4:	99 1f       	adc	r25, r25
     5f6:	2a 95       	dec	r18
     5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <DIO_voidWritePinValue+0x8a>
     5fa:	80 95       	com	r24
     5fc:	48 23       	and	r20, r24
     5fe:	8a 81       	ldd	r24, Y+2	; 0x02
     600:	28 2f       	mov	r18, r24
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	89 81       	ldd	r24, Y+1	; 0x01
     606:	88 2f       	mov	r24, r24
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	87 70       	andi	r24, 0x07	; 7
     60c:	90 70       	andi	r25, 0x00	; 0
     60e:	b9 01       	movw	r22, r18
     610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_voidWritePinValue+0xae>
     612:	66 0f       	add	r22, r22
     614:	77 1f       	adc	r23, r23
     616:	8a 95       	dec	r24
     618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_voidWritePinValue+0xaa>
     61a:	cb 01       	movw	r24, r22
     61c:	84 2b       	or	r24, r20
     61e:	8c 93       	st	X, r24
	}
	if((pin_num>=pin_C0)&&(pin_num<pin_D0))
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	80 31       	cpi	r24, 0x10	; 16
     624:	48 f1       	brcs	.+82     	; 0x678 <DIO_voidWritePinValue+0x110>
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	88 31       	cpi	r24, 0x18	; 24
     62a:	30 f5       	brcc	.+76     	; 0x678 <DIO_voidWritePinValue+0x110>
	{
		/*PORTC*/
		ASSIGNBIT(PORTC, pin_num%8, value);
     62c:	a5 e3       	ldi	r26, 0x35	; 53
     62e:	b0 e0       	ldi	r27, 0x00	; 0
     630:	e5 e3       	ldi	r30, 0x35	; 53
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	80 81       	ld	r24, Z
     636:	48 2f       	mov	r20, r24
     638:	89 81       	ldd	r24, Y+1	; 0x01
     63a:	88 2f       	mov	r24, r24
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	9c 01       	movw	r18, r24
     640:	27 70       	andi	r18, 0x07	; 7
     642:	30 70       	andi	r19, 0x00	; 0
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	02 c0       	rjmp	.+4      	; 0x64e <DIO_voidWritePinValue+0xe6>
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	2a 95       	dec	r18
     650:	e2 f7       	brpl	.-8      	; 0x64a <DIO_voidWritePinValue+0xe2>
     652:	80 95       	com	r24
     654:	48 23       	and	r20, r24
     656:	8a 81       	ldd	r24, Y+2	; 0x02
     658:	28 2f       	mov	r18, r24
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	88 2f       	mov	r24, r24
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	87 70       	andi	r24, 0x07	; 7
     664:	90 70       	andi	r25, 0x00	; 0
     666:	b9 01       	movw	r22, r18
     668:	02 c0       	rjmp	.+4      	; 0x66e <DIO_voidWritePinValue+0x106>
     66a:	66 0f       	add	r22, r22
     66c:	77 1f       	adc	r23, r23
     66e:	8a 95       	dec	r24
     670:	e2 f7       	brpl	.-8      	; 0x66a <DIO_voidWritePinValue+0x102>
     672:	cb 01       	movw	r24, r22
     674:	84 2b       	or	r24, r20
     676:	8c 93       	st	X, r24
	}
	if((pin_num>=pin_D0)&&(pin_num<=pin_D7))
     678:	89 81       	ldd	r24, Y+1	; 0x01
     67a:	88 31       	cpi	r24, 0x18	; 24
     67c:	48 f1       	brcs	.+82     	; 0x6d0 <DIO_voidWritePinValue+0x168>
     67e:	89 81       	ldd	r24, Y+1	; 0x01
     680:	80 32       	cpi	r24, 0x20	; 32
     682:	30 f5       	brcc	.+76     	; 0x6d0 <DIO_voidWritePinValue+0x168>
	{
		/*PORTD*/
		ASSIGNBIT(PORTD, pin_num%8, value);
     684:	a2 e3       	ldi	r26, 0x32	; 50
     686:	b0 e0       	ldi	r27, 0x00	; 0
     688:	e2 e3       	ldi	r30, 0x32	; 50
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	80 81       	ld	r24, Z
     68e:	48 2f       	mov	r20, r24
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	88 2f       	mov	r24, r24
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	9c 01       	movw	r18, r24
     698:	27 70       	andi	r18, 0x07	; 7
     69a:	30 70       	andi	r19, 0x00	; 0
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <DIO_voidWritePinValue+0x13e>
     6a2:	88 0f       	add	r24, r24
     6a4:	99 1f       	adc	r25, r25
     6a6:	2a 95       	dec	r18
     6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <DIO_voidWritePinValue+0x13a>
     6aa:	80 95       	com	r24
     6ac:	48 23       	and	r20, r24
     6ae:	8a 81       	ldd	r24, Y+2	; 0x02
     6b0:	28 2f       	mov	r18, r24
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	88 2f       	mov	r24, r24
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	87 70       	andi	r24, 0x07	; 7
     6bc:	90 70       	andi	r25, 0x00	; 0
     6be:	b9 01       	movw	r22, r18
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <DIO_voidWritePinValue+0x15e>
     6c2:	66 0f       	add	r22, r22
     6c4:	77 1f       	adc	r23, r23
     6c6:	8a 95       	dec	r24
     6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <DIO_voidWritePinValue+0x15a>
     6ca:	cb 01       	movw	r24, r22
     6cc:	84 2b       	or	r24, r20
     6ce:	8c 93       	st	X, r24
	}
}
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	cf 91       	pop	r28
     6d6:	df 91       	pop	r29
     6d8:	08 95       	ret

000006da <DIO_U8ReadPinValue>:

uint8 DIO_U8ReadPinValue(uint8 pin_num)
{
     6da:	df 93       	push	r29
     6dc:	cf 93       	push	r28
     6de:	00 d0       	rcall	.+0      	; 0x6e0 <DIO_U8ReadPinValue+0x6>
     6e0:	cd b7       	in	r28, 0x3d	; 61
     6e2:	de b7       	in	r29, 0x3e	; 62
     6e4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 pin;
	if((pin_num>=pin_A0)&&(pin_num<pin_B0))
     6e6:	8a 81       	ldd	r24, Y+2	; 0x02
     6e8:	88 30       	cpi	r24, 0x08	; 8
     6ea:	98 f4       	brcc	.+38     	; 0x712 <DIO_U8ReadPinValue+0x38>
	{
		/*PINA*/
		pin= (GETBIT(PINA, pin_num%8));
     6ec:	e9 e3       	ldi	r30, 0x39	; 57
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	28 2f       	mov	r18, r24
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	8a 81       	ldd	r24, Y+2	; 0x02
     6f8:	88 2f       	mov	r24, r24
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	87 70       	andi	r24, 0x07	; 7
     6fe:	90 70       	andi	r25, 0x00	; 0
     700:	a9 01       	movw	r20, r18
     702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_U8ReadPinValue+0x2e>
     704:	55 95       	asr	r21
     706:	47 95       	ror	r20
     708:	8a 95       	dec	r24
     70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_U8ReadPinValue+0x2a>
     70c:	ca 01       	movw	r24, r20
     70e:	81 70       	andi	r24, 0x01	; 1
     710:	89 83       	std	Y+1, r24	; 0x01
	}
	if((pin_num>=pin_B0)&&(pin_num<pin_C0))
     712:	8a 81       	ldd	r24, Y+2	; 0x02
     714:	88 30       	cpi	r24, 0x08	; 8
     716:	b0 f0       	brcs	.+44     	; 0x744 <DIO_U8ReadPinValue+0x6a>
     718:	8a 81       	ldd	r24, Y+2	; 0x02
     71a:	80 31       	cpi	r24, 0x10	; 16
     71c:	98 f4       	brcc	.+38     	; 0x744 <DIO_U8ReadPinValue+0x6a>
	{
		/*PINB*/
		pin= (GETBIT(PINB, pin_num%8));
     71e:	e6 e3       	ldi	r30, 0x36	; 54
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	80 81       	ld	r24, Z
     724:	28 2f       	mov	r18, r24
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	8a 81       	ldd	r24, Y+2	; 0x02
     72a:	88 2f       	mov	r24, r24
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	87 70       	andi	r24, 0x07	; 7
     730:	90 70       	andi	r25, 0x00	; 0
     732:	a9 01       	movw	r20, r18
     734:	02 c0       	rjmp	.+4      	; 0x73a <DIO_U8ReadPinValue+0x60>
     736:	55 95       	asr	r21
     738:	47 95       	ror	r20
     73a:	8a 95       	dec	r24
     73c:	e2 f7       	brpl	.-8      	; 0x736 <DIO_U8ReadPinValue+0x5c>
     73e:	ca 01       	movw	r24, r20
     740:	81 70       	andi	r24, 0x01	; 1
     742:	89 83       	std	Y+1, r24	; 0x01
	}
	if((pin_num>=pin_C0)&&(pin_num<pin_D0))
     744:	8a 81       	ldd	r24, Y+2	; 0x02
     746:	80 31       	cpi	r24, 0x10	; 16
     748:	b0 f0       	brcs	.+44     	; 0x776 <DIO_U8ReadPinValue+0x9c>
     74a:	8a 81       	ldd	r24, Y+2	; 0x02
     74c:	88 31       	cpi	r24, 0x18	; 24
     74e:	98 f4       	brcc	.+38     	; 0x776 <DIO_U8ReadPinValue+0x9c>
	{
		/*PINC*/
		pin= (GETBIT(PINC, pin_num%8));
     750:	e3 e3       	ldi	r30, 0x33	; 51
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	80 81       	ld	r24, Z
     756:	28 2f       	mov	r18, r24
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	8a 81       	ldd	r24, Y+2	; 0x02
     75c:	88 2f       	mov	r24, r24
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	87 70       	andi	r24, 0x07	; 7
     762:	90 70       	andi	r25, 0x00	; 0
     764:	a9 01       	movw	r20, r18
     766:	02 c0       	rjmp	.+4      	; 0x76c <DIO_U8ReadPinValue+0x92>
     768:	55 95       	asr	r21
     76a:	47 95       	ror	r20
     76c:	8a 95       	dec	r24
     76e:	e2 f7       	brpl	.-8      	; 0x768 <DIO_U8ReadPinValue+0x8e>
     770:	ca 01       	movw	r24, r20
     772:	81 70       	andi	r24, 0x01	; 1
     774:	89 83       	std	Y+1, r24	; 0x01
	}
	if((pin_num>=pin_D0)&&(pin_num<=pin_D7))
     776:	8a 81       	ldd	r24, Y+2	; 0x02
     778:	88 31       	cpi	r24, 0x18	; 24
     77a:	b0 f0       	brcs	.+44     	; 0x7a8 <DIO_U8ReadPinValue+0xce>
     77c:	8a 81       	ldd	r24, Y+2	; 0x02
     77e:	80 32       	cpi	r24, 0x20	; 32
     780:	98 f4       	brcc	.+38     	; 0x7a8 <DIO_U8ReadPinValue+0xce>
	{
		/*PIND*/
		pin= (GETBIT(PIND, pin_num%8));
     782:	e0 e3       	ldi	r30, 0x30	; 48
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	80 81       	ld	r24, Z
     788:	28 2f       	mov	r18, r24
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	8a 81       	ldd	r24, Y+2	; 0x02
     78e:	88 2f       	mov	r24, r24
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	87 70       	andi	r24, 0x07	; 7
     794:	90 70       	andi	r25, 0x00	; 0
     796:	a9 01       	movw	r20, r18
     798:	02 c0       	rjmp	.+4      	; 0x79e <DIO_U8ReadPinValue+0xc4>
     79a:	55 95       	asr	r21
     79c:	47 95       	ror	r20
     79e:	8a 95       	dec	r24
     7a0:	e2 f7       	brpl	.-8      	; 0x79a <DIO_U8ReadPinValue+0xc0>
     7a2:	ca 01       	movw	r24, r20
     7a4:	81 70       	andi	r24, 0x01	; 1
     7a6:	89 83       	std	Y+1, r24	; 0x01
	}
    return pin;
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
}
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	cf 91       	pop	r28
     7b0:	df 91       	pop	r29
     7b2:	08 95       	ret

000007b4 <SLIP_Init>:
// Init
//
// @brief: init SLIP decoder
//
//------------------------------------------------------------------------------
void SLIP_Init(TSLIP_CbRxMessage cbRxMessage) {
     7b4:	df 93       	push	r29
     7b6:	cf 93       	push	r28
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <SLIP_Init+0x6>
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	9a 83       	std	Y+2, r25	; 0x02
     7c0:	89 83       	std	Y+1, r24	; 0x01
	// init decoder to idle state, no rx-buffer avaliable
	SLIP.RxState = SLIPDEC_IDLE_STATE;
     7c2:	10 92 19 03 	sts	0x0319, r1
     7c6:	10 92 18 03 	sts	0x0318, r1
	SLIP.RxIndex = 0;
     7ca:	10 92 1b 03 	sts	0x031B, r1
     7ce:	10 92 1a 03 	sts	0x031A, r1
	SLIP.RxBuffer = 0;
     7d2:	10 92 1f 03 	sts	0x031F, r1
     7d6:	10 92 1e 03 	sts	0x031E, r1
	SLIP.RxBufferSize = 0;
     7da:	10 92 1d 03 	sts	0x031D, r1
     7de:	10 92 1c 03 	sts	0x031C, r1
	// save message receiver callback
	SLIP.CbRxMessage = cbRxMessage;
     7e2:	89 81       	ldd	r24, Y+1	; 0x01
     7e4:	9a 81       	ldd	r25, Y+2	; 0x02
     7e6:	90 93 21 03 	sts	0x0321, r25
     7ea:	80 93 20 03 	sts	0x0320, r24
	// init encoder
	SLIP.TxIndex = 0;
     7ee:	10 92 23 03 	sts	0x0323, r1
     7f2:	10 92 22 03 	sts	0x0322, r1
	SLIP.TxBuffer = 0;
     7f6:	10 92 27 03 	sts	0x0327, r1
     7fa:	10 92 26 03 	sts	0x0326, r1
	SLIP.TxBufferSize = 0;
     7fe:	10 92 25 03 	sts	0x0325, r1
     802:	10 92 24 03 	sts	0x0324, r1
}
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	cf 91       	pop	r28
     80c:	df 91       	pop	r29
     80e:	08 95       	ret

00000810 <SLIP_StoreTxByte>:
// SLIP_StoreTxByte
//
// @brief: store a byte into TxBuffer
//
//------------------------------------------------------------------------------
static void SLIP_StoreTxByte(uint8 txByte) {
     810:	df 93       	push	r29
     812:	cf 93       	push	r28
     814:	0f 92       	push	r0
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
     81a:	89 83       	std	Y+1, r24	; 0x01
	if (SLIP.TxIndex < SLIP.TxBufferSize)
     81c:	20 91 22 03 	lds	r18, 0x0322
     820:	30 91 23 03 	lds	r19, 0x0323
     824:	80 91 24 03 	lds	r24, 0x0324
     828:	90 91 25 03 	lds	r25, 0x0325
     82c:	28 17       	cp	r18, r24
     82e:	39 07       	cpc	r19, r25
     830:	a4 f4       	brge	.+40     	; 0x85a <SLIP_StoreTxByte+0x4a>
		SLIP.TxBuffer[SLIP.TxIndex++] = txByte;
     832:	20 91 26 03 	lds	r18, 0x0326
     836:	30 91 27 03 	lds	r19, 0x0327
     83a:	40 91 22 03 	lds	r20, 0x0322
     83e:	50 91 23 03 	lds	r21, 0x0323
     842:	ca 01       	movw	r24, r20
     844:	f9 01       	movw	r30, r18
     846:	e8 0f       	add	r30, r24
     848:	f9 1f       	adc	r31, r25
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	80 83       	st	Z, r24
     84e:	ca 01       	movw	r24, r20
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	90 93 23 03 	sts	0x0323, r25
     856:	80 93 22 03 	sts	0x0322, r24
}
     85a:	0f 90       	pop	r0
     85c:	cf 91       	pop	r28
     85e:	df 91       	pop	r29
     860:	08 95       	ret

00000862 <SLIP_EncodeData>:
//
// @brief: encode a messages into dstBuffer
//
//------------------------------------------------------------------------------
int SLIP_EncodeData(uint8* dstBuffer, int dstBufferSize, uint8* srcData,
		int srcLength) {
     862:	df 93       	push	r29
     864:	cf 93       	push	r28
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
     86a:	2f 97       	sbiw	r28, 0x0f	; 15
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	f8 94       	cli
     870:	de bf       	out	0x3e, r29	; 62
     872:	0f be       	out	0x3f, r0	; 63
     874:	cd bf       	out	0x3d, r28	; 61
     876:	9c 83       	std	Y+4, r25	; 0x04
     878:	8b 83       	std	Y+3, r24	; 0x03
     87a:	7e 83       	std	Y+6, r23	; 0x06
     87c:	6d 83       	std	Y+5, r22	; 0x05
     87e:	58 87       	std	Y+8, r21	; 0x08
     880:	4f 83       	std	Y+7, r20	; 0x07
     882:	3a 87       	std	Y+10, r19	; 0x0a
     884:	29 87       	std	Y+9, r18	; 0x09
	// save start pointer
	int txLength = 0;
     886:	1a 82       	std	Y+2, r1	; 0x02
     888:	19 82       	std	Y+1, r1	; 0x01
	// init TxBuffer
	SLIP.TxBuffer = dstBuffer;
     88a:	8b 81       	ldd	r24, Y+3	; 0x03
     88c:	9c 81       	ldd	r25, Y+4	; 0x04
     88e:	90 93 27 03 	sts	0x0327, r25
     892:	80 93 26 03 	sts	0x0326, r24
	// init TxIndex
	SLIP.TxIndex = 0;
     896:	10 92 23 03 	sts	0x0323, r1
     89a:	10 92 22 03 	sts	0x0322, r1
	// init size
	SLIP.TxBufferSize = dstBufferSize;
     89e:	8d 81       	ldd	r24, Y+5	; 0x05
     8a0:	9e 81       	ldd	r25, Y+6	; 0x06
     8a2:	90 93 25 03 	sts	0x0325, r25
     8a6:	80 93 24 03 	sts	0x0324, r24
	// send start of SLIP message
	SLIP_StoreTxByte(SLIP_END);
     8aa:	80 ec       	ldi	r24, 0xC0	; 192
     8ac:	0e 94 08 04 	call	0x810	; 0x810 <SLIP_StoreTxByte>
     8b0:	2a c0       	rjmp	.+84     	; 0x906 <SLIP_EncodeData+0xa4>
	// iterate over all message bytes
	while (srcLength--) {
		switch (*srcData) {
     8b2:	ef 81       	ldd	r30, Y+7	; 0x07
     8b4:	f8 85       	ldd	r31, Y+8	; 0x08
     8b6:	80 81       	ld	r24, Z
     8b8:	28 2f       	mov	r18, r24
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	3f 87       	std	Y+15, r19	; 0x0f
     8be:	2e 87       	std	Y+14, r18	; 0x0e
     8c0:	8e 85       	ldd	r24, Y+14	; 0x0e
     8c2:	9f 85       	ldd	r25, Y+15	; 0x0f
     8c4:	80 3c       	cpi	r24, 0xC0	; 192
     8c6:	91 05       	cpc	r25, r1
     8c8:	31 f0       	breq	.+12     	; 0x8d6 <SLIP_EncodeData+0x74>
     8ca:	2e 85       	ldd	r18, Y+14	; 0x0e
     8cc:	3f 85       	ldd	r19, Y+15	; 0x0f
     8ce:	2b 3d       	cpi	r18, 0xDB	; 219
     8d0:	31 05       	cpc	r19, r1
     8d2:	41 f0       	breq	.+16     	; 0x8e4 <SLIP_EncodeData+0x82>
     8d4:	0e c0       	rjmp	.+28     	; 0x8f2 <SLIP_EncodeData+0x90>
		case SLIP_END:
			SLIP_StoreTxByte(SLIP_ESC);
     8d6:	8b ed       	ldi	r24, 0xDB	; 219
     8d8:	0e 94 08 04 	call	0x810	; 0x810 <SLIP_StoreTxByte>
			SLIP_StoreTxByte(SLIP_ESC_END);
     8dc:	8c ed       	ldi	r24, 0xDC	; 220
     8de:	0e 94 08 04 	call	0x810	; 0x810 <SLIP_StoreTxByte>
     8e2:	0c c0       	rjmp	.+24     	; 0x8fc <SLIP_EncodeData+0x9a>
			break;
		case SLIP_ESC:
			SLIP_StoreTxByte(SLIP_ESC);
     8e4:	8b ed       	ldi	r24, 0xDB	; 219
     8e6:	0e 94 08 04 	call	0x810	; 0x810 <SLIP_StoreTxByte>
			SLIP_StoreTxByte(SLIP_ESC_ESC);
     8ea:	8d ed       	ldi	r24, 0xDD	; 221
     8ec:	0e 94 08 04 	call	0x810	; 0x810 <SLIP_StoreTxByte>
     8f0:	05 c0       	rjmp	.+10     	; 0x8fc <SLIP_EncodeData+0x9a>
			break;
		default:
			SLIP_StoreTxByte(*srcData);
     8f2:	ef 81       	ldd	r30, Y+7	; 0x07
     8f4:	f8 85       	ldd	r31, Y+8	; 0x08
     8f6:	80 81       	ld	r24, Z
     8f8:	0e 94 08 04 	call	0x810	; 0x810 <SLIP_StoreTxByte>
			break;
		}
		// next byte
		srcData++;
     8fc:	8f 81       	ldd	r24, Y+7	; 0x07
     8fe:	98 85       	ldd	r25, Y+8	; 0x08
     900:	01 96       	adiw	r24, 0x01	; 1
     902:	98 87       	std	Y+8, r25	; 0x08
     904:	8f 83       	std	Y+7, r24	; 0x07
	// init size
	SLIP.TxBufferSize = dstBufferSize;
	// send start of SLIP message
	SLIP_StoreTxByte(SLIP_END);
	// iterate over all message bytes
	while (srcLength--) {
     906:	1d 86       	std	Y+13, r1	; 0x0d
     908:	89 85       	ldd	r24, Y+9	; 0x09
     90a:	9a 85       	ldd	r25, Y+10	; 0x0a
     90c:	00 97       	sbiw	r24, 0x00	; 0
     90e:	11 f0       	breq	.+4      	; 0x914 <SLIP_EncodeData+0xb2>
     910:	31 e0       	ldi	r19, 0x01	; 1
     912:	3d 87       	std	Y+13, r19	; 0x0d
     914:	89 85       	ldd	r24, Y+9	; 0x09
     916:	9a 85       	ldd	r25, Y+10	; 0x0a
     918:	01 97       	sbiw	r24, 0x01	; 1
     91a:	9a 87       	std	Y+10, r25	; 0x0a
     91c:	89 87       	std	Y+9, r24	; 0x09
     91e:	8d 85       	ldd	r24, Y+13	; 0x0d
     920:	88 23       	and	r24, r24
     922:	39 f6       	brne	.-114    	; 0x8b2 <SLIP_EncodeData+0x50>
		}
		// next byte
		srcData++;
	}
	// send end of SLIP message
	SLIP_StoreTxByte(SLIP_END);
     924:	80 ec       	ldi	r24, 0xC0	; 192
     926:	0e 94 08 04 	call	0x810	; 0x810 <SLIP_StoreTxByte>
	// length ok ?
	if (SLIP.TxIndex <= SLIP.TxBufferSize)
     92a:	20 91 22 03 	lds	r18, 0x0322
     92e:	30 91 23 03 	lds	r19, 0x0323
     932:	80 91 24 03 	lds	r24, 0x0324
     936:	90 91 25 03 	lds	r25, 0x0325
     93a:	82 17       	cp	r24, r18
     93c:	93 07       	cpc	r25, r19
     93e:	3c f0       	brlt	.+14     	; 0x94e <SLIP_EncodeData+0xec>
		return SLIP.TxIndex;
     940:	20 91 22 03 	lds	r18, 0x0322
     944:	30 91 23 03 	lds	r19, 0x0323
     948:	3c 87       	std	Y+12, r19	; 0x0c
     94a:	2b 87       	std	Y+11, r18	; 0x0b
     94c:	04 c0       	rjmp	.+8      	; 0x956 <SLIP_EncodeData+0xf4>
	// return tx length error
	return -1;
     94e:	8f ef       	ldi	r24, 0xFF	; 255
     950:	9f ef       	ldi	r25, 0xFF	; 255
     952:	9c 87       	std	Y+12, r25	; 0x0c
     954:	8b 87       	std	Y+11, r24	; 0x0b
     956:	8b 85       	ldd	r24, Y+11	; 0x0b
     958:	9c 85       	ldd	r25, Y+12	; 0x0c
}
     95a:	2f 96       	adiw	r28, 0x0f	; 15
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	de bf       	out	0x3e, r29	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	cd bf       	out	0x3d, r28	; 61
     966:	cf 91       	pop	r28
     968:	df 91       	pop	r29
     96a:	08 95       	ret

0000096c <SLIP_SetRxBuffer>:
// SetRxBuffer
//
// @brief: configure a rx-buffer and enable receiver/decoder
//
//------------------------------------------------------------------------------
bool SLIP_SetRxBuffer(uint8* rxBuffer, int rxBufferSize) {
     96c:	df 93       	push	r29
     96e:	cf 93       	push	r28
     970:	00 d0       	rcall	.+0      	; 0x972 <SLIP_SetRxBuffer+0x6>
     972:	00 d0       	rcall	.+0      	; 0x974 <SLIP_SetRxBuffer+0x8>
     974:	0f 92       	push	r0
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
     97a:	9a 83       	std	Y+2, r25	; 0x02
     97c:	89 83       	std	Y+1, r24	; 0x01
     97e:	7c 83       	std	Y+4, r23	; 0x04
     980:	6b 83       	std	Y+3, r22	; 0x03
	// receiver in IDLE state and client already registered ?
	if ((SLIP.RxState == SLIPDEC_IDLE_STATE) && SLIP.CbRxMessage) {
     982:	80 91 18 03 	lds	r24, 0x0318
     986:	90 91 19 03 	lds	r25, 0x0319
     98a:	00 97       	sbiw	r24, 0x00	; 0
     98c:	d9 f4       	brne	.+54     	; 0x9c4 <SLIP_SetRxBuffer+0x58>
     98e:	80 91 20 03 	lds	r24, 0x0320
     992:	90 91 21 03 	lds	r25, 0x0321
     996:	00 97       	sbiw	r24, 0x00	; 0
     998:	a9 f0       	breq	.+42     	; 0x9c4 <SLIP_SetRxBuffer+0x58>
		// same buffer params
		SLIP.RxBuffer = rxBuffer;
     99a:	89 81       	ldd	r24, Y+1	; 0x01
     99c:	9a 81       	ldd	r25, Y+2	; 0x02
     99e:	90 93 1f 03 	sts	0x031F, r25
     9a2:	80 93 1e 03 	sts	0x031E, r24
		SLIP.RxBufferSize = rxBufferSize;
     9a6:	8b 81       	ldd	r24, Y+3	; 0x03
     9a8:	9c 81       	ldd	r25, Y+4	; 0x04
     9aa:	90 93 1d 03 	sts	0x031D, r25
     9ae:	80 93 1c 03 	sts	0x031C, r24
		// enable decoder
		SLIP.RxState = SLIPDEC_START_STATE;
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	90 93 19 03 	sts	0x0319, r25
     9ba:	80 93 18 03 	sts	0x0318, r24
		return true;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	8d 83       	std	Y+5, r24	; 0x05
     9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <SLIP_SetRxBuffer+0x5a>
	}
	return false;
     9c4:	1d 82       	std	Y+5, r1	; 0x05
     9c6:	8d 81       	ldd	r24, Y+5	; 0x05
}
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	cf 91       	pop	r28
     9d4:	df 91       	pop	r29
     9d6:	08 95       	ret

000009d8 <SLIP_StoreRxByte>:
// SLIP_StoreRxByte
//
// @brief: store SLIP decoded rxByte
//
//------------------------------------------------------------------------------
static void SLIP_StoreRxByte(uint8 rxByte) {
     9d8:	df 93       	push	r29
     9da:	cf 93       	push	r28
     9dc:	0f 92       	push	r0
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
     9e2:	89 83       	std	Y+1, r24	; 0x01
	if (SLIP.RxIndex < SLIP.RxBufferSize)
     9e4:	20 91 1a 03 	lds	r18, 0x031A
     9e8:	30 91 1b 03 	lds	r19, 0x031B
     9ec:	80 91 1c 03 	lds	r24, 0x031C
     9f0:	90 91 1d 03 	lds	r25, 0x031D
     9f4:	28 17       	cp	r18, r24
     9f6:	39 07       	cpc	r19, r25
     9f8:	a4 f4       	brge	.+40     	; 0xa22 <SLIP_StoreRxByte+0x4a>
		SLIP.RxBuffer[SLIP.RxIndex++] = rxByte;
     9fa:	20 91 1e 03 	lds	r18, 0x031E
     9fe:	30 91 1f 03 	lds	r19, 0x031F
     a02:	40 91 1a 03 	lds	r20, 0x031A
     a06:	50 91 1b 03 	lds	r21, 0x031B
     a0a:	ca 01       	movw	r24, r20
     a0c:	f9 01       	movw	r30, r18
     a0e:	e8 0f       	add	r30, r24
     a10:	f9 1f       	adc	r31, r25
     a12:	89 81       	ldd	r24, Y+1	; 0x01
     a14:	80 83       	st	Z, r24
     a16:	ca 01       	movw	r24, r20
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	90 93 1b 03 	sts	0x031B, r25
     a1e:	80 93 1a 03 	sts	0x031A, r24
}
     a22:	0f 90       	pop	r0
     a24:	cf 91       	pop	r28
     a26:	df 91       	pop	r29
     a28:	08 95       	ret

00000a2a <SLIP_DecodeData>:
// DecodeData
//
// @brief: process received byte stream
//
//------------------------------------------------------------------------------
void SLIP_DecodeData(uint8* srcData, int srcLength) {
     a2a:	df 93       	push	r29
     a2c:	cf 93       	push	r28
     a2e:	cd b7       	in	r28, 0x3d	; 61
     a30:	de b7       	in	r29, 0x3e	; 62
     a32:	2e 97       	sbiw	r28, 0x0e	; 14
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	f8 94       	cli
     a38:	de bf       	out	0x3e, r29	; 62
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	cd bf       	out	0x3d, r28	; 61
     a3e:	9d 83       	std	Y+5, r25	; 0x05
     a40:	8c 83       	std	Y+4, r24	; 0x04
     a42:	7f 83       	std	Y+7, r23	; 0x07
     a44:	6e 83       	std	Y+6, r22	; 0x06
	// init result
	int result = 0;
     a46:	1b 82       	std	Y+3, r1	; 0x03
     a48:	1a 82       	std	Y+2, r1	; 0x02
     a4a:	ae c0       	rjmp	.+348    	; 0xba8 <SLIP_DecodeData+0x17e>
	// iterate over all received bytes
	while (srcLength--) {
		// get rxByte
		uint8 rxByte = *srcData++;
     a4c:	ec 81       	ldd	r30, Y+4	; 0x04
     a4e:	fd 81       	ldd	r31, Y+5	; 0x05
     a50:	80 81       	ld	r24, Z
     a52:	89 83       	std	Y+1, r24	; 0x01
     a54:	8c 81       	ldd	r24, Y+4	; 0x04
     a56:	9d 81       	ldd	r25, Y+5	; 0x05
     a58:	01 96       	adiw	r24, 0x01	; 1
     a5a:	9d 83       	std	Y+5, r25	; 0x05
     a5c:	8c 83       	std	Y+4, r24	; 0x04
		// decode according to current state
		switch (SLIP.RxState) {
     a5e:	20 91 18 03 	lds	r18, 0x0318
     a62:	30 91 19 03 	lds	r19, 0x0319
     a66:	3e 87       	std	Y+14, r19	; 0x0e
     a68:	2d 87       	std	Y+13, r18	; 0x0d
     a6a:	8d 85       	ldd	r24, Y+13	; 0x0d
     a6c:	9e 85       	ldd	r25, Y+14	; 0x0e
     a6e:	82 30       	cpi	r24, 0x02	; 2
     a70:	91 05       	cpc	r25, r1
     a72:	d9 f0       	breq	.+54     	; 0xaaa <SLIP_DecodeData+0x80>
     a74:	2d 85       	ldd	r18, Y+13	; 0x0d
     a76:	3e 85       	ldd	r19, Y+14	; 0x0e
     a78:	23 30       	cpi	r18, 0x03	; 3
     a7a:	31 05       	cpc	r19, r1
     a7c:	09 f4       	brne	.+2      	; 0xa80 <SLIP_DecodeData+0x56>
     a7e:	6a c0       	rjmp	.+212    	; 0xb54 <SLIP_DecodeData+0x12a>
     a80:	8d 85       	ldd	r24, Y+13	; 0x0d
     a82:	9e 85       	ldd	r25, Y+14	; 0x0e
     a84:	81 30       	cpi	r24, 0x01	; 1
     a86:	91 05       	cpc	r25, r1
     a88:	09 f0       	breq	.+2      	; 0xa8c <SLIP_DecodeData+0x62>
     a8a:	8e c0       	rjmp	.+284    	; 0xba8 <SLIP_DecodeData+0x17e>
		case SLIPDEC_START_STATE:
			// start of SLIP frame ?
			if (rxByte == SLIP_END) {
     a8c:	89 81       	ldd	r24, Y+1	; 0x01
     a8e:	80 3c       	cpi	r24, 0xC0	; 192
     a90:	09 f0       	breq	.+2      	; 0xa94 <SLIP_DecodeData+0x6a>
     a92:	8a c0       	rjmp	.+276    	; 0xba8 <SLIP_DecodeData+0x17e>
				// init read index
				SLIP.RxIndex = 0;
     a94:	10 92 1b 03 	sts	0x031B, r1
     a98:	10 92 1a 03 	sts	0x031A, r1
				// next state
				SLIP.RxState = SLIPDEC_IN_FRAME_STATE;
     a9c:	82 e0       	ldi	r24, 0x02	; 2
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	90 93 19 03 	sts	0x0319, r25
     aa4:	80 93 18 03 	sts	0x0318, r24
     aa8:	7f c0       	rjmp	.+254    	; 0xba8 <SLIP_DecodeData+0x17e>
			}
			break;
		case SLIPDEC_IN_FRAME_STATE:
			switch (rxByte) {
     aaa:	89 81       	ldd	r24, Y+1	; 0x01
     aac:	28 2f       	mov	r18, r24
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	3c 87       	std	Y+12, r19	; 0x0c
     ab2:	2b 87       	std	Y+11, r18	; 0x0b
     ab4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ab6:	9c 85       	ldd	r25, Y+12	; 0x0c
     ab8:	80 3c       	cpi	r24, 0xC0	; 192
     aba:	91 05       	cpc	r25, r1
     abc:	31 f0       	breq	.+12     	; 0xaca <SLIP_DecodeData+0xa0>
     abe:	2b 85       	ldd	r18, Y+11	; 0x0b
     ac0:	3c 85       	ldd	r19, Y+12	; 0x0c
     ac2:	2b 3d       	cpi	r18, 0xDB	; 219
     ac4:	31 05       	cpc	r19, r1
     ac6:	d9 f1       	breq	.+118    	; 0xb3e <SLIP_DecodeData+0x114>
     ac8:	41 c0       	rjmp	.+130    	; 0xb4c <SLIP_DecodeData+0x122>
			case SLIP_END:
				// data received ?
				if (SLIP.RxIndex > 0) {
     aca:	80 91 1a 03 	lds	r24, 0x031A
     ace:	90 91 1b 03 	lds	r25, 0x031B
     ad2:	18 16       	cp	r1, r24
     ad4:	19 06       	cpc	r1, r25
     ad6:	74 f5       	brge	.+92     	; 0xb34 <SLIP_DecodeData+0x10a>
					// yes, receiver registered ?
					if (SLIP.CbRxMessage) {
     ad8:	80 91 20 03 	lds	r24, 0x0320
     adc:	90 91 21 03 	lds	r25, 0x0321
     ae0:	00 97       	sbiw	r24, 0x00	; 0
     ae2:	21 f1       	breq	.+72     	; 0xb2c <SLIP_DecodeData+0x102>
						// yes, call message receive
						SLIP.RxBuffer = (*SLIP.CbRxMessage)(SLIP.RxBuffer,
     ae4:	e0 91 20 03 	lds	r30, 0x0320
     ae8:	f0 91 21 03 	lds	r31, 0x0321
     aec:	80 91 1e 03 	lds	r24, 0x031E
     af0:	90 91 1f 03 	lds	r25, 0x031F
     af4:	20 91 1a 03 	lds	r18, 0x031A
     af8:	30 91 1b 03 	lds	r19, 0x031B
     afc:	b9 01       	movw	r22, r18
     afe:	09 95       	icall
     b00:	90 93 1f 03 	sts	0x031F, r25
     b04:	80 93 1e 03 	sts	0x031E, r24
								SLIP.RxIndex);
						// new buffer available ?
						if (!SLIP.RxBuffer) {
     b08:	80 91 1e 03 	lds	r24, 0x031E
     b0c:	90 91 1f 03 	lds	r25, 0x031F
     b10:	00 97       	sbiw	r24, 0x00	; 0
     b12:	29 f4       	brne	.+10     	; 0xb1e <SLIP_DecodeData+0xf4>
							SLIP.RxState = SLIPDEC_IDLE_STATE;
     b14:	10 92 19 03 	sts	0x0319, r1
     b18:	10 92 18 03 	sts	0x0318, r1
     b1c:	0b c0       	rjmp	.+22     	; 0xb34 <SLIP_DecodeData+0x10a>
						} else {
							SLIP.RxState = SLIPDEC_START_STATE;
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	90 93 19 03 	sts	0x0319, r25
     b26:	80 93 18 03 	sts	0x0318, r24
     b2a:	04 c0       	rjmp	.+8      	; 0xb34 <SLIP_DecodeData+0x10a>
						}
					} else {
						// disable decoder, temp. no buffer avaliable
						SLIP.RxState = SLIPDEC_IDLE_STATE;
     b2c:	10 92 19 03 	sts	0x0319, r1
     b30:	10 92 18 03 	sts	0x0318, r1
					}
				}
				// init read index
				SLIP.RxIndex = 0;
     b34:	10 92 1b 03 	sts	0x031B, r1
     b38:	10 92 1a 03 	sts	0x031A, r1
     b3c:	35 c0       	rjmp	.+106    	; 0xba8 <SLIP_DecodeData+0x17e>
				break;
			case SLIP_ESC:
				// enter escape sequence state
				SLIP.RxState = SLIPDEC_ESC_STATE;
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	90 93 19 03 	sts	0x0319, r25
     b46:	80 93 18 03 	sts	0x0318, r24
     b4a:	2e c0       	rjmp	.+92     	; 0xba8 <SLIP_DecodeData+0x17e>
				break;
			default:
				// store byte
				SLIP_StoreRxByte(rxByte);
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <SLIP_StoreRxByte>
     b52:	2a c0       	rjmp	.+84     	; 0xba8 <SLIP_DecodeData+0x17e>
				break;
			}
			break;
		case SLIPDEC_ESC_STATE:
			switch (rxByte) {
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	28 2f       	mov	r18, r24
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	3a 87       	std	Y+10, r19	; 0x0a
     b5c:	29 87       	std	Y+9, r18	; 0x09
     b5e:	89 85       	ldd	r24, Y+9	; 0x09
     b60:	9a 85       	ldd	r25, Y+10	; 0x0a
     b62:	8c 3d       	cpi	r24, 0xDC	; 220
     b64:	91 05       	cpc	r25, r1
     b66:	31 f0       	breq	.+12     	; 0xb74 <SLIP_DecodeData+0x14a>
     b68:	29 85       	ldd	r18, Y+9	; 0x09
     b6a:	3a 85       	ldd	r19, Y+10	; 0x0a
     b6c:	2d 3d       	cpi	r18, 0xDD	; 221
     b6e:	31 05       	cpc	r19, r1
     b70:	59 f0       	breq	.+22     	; 0xb88 <SLIP_DecodeData+0x15e>
     b72:	14 c0       	rjmp	.+40     	; 0xb9c <SLIP_DecodeData+0x172>
			case SLIP_ESC_END:
				SLIP_StoreRxByte(SLIP_END);
     b74:	80 ec       	ldi	r24, 0xC0	; 192
     b76:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <SLIP_StoreRxByte>
				// quit escape sequence state
				SLIP.RxState = SLIPDEC_IN_FRAME_STATE;
     b7a:	82 e0       	ldi	r24, 0x02	; 2
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	90 93 19 03 	sts	0x0319, r25
     b82:	80 93 18 03 	sts	0x0318, r24
     b86:	10 c0       	rjmp	.+32     	; 0xba8 <SLIP_DecodeData+0x17e>
				break;
			case SLIP_ESC_ESC:
				SLIP_StoreRxByte(SLIP_ESC);
     b88:	8b ed       	ldi	r24, 0xDB	; 219
     b8a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <SLIP_StoreRxByte>
				// quit escape sequence state
				SLIP.RxState = SLIPDEC_IN_FRAME_STATE;
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	90 93 19 03 	sts	0x0319, r25
     b96:	80 93 18 03 	sts	0x0318, r24
     b9a:	06 c0       	rjmp	.+12     	; 0xba8 <SLIP_DecodeData+0x17e>
				break;
			default:
				// abort frame receiption
				SLIP.RxState = SLIPDEC_START_STATE;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	90 93 19 03 	sts	0x0319, r25
     ba4:	80 93 18 03 	sts	0x0318, r24
//------------------------------------------------------------------------------
void SLIP_DecodeData(uint8* srcData, int srcLength) {
	// init result
	int result = 0;
	// iterate over all received bytes
	while (srcLength--) {
     ba8:	18 86       	std	Y+8, r1	; 0x08
     baa:	8e 81       	ldd	r24, Y+6	; 0x06
     bac:	9f 81       	ldd	r25, Y+7	; 0x07
     bae:	00 97       	sbiw	r24, 0x00	; 0
     bb0:	11 f0       	breq	.+4      	; 0xbb6 <SLIP_DecodeData+0x18c>
     bb2:	31 e0       	ldi	r19, 0x01	; 1
     bb4:	38 87       	std	Y+8, r19	; 0x08
     bb6:	8e 81       	ldd	r24, Y+6	; 0x06
     bb8:	9f 81       	ldd	r25, Y+7	; 0x07
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	9f 83       	std	Y+7, r25	; 0x07
     bbe:	8e 83       	std	Y+6, r24	; 0x06
     bc0:	88 85       	ldd	r24, Y+8	; 0x08
     bc2:	88 23       	and	r24, r24
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <SLIP_DecodeData+0x19e>
     bc6:	42 cf       	rjmp	.-380    	; 0xa4c <SLIP_DecodeData+0x22>
			break;
		default:
			break;
		}
	}
}
     bc8:	2e 96       	adiw	r28, 0x0e	; 14
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret

00000bda <UART_VIDint>:
uint8 Rx_Count = 0;

/*	Description: Configure the specification of the Needed UART */
Uart_cfg_t const Uart_cfg[] = { { BR_115200, DL_8, Parity_None, Stop_One } };

int UART_VIDint(void) {
     bda:	df 93       	push	r29
     bdc:	cf 93       	push	r28
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <UART_VIDint+0x6>
     be0:	0f 92       	push	r0
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinDir(pin_D0,Input);
     be6:	88 e1       	ldi	r24, 0x18	; 24
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	0e 94 b4 01 	call	0x368	; 0x368 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(pin_D1,Output);
     bee:	89 e1       	ldi	r24, 0x19	; 25
     bf0:	61 e0       	ldi	r22, 0x01	; 1
     bf2:	0e 94 b4 01 	call	0x368	; 0x368 <DIO_voidSetPinDir>
	uint8 Control_Register;

	/*	Comment:	This function used to choose the baud rate */
	uint16 BaudRate = (F_OSC / (16 * Uart_cfg[0].BaudRate)) - 1;
     bf6:	80 91 10 03 	lds	r24, 0x0310
     bfa:	90 91 11 03 	lds	r25, 0x0311
     bfe:	a0 91 12 03 	lds	r26, 0x0312
     c02:	b0 91 13 03 	lds	r27, 0x0313
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	aa 1f       	adc	r26, r26
     c0c:	bb 1f       	adc	r27, r27
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	aa 1f       	adc	r26, r26
     c14:	bb 1f       	adc	r27, r27
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	aa 1f       	adc	r26, r26
     c1c:	bb 1f       	adc	r27, r27
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	aa 1f       	adc	r26, r26
     c24:	bb 1f       	adc	r27, r27
     c26:	9c 01       	movw	r18, r24
     c28:	ad 01       	movw	r20, r26
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	94 e2       	ldi	r25, 0x24	; 36
     c2e:	a4 ef       	ldi	r26, 0xF4	; 244
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	bc 01       	movw	r22, r24
     c34:	cd 01       	movw	r24, r26
     c36:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__udivmodsi4>
     c3a:	da 01       	movw	r26, r20
     c3c:	c9 01       	movw	r24, r18
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	9a 83       	std	Y+2, r25	; 0x02
     c42:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = (uint8) (BaudRate >> 8);
     c44:	e0 e4       	ldi	r30, 0x40	; 64
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	9a 81       	ldd	r25, Y+2	; 0x02
     c4c:	89 2f       	mov	r24, r25
     c4e:	99 27       	eor	r25, r25
     c50:	80 83       	st	Z, r24
	UBRRL = (uint8) BaudRate;
     c52:	e9 e2       	ldi	r30, 0x29	; 41
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	80 83       	st	Z, r24
	if (F_OSC > 8000000) {
		UBRRL += 1; //approximation
     c5a:	a9 e2       	ldi	r26, 0x29	; 41
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e9 e2       	ldi	r30, 0x29	; 41
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	8f 5f       	subi	r24, 0xFF	; 255
     c66:	8c 93       	st	X, r24
	}
	/*	Comment:	Enable the UART Transmitter and Receiver	*/
	UCSRB = (1 << RXEN) | (1 << TXEN);
     c68:	ea e2       	ldi	r30, 0x2A	; 42
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	88 e1       	ldi	r24, 0x18	; 24
     c6e:	80 83       	st	Z, r24

	/*	Comment:	Choose the Parity bits specification	*/
	if (Uart_cfg[0].Parity == Parity_None) {
     c70:	80 91 15 03 	lds	r24, 0x0315
     c74:	88 23       	and	r24, r24
     c76:	19 f1       	breq	.+70     	; 0xcbe <UART_VIDint+0xe4>
	} else if (Uart_cfg[0].Parity == Parity_Even) {
     c78:	80 91 15 03 	lds	r24, 0x0315
     c7c:	81 30       	cpi	r24, 0x01	; 1
     c7e:	71 f4       	brne	.+28     	; 0xc9c <UART_VIDint+0xc2>
		Control_Register = UBRRH;
     c80:	e0 e4       	ldi	r30, 0x40	; 64
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	8b 83       	std	Y+3, r24	; 0x03
		Control_Register = UCSRC;
     c88:	e0 e4       	ldi	r30, 0x40	; 64
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	8b 83       	std	Y+3, r24	; 0x03
		UCSRC = (Control_Register | ((1 << UPM1)));
     c90:	e0 e4       	ldi	r30, 0x40	; 64
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	80 62       	ori	r24, 0x20	; 32
     c98:	80 83       	st	Z, r24
     c9a:	11 c0       	rjmp	.+34     	; 0xcbe <UART_VIDint+0xe4>
	} else if (Uart_cfg[0].Parity == Parity_Odd) {
     c9c:	80 91 15 03 	lds	r24, 0x0315
     ca0:	82 30       	cpi	r24, 0x02	; 2
     ca2:	69 f4       	brne	.+26     	; 0xcbe <UART_VIDint+0xe4>
		Control_Register = UBRRH;
     ca4:	e0 e4       	ldi	r30, 0x40	; 64
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	8b 83       	std	Y+3, r24	; 0x03
		Control_Register = UCSRC;
     cac:	e0 e4       	ldi	r30, 0x40	; 64
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	8b 83       	std	Y+3, r24	; 0x03
		UCSRC = Control_Register | (1 << UPM1) | (1 << UPM0);
     cb4:	e0 e4       	ldi	r30, 0x40	; 64
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	80 63       	ori	r24, 0x30	; 48
     cbc:	80 83       	st	Z, r24
	} else {
	}

	/*	Comment:	Choose 1 or 2 stop Bits	*/
	if (Uart_cfg[0].Stop == Stop_One) {
     cbe:	80 91 16 03 	lds	r24, 0x0316
     cc2:	88 23       	and	r24, r24
     cc4:	89 f0       	breq	.+34     	; 0xce8 <UART_VIDint+0x10e>
	} else if (Uart_cfg[0].Stop == Stop_Two) {
     cc6:	80 91 16 03 	lds	r24, 0x0316
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	69 f4       	brne	.+26     	; 0xce8 <UART_VIDint+0x10e>
		Control_Register = UCSRC;
     cce:	e0 e4       	ldi	r30, 0x40	; 64
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	8b 83       	std	Y+3, r24	; 0x03
		Control_Register = UCSRC;
     cd6:	e0 e4       	ldi	r30, 0x40	; 64
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	8b 83       	std	Y+3, r24	; 0x03
		UCSRC = Control_Register | (1 << URSEL) | (1 << USBS);
     cde:	e0 e4       	ldi	r30, 0x40	; 64
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	88 68       	ori	r24, 0x88	; 136
     ce6:	80 83       	st	Z, r24
	} else {
	}

	/*Comment:	Choose the lenght of Data per frame*/
	if (Uart_cfg[0].Data_Len == DL_5) {
     ce8:	80 91 14 03 	lds	r24, 0x0314
     cec:	88 23       	and	r24, r24
     cee:	79 f4       	brne	.+30     	; 0xd0e <UART_VIDint+0x134>
		Control_Register = UCSRC;
     cf0:	e0 e4       	ldi	r30, 0x40	; 64
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8b 83       	std	Y+3, r24	; 0x03
		Control_Register = UCSRC;
     cf8:	e0 e4       	ldi	r30, 0x40	; 64
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	8b 83       	std	Y+3, r24	; 0x03
		UCSRC = (Control_Register | (1 << URSEL)) & (~(1 << UCSZ0))
     d00:	e0 e4       	ldi	r30, 0x40	; 64
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	89 77       	andi	r24, 0x79	; 121
     d08:	80 68       	ori	r24, 0x80	; 128
     d0a:	80 83       	st	Z, r24
     d0c:	41 c0       	rjmp	.+130    	; 0xd90 <UART_VIDint+0x1b6>
				& (~(1 << UCSZ1));
	} else if (Uart_cfg[0].Data_Len == DL_6) {
     d0e:	80 91 14 03 	lds	r24, 0x0314
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	79 f4       	brne	.+30     	; 0xd34 <UART_VIDint+0x15a>
		Control_Register = UCSRC;
     d16:	e0 e4       	ldi	r30, 0x40	; 64
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	8b 83       	std	Y+3, r24	; 0x03
		Control_Register = UCSRC;
     d1e:	e0 e4       	ldi	r30, 0x40	; 64
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8b 83       	std	Y+3, r24	; 0x03
		UCSRC = ((Control_Register | (1 << URSEL) | (1 << UCSZ0))
     d26:	e0 e4       	ldi	r30, 0x40	; 64
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	89 77       	andi	r24, 0x79	; 121
     d2e:	82 68       	ori	r24, 0x82	; 130
     d30:	80 83       	st	Z, r24
     d32:	2e c0       	rjmp	.+92     	; 0xd90 <UART_VIDint+0x1b6>
				& (~(1 << UCSZ1)));
	} else if (Uart_cfg[0].Data_Len == DL_7) {
     d34:	80 91 14 03 	lds	r24, 0x0314
     d38:	82 30       	cpi	r24, 0x02	; 2
     d3a:	71 f4       	brne	.+28     	; 0xd58 <UART_VIDint+0x17e>
		Control_Register = UCSRC;
     d3c:	e0 e4       	ldi	r30, 0x40	; 64
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	8b 83       	std	Y+3, r24	; 0x03
		Control_Register = UCSRC;
     d44:	e0 e4       	ldi	r30, 0x40	; 64
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	8b 83       	std	Y+3, r24	; 0x03
		UCSRC = Control_Register | (1 << URSEL) | (2 << UCSZ0);
     d4c:	e0 e4       	ldi	r30, 0x40	; 64
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	84 68       	ori	r24, 0x84	; 132
     d54:	80 83       	st	Z, r24
     d56:	1c c0       	rjmp	.+56     	; 0xd90 <UART_VIDint+0x1b6>
	} else if (Uart_cfg[0].Data_Len == DL_8) {
     d58:	80 91 14 03 	lds	r24, 0x0314
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	c1 f0       	breq	.+48     	; 0xd90 <UART_VIDint+0x1b6>

	} else if (Uart_cfg[0].Data_Len == DL_9) {
     d60:	80 91 14 03 	lds	r24, 0x0314
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	a1 f4       	brne	.+40     	; 0xd90 <UART_VIDint+0x1b6>
		Control_Register = UCSRC;
     d68:	e0 e4       	ldi	r30, 0x40	; 64
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	8b 83       	std	Y+3, r24	; 0x03
		Control_Register = UCSRC;
     d70:	e0 e4       	ldi	r30, 0x40	; 64
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	8b 83       	std	Y+3, r24	; 0x03
		UCSRC = Control_Register | (1 << URSEL) | (3 << UCSZ0);
     d78:	e0 e4       	ldi	r30, 0x40	; 64
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	86 68       	ori	r24, 0x86	; 134
     d80:	80 83       	st	Z, r24
		UCSRB |= (1 << UCSZ2);
     d82:	aa e2       	ldi	r26, 0x2A	; 42
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	ea e2       	ldi	r30, 0x2A	; 42
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	84 60       	ori	r24, 0x04	; 4
     d8e:	8c 93       	st	X, r24
	} else {
	}

	UCSRB |= (1 << RXCIE); //RX completion interrupt enable
     d90:	aa e2       	ldi	r26, 0x2A	; 42
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	ea e2       	ldi	r30, 0x2A	; 42
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	80 68       	ori	r24, 0x80	; 128
     d9c:	8c 93       	st	X, r24
	SETBIT(SREG, 7); //global interrupt enable
     d9e:	af e5       	ldi	r26, 0x5F	; 95
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	ef e5       	ldi	r30, 0x5F	; 95
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	80 68       	ori	r24, 0x80	; 128
     daa:	8c 93       	st	X, r24

	return 1;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
}
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <UART_send_char>:

void UART_send_char(uint8 data) {
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	0f 92       	push	r0
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	89 83       	std	Y+1, r24	; 0x01

	while (GETBIT(UCSRA,5) == 0)
     dc8:	eb e2       	ldi	r30, 0x2B	; 43
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	82 95       	swap	r24
     dd0:	86 95       	lsr	r24
     dd2:	87 70       	andi	r24, 0x07	; 7
     dd4:	88 2f       	mov	r24, r24
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	81 70       	andi	r24, 0x01	; 1
     dda:	90 70       	andi	r25, 0x00	; 0
     ddc:	00 97       	sbiw	r24, 0x00	; 0
     dde:	a1 f3       	breq	.-24     	; 0xdc8 <UART_send_char+0xc>
		;
	UDR = data;
     de0:	ec e2       	ldi	r30, 0x2C	; 44
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	80 83       	st	Z, r24

}
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <UART_U8recievechar>:

uint8 UART_U8recievechar(void) {
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62

	while (GETBIT(UCSRA,7) == 0)
     df8:	eb e2       	ldi	r30, 0x2B	; 43
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	88 23       	and	r24, r24
     e00:	dc f7       	brge	.-10     	; 0xdf8 <UART_U8recievechar+0x8>
		;
	return UDR;
     e02:	ec e2       	ldi	r30, 0x2C	; 44
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z

}
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <UART_send_string>:

void UART_send_string(char* arr) {
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	00 d0       	rcall	.+0      	; 0xe18 <UART_send_string+0xa>
     e18:	00 d0       	rcall	.+0      	; 0xe1a <UART_send_string+0xc>
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	9c 83       	std	Y+4, r25	; 0x04
     e20:	8b 83       	std	Y+3, r24	; 0x03
	for (int x = 0; x < strlen(arr); x++) {
     e22:	1a 82       	std	Y+2, r1	; 0x02
     e24:	19 82       	std	Y+1, r1	; 0x01
     e26:	0f c0       	rjmp	.+30     	; 0xe46 <UART_send_string+0x38>
		UART_send_char(arr[x]);
     e28:	29 81       	ldd	r18, Y+1	; 0x01
     e2a:	3a 81       	ldd	r19, Y+2	; 0x02
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	9c 81       	ldd	r25, Y+4	; 0x04
     e30:	fc 01       	movw	r30, r24
     e32:	e2 0f       	add	r30, r18
     e34:	f3 1f       	adc	r31, r19
     e36:	80 81       	ld	r24, Z
     e38:	0e 94 de 06 	call	0xdbc	; 0xdbc <UART_send_char>
	return UDR;

}

void UART_send_string(char* arr) {
	for (int x = 0; x < strlen(arr); x++) {
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	9a 83       	std	Y+2, r25	; 0x02
     e44:	89 83       	std	Y+1, r24	; 0x01
     e46:	09 81       	ldd	r16, Y+1	; 0x01
     e48:	1a 81       	ldd	r17, Y+2	; 0x02
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	9c 81       	ldd	r25, Y+4	; 0x04
     e4e:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <strlen>
     e52:	08 17       	cp	r16, r24
     e54:	19 07       	cpc	r17, r25
     e56:	40 f3       	brcs	.-48     	; 0xe28 <UART_send_string+0x1a>
		UART_send_char(arr[x]);
	}

}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	08 95       	ret

00000e6a <Uart_Transmit>:

int Uart_Transmit(uint8* Data, uint8 Len) {
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <Uart_Transmit+0x6>
     e70:	00 d0       	rcall	.+0      	; 0xe72 <Uart_Transmit+0x8>
     e72:	0f 92       	push	r0
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	9c 83       	std	Y+4, r25	; 0x04
     e7a:	8b 83       	std	Y+3, r24	; 0x03
     e7c:	6d 83       	std	Y+5, r22	; 0x05
	uint16 index;
	for (index = 0; index < Len; index++) {
     e7e:	1a 82       	std	Y+2, r1	; 0x02
     e80:	19 82       	std	Y+1, r1	; 0x01
     e82:	19 c0       	rjmp	.+50     	; 0xeb6 <Uart_Transmit+0x4c>
		while (!(UCSRA & (1 << UDRE)))
     e84:	eb e2       	ldi	r30, 0x2B	; 43
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	88 2f       	mov	r24, r24
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	80 72       	andi	r24, 0x20	; 32
     e90:	90 70       	andi	r25, 0x00	; 0
     e92:	00 97       	sbiw	r24, 0x00	; 0
     e94:	b9 f3       	breq	.-18     	; 0xe84 <Uart_Transmit+0x1a>
			;
		UDR = Data[index];
     e96:	ac e2       	ldi	r26, 0x2C	; 44
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	2b 81       	ldd	r18, Y+3	; 0x03
     e9c:	3c 81       	ldd	r19, Y+4	; 0x04
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	9a 81       	ldd	r25, Y+2	; 0x02
     ea2:	f9 01       	movw	r30, r18
     ea4:	e8 0f       	add	r30, r24
     ea6:	f9 1f       	adc	r31, r25
     ea8:	80 81       	ld	r24, Z
     eaa:	8c 93       	st	X, r24

}

int Uart_Transmit(uint8* Data, uint8 Len) {
	uint16 index;
	for (index = 0; index < Len; index++) {
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	8d 81       	ldd	r24, Y+5	; 0x05
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	9a 81       	ldd	r25, Y+2	; 0x02
     ec0:	82 17       	cp	r24, r18
     ec2:	93 07       	cpc	r25, r19
     ec4:	f8 f2       	brcs	.-66     	; 0xe84 <Uart_Transmit+0x1a>
		while (!(UCSRA & (1 << UDRE)))
			;
		UDR = Data[index];
	}
	return 1;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0

}
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <UART_recieve_string>:

void UART_recieve_string(void) {
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <UART_recieve_string+0x6>
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <UART_recieve_string+0x8>
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62

	int x, i = 0;
     ee6:	1a 82       	std	Y+2, r1	; 0x02
     ee8:	19 82       	std	Y+1, r1	; 0x01
     eea:	0c c0       	rjmp	.+24     	; 0xf04 <UART_recieve_string+0x2a>

	//receive the characters until ENTER is pressed (ASCII for ENTER = 13)
	while (((x = UART_U8recievechar()) != ('\n'))
			|| ((x = UART_U8recievechar()) != ('\r'))) {
		//and store the received characters into the array string[] one-by-one
		string[i++] = x;
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	9a 81       	ldd	r25, Y+2	; 0x02
     ef0:	2b 81       	ldd	r18, Y+3	; 0x03
     ef2:	fc 01       	movw	r30, r24
     ef4:	e5 55       	subi	r30, 0x55	; 85
     ef6:	fa 4f       	sbci	r31, 0xFA	; 250
     ef8:	20 83       	st	Z, r18
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	9a 81       	ldd	r25, Y+2	; 0x02
     efe:	01 96       	adiw	r24, 0x01	; 1
     f00:	9a 83       	std	Y+2, r25	; 0x02
     f02:	89 83       	std	Y+1, r24	; 0x01
void UART_recieve_string(void) {

	int x, i = 0;

	//receive the characters until ENTER is pressed (ASCII for ENTER = 13)
	while (((x = UART_U8recievechar()) != ('\n'))
     f04:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <UART_U8recievechar>
     f08:	88 2f       	mov	r24, r24
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	9c 83       	std	Y+4, r25	; 0x04
     f0e:	8b 83       	std	Y+3, r24	; 0x03
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	9c 81       	ldd	r25, Y+4	; 0x04
     f14:	8a 30       	cpi	r24, 0x0A	; 10
     f16:	91 05       	cpc	r25, r1
     f18:	49 f7       	brne	.-46     	; 0xeec <UART_recieve_string+0x12>
     f1a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <UART_U8recievechar>
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	9c 83       	std	Y+4, r25	; 0x04
     f24:	8b 83       	std	Y+3, r24	; 0x03
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	9c 81       	ldd	r25, Y+4	; 0x04
     f2a:	8d 30       	cpi	r24, 0x0D	; 13
     f2c:	91 05       	cpc	r25, r1
     f2e:	f1 f6       	brne	.-68     	; 0xeec <UART_recieve_string+0x12>
		//and store the received characters into the array string[] one-by-one
		string[i++] = x;
	}

	//insert NULL to terminate the string
	string[i] = 10;
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	9a 81       	ldd	r25, Y+2	; 0x02
     f34:	fc 01       	movw	r30, r24
     f36:	e5 55       	subi	r30, 0x55	; 85
     f38:	fa 4f       	sbci	r31, 0xFA	; 250
     f3a:	8a e0       	ldi	r24, 0x0A	; 10
     f3c:	80 83       	st	Z, r24

}
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <Uart_Receive_with_recieve_interrupt>:

void Uart_Receive_with_recieve_interrupt(uint8* Data, uint8 Len) {
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	00 d0       	rcall	.+0      	; 0xf52 <Uart_Receive_with_recieve_interrupt+0x6>
     f52:	00 d0       	rcall	.+0      	; 0xf54 <Uart_Receive_with_recieve_interrupt+0x8>
     f54:	0f 92       	push	r0
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	9c 83       	std	Y+4, r25	; 0x04
     f5c:	8b 83       	std	Y+3, r24	; 0x03
     f5e:	6d 83       	std	Y+5, r22	; 0x05
	UCSRB &= ~(1 << RXCIE);
     f60:	aa e2       	ldi	r26, 0x2A	; 42
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	ea e2       	ldi	r30, 0x2A	; 42
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	8f 77       	andi	r24, 0x7F	; 127
     f6c:	8c 93       	st	X, r24
	uint16 i;
	if (Rx_Count != 0) {
     f6e:	80 91 28 03 	lds	r24, 0x0328
     f72:	88 23       	and	r24, r24
     f74:	09 f1       	breq	.+66     	; 0xfb8 <Uart_Receive_with_recieve_interrupt+0x6c>
		for (i = 0; i < Len; i++) {
     f76:	1a 82       	std	Y+2, r1	; 0x02
     f78:	19 82       	std	Y+1, r1	; 0x01
     f7a:	13 c0       	rjmp	.+38     	; 0xfa2 <Uart_Receive_with_recieve_interrupt+0x56>
			Data[i] = Rx_Data[i];
     f7c:	2b 81       	ldd	r18, Y+3	; 0x03
     f7e:	3c 81       	ldd	r19, Y+4	; 0x04
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	9a 81       	ldd	r25, Y+2	; 0x02
     f84:	d9 01       	movw	r26, r18
     f86:	a8 0f       	add	r26, r24
     f88:	b9 1f       	adc	r27, r25
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	9a 81       	ldd	r25, Y+2	; 0x02
     f8e:	fc 01       	movw	r30, r24
     f90:	e7 5d       	subi	r30, 0xD7	; 215
     f92:	fc 4f       	sbci	r31, 0xFC	; 252
     f94:	80 81       	ld	r24, Z
     f96:	8c 93       	st	X, r24

void Uart_Receive_with_recieve_interrupt(uint8* Data, uint8 Len) {
	UCSRB &= ~(1 << RXCIE);
	uint16 i;
	if (Rx_Count != 0) {
		for (i = 0; i < Len; i++) {
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	9a 81       	ldd	r25, Y+2	; 0x02
     f9c:	01 96       	adiw	r24, 0x01	; 1
     f9e:	9a 83       	std	Y+2, r25	; 0x02
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	8d 81       	ldd	r24, Y+5	; 0x05
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	82 17       	cp	r24, r18
     fae:	93 07       	cpc	r25, r19
     fb0:	28 f3       	brcs	.-54     	; 0xf7c <Uart_Receive_with_recieve_interrupt+0x30>
			Data[i] = Rx_Data[i];
		}
		Rx_Count = 0;
     fb2:	10 92 28 03 	sts	0x0328, r1
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <Uart_Receive_with_recieve_interrupt+0x70>
	} else {
		Rx_Count = 0;
     fb8:	10 92 28 03 	sts	0x0328, r1
	}
	UCSRB |= (1 << RXCIE);
     fbc:	aa e2       	ldi	r26, 0x2A	; 42
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	ea e2       	ldi	r30, 0x2A	; 42
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	80 68       	ori	r24, 0x80	; 128
     fc8:	8c 93       	st	X, r24
}
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <Uart_Receive_with_NO_recieve_interrupt>:

void Uart_Receive_with_NO_recieve_interrupt(uint8* Data, uint8 len) {
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <Uart_Receive_with_NO_recieve_interrupt+0xa>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <Uart_Receive_with_NO_recieve_interrupt+0xc>
     fe6:	0f 92       	push	r0
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	9c 83       	std	Y+4, r25	; 0x04
     fee:	8b 83       	std	Y+3, r24	; 0x03
     ff0:	6d 83       	std	Y+5, r22	; 0x05
	for (int x = 0; x < len; x++) {
     ff2:	1a 82       	std	Y+2, r1	; 0x02
     ff4:	19 82       	std	Y+1, r1	; 0x01
     ff6:	10 c0       	rjmp	.+32     	; 0x1018 <Uart_Receive_with_NO_recieve_interrupt+0x3e>
		(Data[x]) = UART_U8recievechar();
     ff8:	29 81       	ldd	r18, Y+1	; 0x01
     ffa:	3a 81       	ldd	r19, Y+2	; 0x02
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    1000:	8c 01       	movw	r16, r24
    1002:	02 0f       	add	r16, r18
    1004:	13 1f       	adc	r17, r19
    1006:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <UART_U8recievechar>
    100a:	f8 01       	movw	r30, r16
    100c:	80 83       	st	Z, r24
	}
	UCSRB |= (1 << RXCIE);
}

void Uart_Receive_with_NO_recieve_interrupt(uint8* Data, uint8 len) {
	for (int x = 0; x < len; x++) {
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	9a 81       	ldd	r25, Y+2	; 0x02
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	9a 83       	std	Y+2, r25	; 0x02
    1016:	89 83       	std	Y+1, r24	; 0x01
    1018:	8d 81       	ldd	r24, Y+5	; 0x05
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	9a 81       	ldd	r25, Y+2	; 0x02
    1022:	82 17       	cp	r24, r18
    1024:	93 07       	cpc	r25, r19
    1026:	44 f3       	brlt	.-48     	; 0xff8 <Uart_Receive_with_NO_recieve_interrupt+0x1e>
		(Data[x]) = UART_U8recievechar();
	}
}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	08 95       	ret

0000103c <__vector_13>:

void __vector_13(void) __attribute__((signal,used));
void __vector_13(void) {
    103c:	1f 92       	push	r1
    103e:	0f 92       	push	r0
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	0f 92       	push	r0
    1044:	11 24       	eor	r1, r1
    1046:	2f 93       	push	r18
    1048:	8f 93       	push	r24
    104a:	9f 93       	push	r25
    104c:	ef 93       	push	r30
    104e:	ff 93       	push	r31
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
	Rx_Data[Rx_Count] = UDR;
    1058:	80 91 28 03 	lds	r24, 0x0328
    105c:	88 2f       	mov	r24, r24
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	ec e2       	ldi	r30, 0x2C	; 44
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	20 81       	ld	r18, Z
    1066:	fc 01       	movw	r30, r24
    1068:	e7 5d       	subi	r30, 0xD7	; 215
    106a:	fc 4f       	sbci	r31, 0xFC	; 252
    106c:	20 83       	st	Z, r18
	Rx_Count++;
    106e:	80 91 28 03 	lds	r24, 0x0328
    1072:	8f 5f       	subi	r24, 0xFF	; 255
    1074:	80 93 28 03 	sts	0x0328, r24
	if(Rx_Count>20)
    1078:	80 91 28 03 	lds	r24, 0x0328
    107c:	85 31       	cpi	r24, 0x15	; 21
    107e:	10 f0       	brcs	.+4      	; 0x1084 <__vector_13+0x48>
	{
		Rx_Count=0;
    1080:	10 92 28 03 	sts	0x0328, r1
	}
}
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	ff 91       	pop	r31
    108a:	ef 91       	pop	r30
    108c:	9f 91       	pop	r25
    108e:	8f 91       	pop	r24
    1090:	2f 91       	pop	r18
    1092:	0f 90       	pop	r0
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	0f 90       	pop	r0
    1098:	1f 90       	pop	r1
    109a:	18 95       	reti

0000109c <WiMOD_HCI_Init>:
//
//------------------------------------------------------------------------------
bool WiMOD_HCI_Init(
		TWiMOD_HCI_CbRxMessage cbRxMessage, // HCI msg receiver callback
		TWiMOD_HCI_Message* rxMessage) // intial rxMessage
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <WiMOD_HCI_Init+0x6>
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <WiMOD_HCI_Init+0x8>
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	9a 83       	std	Y+2, r25	; 0x02
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	7c 83       	std	Y+4, r23	; 0x04
    10ae:	6b 83       	std	Y+3, r22	; 0x03
// init error counter
	HCI.CRCErrors = 0;
    10b0:	10 92 3d 03 	sts	0x033D, r1
    10b4:	10 92 3e 03 	sts	0x033E, r1
    10b8:	10 92 3f 03 	sts	0x033F, r1
    10bc:	10 92 40 03 	sts	0x0340, r1
// save receiver callback
	HCI.CbRxMessage = cbRxMessage;
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	9a 81       	ldd	r25, Y+2	; 0x02
    10c4:	90 93 44 03 	sts	0x0344, r25
    10c8:	80 93 43 03 	sts	0x0343, r24
// save RxMessage
	HCI.RxMessage = rxMessage;
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	9c 81       	ldd	r25, Y+4	; 0x04
    10d0:	90 93 42 03 	sts	0x0342, r25
    10d4:	80 93 41 03 	sts	0x0341, r24
// init SLIP
	SLIP_Init(WiMOD_HCI_ProcessRxMessage);
    10d8:	86 e4       	ldi	r24, 0x46	; 70
    10da:	99 e0       	ldi	r25, 0x09	; 9
    10dc:	0e 94 da 03 	call	0x7b4	; 0x7b4 <SLIP_Init>
// init first RxBuffer to SAP_ID of HCI message, size without 16-Bit Length Field
	SLIP_SetRxBuffer(&rxMessage->SapID,
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	02 96       	adiw	r24, 0x02	; 2
    10e6:	60 e3       	ldi	r22, 0x30	; 48
    10e8:	71 e0       	ldi	r23, 0x01	; 1
    10ea:	0e 94 b6 04 	call	0x96c	; 0x96c <SLIP_SetRxBuffer>
			sizeof(TWiMOD_HCI_Message) - sizeof(uint16));
// init serial device
	DIO_voidSetPinDir(pin_D0,Input);
    10ee:	88 e1       	ldi	r24, 0x18	; 24
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	0e 94 b4 01 	call	0x368	; 0x368 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(pin_D1,Output);
    10f6:	89 e1       	ldi	r24, 0x19	; 25
    10f8:	61 e0       	ldi	r22, 0x01	; 1
    10fa:	0e 94 b4 01 	call	0x368	; 0x368 <DIO_voidSetPinDir>
	return UART_VIDint();
    10fe:	0e 94 ed 05 	call	0xbda	; 0xbda <UART_VIDint>
}
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <WiMOD_HCI_SendMessage>:
// SendMessage
//
// @brief: Send a HCI message (with or without payload)
//
//------------------------------------------------------------------------------
int WiMOD_HCI_SendMessage(TWiMOD_HCI_Message* txMessage) {
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	2a 97       	sbiw	r28, 0x0a	; 10
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	98 87       	std	Y+8, r25	; 0x08
    1126:	8f 83       	std	Y+7, r24	; 0x07
// 1. check parameter
//
// 1.1 check ptr
//
	if (!txMessage) {
    1128:	8f 81       	ldd	r24, Y+7	; 0x07
    112a:	98 85       	ldd	r25, Y+8	; 0x08
    112c:	00 97       	sbiw	r24, 0x00	; 0
    112e:	29 f4       	brne	.+10     	; 0x113a <WiMOD_HCI_SendMessage+0x2a>
		// error
		return -1;
    1130:	8f ef       	ldi	r24, 0xFF	; 255
    1132:	9f ef       	ldi	r25, 0xFF	; 255
    1134:	9a 87       	std	Y+10, r25	; 0x0a
    1136:	89 87       	std	Y+9, r24	; 0x09
    1138:	73 c0       	rjmp	.+230    	; 0x1220 <WiMOD_HCI_SendMessage+0x110>
	}
	// 2. Calculate CRC16 over header and optional payload
	//
	uint16 crc16 = CRC16_Calc(&txMessage->SapID,
			txMessage->Length + WIMOD_HCI_MSG_HEADER_SIZE,
			CRC16_INIT_VALUE);
    113a:	8f 81       	ldd	r24, Y+7	; 0x07
    113c:	98 85       	ldd	r25, Y+8	; 0x08
    113e:	ac 01       	movw	r20, r24
    1140:	4e 5f       	subi	r20, 0xFE	; 254
    1142:	5f 4f       	sbci	r21, 0xFF	; 255
    1144:	ef 81       	ldd	r30, Y+7	; 0x07
    1146:	f8 85       	ldd	r31, Y+8	; 0x08
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	9c 01       	movw	r18, r24
    114e:	2e 5f       	subi	r18, 0xFE	; 254
    1150:	3f 4f       	sbci	r19, 0xFF	; 255
    1152:	ca 01       	movw	r24, r20
    1154:	b9 01       	movw	r22, r18
    1156:	4f ef       	ldi	r20, 0xFF	; 255
    1158:	5f ef       	ldi	r21, 0xFF	; 255
    115a:	0e 94 49 00 	call	0x92	; 0x92 <CRC16_Calc>
    115e:	9e 83       	std	Y+6, r25	; 0x06
    1160:	8d 83       	std	Y+5, r24	; 0x05
	// 2.1 get 1's complement !!!
	//
	crc16 = ~crc16;
    1162:	8d 81       	ldd	r24, Y+5	; 0x05
    1164:	9e 81       	ldd	r25, Y+6	; 0x06
    1166:	80 95       	com	r24
    1168:	90 95       	com	r25
    116a:	9e 83       	std	Y+6, r25	; 0x06
    116c:	8d 83       	std	Y+5, r24	; 0x05
	// 2.2 attach CRC16 and correct length, LSB first
	//
	txMessage->Payload[txMessage->Length] = LOBYTE(crc16);
    116e:	ef 81       	ldd	r30, Y+7	; 0x07
    1170:	f8 85       	ldd	r31, Y+8	; 0x08
    1172:	20 81       	ld	r18, Z
    1174:	31 81       	ldd	r19, Z+1	; 0x01
    1176:	4d 81       	ldd	r20, Y+5	; 0x05
    1178:	8f 81       	ldd	r24, Y+7	; 0x07
    117a:	98 85       	ldd	r25, Y+8	; 0x08
    117c:	82 0f       	add	r24, r18
    117e:	93 1f       	adc	r25, r19
    1180:	fc 01       	movw	r30, r24
    1182:	34 96       	adiw	r30, 0x04	; 4
    1184:	40 83       	st	Z, r20
	txMessage->Payload[txMessage->Length + 1] = HIBYTE(crc16);
    1186:	ef 81       	ldd	r30, Y+7	; 0x07
    1188:	f8 85       	ldd	r31, Y+8	; 0x08
    118a:	80 81       	ld	r24, Z
    118c:	91 81       	ldd	r25, Z+1	; 0x01
    118e:	9c 01       	movw	r18, r24
    1190:	2f 5f       	subi	r18, 0xFF	; 255
    1192:	3f 4f       	sbci	r19, 0xFF	; 255
    1194:	8d 81       	ldd	r24, Y+5	; 0x05
    1196:	9e 81       	ldd	r25, Y+6	; 0x06
    1198:	89 2f       	mov	r24, r25
    119a:	99 27       	eor	r25, r25
    119c:	48 2f       	mov	r20, r24
    119e:	8f 81       	ldd	r24, Y+7	; 0x07
    11a0:	98 85       	ldd	r25, Y+8	; 0x08
    11a2:	82 0f       	add	r24, r18
    11a4:	93 1f       	adc	r25, r19
    11a6:	fc 01       	movw	r30, r24
    11a8:	34 96       	adiw	r30, 0x04	; 4
    11aa:	40 83       	st	Z, r20
	// - start transmission with SAP ID
	// - correct length by header size
	int txLength = SLIP_EncodeData(TxBuffer, sizeof(TxBuffer),
			&txMessage->SapID,
			txMessage->Length + WIMOD_HCI_MSG_HEADER_SIZE
					+ WIMOD_HCI_MSG_FCS_SIZE);
    11ac:	8f 81       	ldd	r24, Y+7	; 0x07
    11ae:	98 85       	ldd	r25, Y+8	; 0x08
    11b0:	ac 01       	movw	r20, r24
    11b2:	4e 5f       	subi	r20, 0xFE	; 254
    11b4:	5f 4f       	sbci	r21, 0xFF	; 255
    11b6:	ef 81       	ldd	r30, Y+7	; 0x07
    11b8:	f8 85       	ldd	r31, Y+8	; 0x08
    11ba:	80 81       	ld	r24, Z
    11bc:	91 81       	ldd	r25, Z+1	; 0x01
    11be:	04 96       	adiw	r24, 0x04	; 4
    11c0:	9c 01       	movw	r18, r24
    11c2:	85 e4       	ldi	r24, 0x45	; 69
    11c4:	93 e0       	ldi	r25, 0x03	; 3
    11c6:	66 e6       	ldi	r22, 0x66	; 102
    11c8:	72 e0       	ldi	r23, 0x02	; 2
    11ca:	0e 94 31 04 	call	0x862	; 0x862 <SLIP_EncodeData>
    11ce:	9c 83       	std	Y+4, r25	; 0x04
    11d0:	8b 83       	std	Y+3, r24	; 0x03
	// message ok ?
	if (txLength > 0) {
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	18 16       	cp	r1, r24
    11d8:	19 06       	cpc	r1, r25
    11da:	f4 f4       	brge	.+60     	; 0x1218 <WiMOD_HCI_SendMessage+0x108>

        // send wakeup chars
        for(int i= 0; i < 40; i++){
    11dc:	1a 82       	std	Y+2, r1	; 0x02
    11de:	19 82       	std	Y+1, r1	; 0x01
    11e0:	08 c0       	rjmp	.+16     	; 0x11f2 <WiMOD_HCI_SendMessage+0xe2>
        	UART_send_char(SLIP_END);
    11e2:	80 ec       	ldi	r24, 0xC0	; 192
    11e4:	0e 94 de 06 	call	0xdbc	; 0xdbc <UART_send_char>
					+ WIMOD_HCI_MSG_FCS_SIZE);
	// message ok ?
	if (txLength > 0) {

        // send wakeup chars
        for(int i= 0; i < 40; i++){
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	9a 81       	ldd	r25, Y+2	; 0x02
    11f6:	88 32       	cpi	r24, 0x28	; 40
    11f8:	91 05       	cpc	r25, r1
    11fa:	9c f3       	brlt	.-26     	; 0x11e2 <WiMOD_HCI_SendMessage+0xd2>
        	UART_send_char(SLIP_END);
        }

		// 4. send octet sequence over serial device
		if (Uart_Transmit(TxBuffer, txLength) > 0) {
    11fc:	2b 81       	ldd	r18, Y+3	; 0x03
    11fe:	85 e4       	ldi	r24, 0x45	; 69
    1200:	93 e0       	ldi	r25, 0x03	; 3
    1202:	62 2f       	mov	r22, r18
    1204:	0e 94 35 07 	call	0xe6a	; 0xe6a <Uart_Transmit>
    1208:	18 16       	cp	r1, r24
    120a:	19 06       	cpc	r1, r25
    120c:	2c f4       	brge	.+10     	; 0x1218 <WiMOD_HCI_SendMessage+0x108>
			// return ok
			return 1;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	9a 87       	std	Y+10, r25	; 0x0a
    1214:	89 87       	std	Y+9, r24	; 0x09
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <WiMOD_HCI_SendMessage+0x110>
		}
	}
	// error - SLIP layer couldn't encode message - buffer to small ?
	return -1;
    1218:	8f ef       	ldi	r24, 0xFF	; 255
    121a:	9f ef       	ldi	r25, 0xFF	; 255
    121c:	9a 87       	std	Y+10, r25	; 0x0a
    121e:	89 87       	std	Y+9, r24	; 0x09
    1220:	89 85       	ldd	r24, Y+9	; 0x09
    1222:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    1224:	2a 96       	adiw	r28, 0x0a	; 10
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	08 95       	ret

00001236 <WiMOD_HCI_Process>:
// Process
//
// @brief: read incoming serial data
//
//------------------------------------------------------------------------------
void WiMOD_HCI_Process() {
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	66 97       	sbiw	r28, 0x16	; 22
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	cd bf       	out	0x3d, r28	; 61
	uint8 rxBuf[20];
	// read small chunk of data
	int rxLength = Rx_Count;
    124a:	80 91 28 03 	lds	r24, 0x0328
    124e:	88 2f       	mov	r24, r24
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	9a 83       	std	Y+2, r25	; 0x02
    1254:	89 83       	std	Y+1, r24	; 0x01
	Uart_Receive_with_recieve_interrupt(rxBuf, rxLength);
    1256:	29 81       	ldd	r18, Y+1	; 0x01
    1258:	ce 01       	movw	r24, r28
    125a:	03 96       	adiw	r24, 0x03	; 3
    125c:	62 2f       	mov	r22, r18
    125e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <Uart_Receive_with_recieve_interrupt>
	// data available ?
	if (rxLength > 0) {
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	9a 81       	ldd	r25, Y+2	; 0x02
    1266:	18 16       	cp	r1, r24
    1268:	19 06       	cpc	r1, r25
    126a:	3c f4       	brge	.+14     	; 0x127a <WiMOD_HCI_Process+0x44>
		// yes, forward to SLIP decoder, decoded SLIP message will be passed to
		// function "WiMOD_HCI_ProcessRxMessage"
		SLIP_DecodeData(rxBuf, rxLength);
    126c:	ce 01       	movw	r24, r28
    126e:	03 96       	adiw	r24, 0x03	; 3
    1270:	29 81       	ldd	r18, Y+1	; 0x01
    1272:	3a 81       	ldd	r19, Y+2	; 0x02
    1274:	b9 01       	movw	r22, r18
    1276:	0e 94 15 05 	call	0xa2a	; 0xa2a <SLIP_DecodeData>
	}
}
    127a:	66 96       	adiw	r28, 0x16	; 22
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <WiMOD_HCI_ProcessRxMessage>:
//
// @brief: process received SLIP message and return new rxBuffer
//
//------------------------------------------------------------------------------
static uint8*
WiMOD_HCI_ProcessRxMessage(uint8* rxData, int rxLength) {
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	00 d0       	rcall	.+0      	; 0x1292 <WiMOD_HCI_ProcessRxMessage+0x6>
    1292:	00 d0       	rcall	.+0      	; 0x1294 <WiMOD_HCI_ProcessRxMessage+0x8>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <WiMOD_HCI_ProcessRxMessage+0xa>
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	9a 83       	std	Y+2, r25	; 0x02
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	7c 83       	std	Y+4, r23	; 0x04
    12a0:	6b 83       	std	Y+3, r22	; 0x03
	// check min length
	if (rxLength >= (WIMOD_HCI_MSG_HEADER_SIZE + WIMOD_HCI_MSG_FCS_SIZE)) {
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	84 30       	cpi	r24, 0x04	; 4
    12a8:	91 05       	cpc	r25, r1
    12aa:	dc f1       	brlt	.+118    	; 0x1322 <WiMOD_HCI_ProcessRxMessage+0x96>
		if (CRC16_Check(rxData, rxLength, CRC16_INIT_VALUE)) {
    12ac:	2b 81       	ldd	r18, Y+3	; 0x03
    12ae:	3c 81       	ldd	r19, Y+4	; 0x04
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	b9 01       	movw	r22, r18
    12b6:	4f ef       	ldi	r20, 0xFF	; 255
    12b8:	5f ef       	ldi	r21, 0xFF	; 255
    12ba:	0e 94 96 00 	call	0x12c	; 0x12c <CRC16_Check>
    12be:	88 23       	and	r24, r24
    12c0:	e9 f0       	breq	.+58     	; 0x12fc <WiMOD_HCI_ProcessRxMessage+0x70>
			// receiver registered ?
			if (HCI.CbRxMessage) {
    12c2:	80 91 43 03 	lds	r24, 0x0343
    12c6:	90 91 44 03 	lds	r25, 0x0344
    12ca:	00 97       	sbiw	r24, 0x00	; 0
    12cc:	51 f1       	breq	.+84     	; 0x1322 <WiMOD_HCI_ProcessRxMessage+0x96>
				// yes, complete message info
				HCI.RxMessage->Length = rxLength
    12ce:	e0 91 41 03 	lds	r30, 0x0341
    12d2:	f0 91 42 03 	lds	r31, 0x0342
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	04 97       	sbiw	r24, 0x04	; 4
    12dc:	91 83       	std	Z+1, r25	; 0x01
    12de:	80 83       	st	Z, r24
						- (WIMOD_HCI_MSG_HEADER_SIZE + WIMOD_HCI_MSG_FCS_SIZE);
				// call upper layer receiver and save new RxMessage
				HCI.RxMessage = (*HCI.CbRxMessage)(HCI.RxMessage);
    12e0:	e0 91 43 03 	lds	r30, 0x0343
    12e4:	f0 91 44 03 	lds	r31, 0x0344
    12e8:	80 91 41 03 	lds	r24, 0x0341
    12ec:	90 91 42 03 	lds	r25, 0x0342
    12f0:	09 95       	icall
    12f2:	90 93 42 03 	sts	0x0342, r25
    12f6:	80 93 41 03 	sts	0x0341, r24
    12fa:	13 c0       	rjmp	.+38     	; 0x1322 <WiMOD_HCI_ProcessRxMessage+0x96>
			}
		} else {
			HCI.CRCErrors++;
    12fc:	80 91 3d 03 	lds	r24, 0x033D
    1300:	90 91 3e 03 	lds	r25, 0x033E
    1304:	a0 91 3f 03 	lds	r26, 0x033F
    1308:	b0 91 40 03 	lds	r27, 0x0340
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	a1 1d       	adc	r26, r1
    1310:	b1 1d       	adc	r27, r1
    1312:	80 93 3d 03 	sts	0x033D, r24
    1316:	90 93 3e 03 	sts	0x033E, r25
    131a:	a0 93 3f 03 	sts	0x033F, r26
    131e:	b0 93 40 03 	sts	0x0340, r27
		}
	}
	// free HCI message available ?
	if (HCI.RxMessage) {
    1322:	80 91 41 03 	lds	r24, 0x0341
    1326:	90 91 42 03 	lds	r25, 0x0342
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	51 f0       	breq	.+20     	; 0x1342 <WiMOD_HCI_ProcessRxMessage+0xb6>
		// yes, return pointer to first byte
		return &HCI.RxMessage->SapID;
    132e:	80 91 41 03 	lds	r24, 0x0341
    1332:	90 91 42 03 	lds	r25, 0x0342
    1336:	9c 01       	movw	r18, r24
    1338:	2e 5f       	subi	r18, 0xFE	; 254
    133a:	3f 4f       	sbci	r19, 0xFF	; 255
    133c:	3e 83       	std	Y+6, r19	; 0x06
    133e:	2d 83       	std	Y+5, r18	; 0x05
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <WiMOD_HCI_ProcessRxMessage+0xba>
	}
	// error, disable SLIP decoder
	return 0;
    1342:	1e 82       	std	Y+6, r1	; 0x06
    1344:	1d 82       	std	Y+5, r1	; 0x05
    1346:	8d 81       	ldd	r24, Y+5	; 0x05
    1348:	9e 81       	ldd	r25, Y+6	; 0x06
}
    134a:	26 96       	adiw	r28, 0x06	; 6
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <WiMOD_LoRaWAN_Init>:
// Init
//
// @brief: init complete interface
//
//------------------------------------------------------------------------------
void WiMOD_LoRaWAN_Init() {
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
	// init HCI layer
	WiMOD_HCI_Init(WiMOD_LoRaWAN_Process_RxMessage, // receiver callback
    1364:	8e e7       	ldi	r24, 0x7E	; 126
    1366:	9b e0       	ldi	r25, 0x0B	; 11
    1368:	21 e4       	ldi	r18, 0x41	; 65
    136a:	37 e0       	ldi	r19, 0x07	; 7
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 4e 08 	call	0x109c	; 0x109c <WiMOD_HCI_Init>
			&RxMessage); // rx message
	//LCD_vidInit4();
}
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <WiMOD_LoRaWAN_SendPing>:
// Ping
//
// @brief: send a ping message
//
//------------------------------------------------------------------------------
int WiMOD_LoRaWAN_SendPing() {
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
	// 1. init header
	TxMessage.SapID = DEVMGMT_SAP_ID;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	80 93 11 06 	sts	0x0611, r24
	TxMessage.MsgID = DEVMGMT_MSG_PING_REQ;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	80 93 12 06 	sts	0x0612, r24
	TxMessage.Length = 0;
    138c:	10 92 10 06 	sts	0x0610, r1
    1390:	10 92 0f 06 	sts	0x060F, r1
	// 2. send HCI message without payload
	return WiMOD_HCI_SendMessage(&TxMessage);
    1394:	8f e0       	ldi	r24, 0x0F	; 15
    1396:	96 e0       	ldi	r25, 0x06	; 6
    1398:	0e 94 88 08 	call	0x1110	; 0x1110 <WiMOD_HCI_SendMessage>
}
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <WiMOD_LoRaWAN_SendURadioData>:
// SendURadioData
//
// @brief: send unconfirmed radio message
//
//------------------------------------------------------------------------------
int WiMOD_LoRaWAN_SendURadioData(uint8 port, uint8* srcData, int srcLength) {
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	27 97       	sbiw	r28, 0x07	; 7
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	89 83       	std	Y+1, r24	; 0x01
    13b8:	7b 83       	std	Y+3, r23	; 0x03
    13ba:	6a 83       	std	Y+2, r22	; 0x02
    13bc:	5d 83       	std	Y+5, r21	; 0x05
    13be:	4c 83       	std	Y+4, r20	; 0x04
	// 1. check length
	if (srcLength > (WIMOD_HCI_MSG_PAYLOAD_SIZE - 1)) {
    13c0:	8c 81       	ldd	r24, Y+4	; 0x04
    13c2:	9d 81       	ldd	r25, Y+5	; 0x05
    13c4:	21 e0       	ldi	r18, 0x01	; 1
    13c6:	8c 32       	cpi	r24, 0x2C	; 44
    13c8:	92 07       	cpc	r25, r18
    13ca:	2c f0       	brlt	.+10     	; 0x13d6 <WiMOD_LoRaWAN_SendURadioData+0x34>
		// error
		return -1;
    13cc:	8f ef       	ldi	r24, 0xFF	; 255
    13ce:	9f ef       	ldi	r25, 0xFF	; 255
    13d0:	9f 83       	std	Y+7, r25	; 0x07
    13d2:	8e 83       	std	Y+6, r24	; 0x06
    13d4:	1f c0       	rjmp	.+62     	; 0x1414 <WiMOD_LoRaWAN_SendURadioData+0x72>
	}
	// 2. init header
	TxMessage.SapID = LORAWAN_SAP_ID;
    13d6:	80 e1       	ldi	r24, 0x10	; 16
    13d8:	80 93 11 06 	sts	0x0611, r24
	TxMessage.MsgID = LORAWAN_MSG_SEND_UDATA_REQ;
    13dc:	8d e0       	ldi	r24, 0x0D	; 13
    13de:	80 93 12 06 	sts	0x0612, r24
	TxMessage.Length = 1 + srcLength;
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	9d 81       	ldd	r25, Y+5	; 0x05
    13e6:	01 96       	adiw	r24, 0x01	; 1
    13e8:	90 93 10 06 	sts	0x0610, r25
    13ec:	80 93 0f 06 	sts	0x060F, r24
	// 3. init payload
	// 3.1 init port
	TxMessage.Payload[0] = port;
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	80 93 13 06 	sts	0x0613, r24
	// 3.2 init radio message payload
	memcpy(&TxMessage.Payload[1], srcData, srcLength);
    13f6:	4c 81       	ldd	r20, Y+4	; 0x04
    13f8:	5d 81       	ldd	r21, Y+5	; 0x05
    13fa:	84 e1       	ldi	r24, 0x14	; 20
    13fc:	96 e0       	ldi	r25, 0x06	; 6
    13fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1400:	3b 81       	ldd	r19, Y+3	; 0x03
    1402:	b9 01       	movw	r22, r18
    1404:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <memcpy>
	// 4. send HCI message with payload
	return WiMOD_HCI_SendMessage(&TxMessage);
    1408:	8f e0       	ldi	r24, 0x0F	; 15
    140a:	96 e0       	ldi	r25, 0x06	; 6
    140c:	0e 94 88 08 	call	0x1110	; 0x1110 <WiMOD_HCI_SendMessage>
    1410:	9f 83       	std	Y+7, r25	; 0x07
    1412:	8e 83       	std	Y+6, r24	; 0x06
    1414:	8e 81       	ldd	r24, Y+6	; 0x06
    1416:	9f 81       	ldd	r25, Y+7	; 0x07
}
    1418:	27 96       	adiw	r28, 0x07	; 7
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <WiMOD_LoRaWAN_SendCRadioData>:
// SendCRadioData
//
// @brief: send confirmed radio message
//
//------------------------------------------------------------------------------
int WiMOD_LoRaWAN_SendCRadioData(uint8 port, uint8* srcData, int srcLength) {
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	27 97       	sbiw	r28, 0x07	; 7
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	7b 83       	std	Y+3, r23	; 0x03
    1442:	6a 83       	std	Y+2, r22	; 0x02
    1444:	5d 83       	std	Y+5, r21	; 0x05
    1446:	4c 83       	std	Y+4, r20	; 0x04
	// 1. check length
	if (srcLength > (WIMOD_HCI_MSG_PAYLOAD_SIZE - 1)) {
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	9d 81       	ldd	r25, Y+5	; 0x05
    144c:	21 e0       	ldi	r18, 0x01	; 1
    144e:	8c 32       	cpi	r24, 0x2C	; 44
    1450:	92 07       	cpc	r25, r18
    1452:	2c f0       	brlt	.+10     	; 0x145e <WiMOD_LoRaWAN_SendCRadioData+0x34>
		// error
		return -1;
    1454:	8f ef       	ldi	r24, 0xFF	; 255
    1456:	9f ef       	ldi	r25, 0xFF	; 255
    1458:	9f 83       	std	Y+7, r25	; 0x07
    145a:	8e 83       	std	Y+6, r24	; 0x06
    145c:	1f c0       	rjmp	.+62     	; 0x149c <WiMOD_LoRaWAN_SendCRadioData+0x72>
	}
	// 2. init header
	TxMessage.SapID = LORAWAN_SAP_ID;
    145e:	80 e1       	ldi	r24, 0x10	; 16
    1460:	80 93 11 06 	sts	0x0611, r24
	TxMessage.MsgID = LORAWAN_MSG_SEND_CDATA_REQ;
    1464:	81 e1       	ldi	r24, 0x11	; 17
    1466:	80 93 12 06 	sts	0x0612, r24
	TxMessage.Length = 1 + srcLength;
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	9d 81       	ldd	r25, Y+5	; 0x05
    146e:	01 96       	adiw	r24, 0x01	; 1
    1470:	90 93 10 06 	sts	0x0610, r25
    1474:	80 93 0f 06 	sts	0x060F, r24
	// 3. init payload
	// 3.1 init port
	TxMessage.Payload[0] = port;
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	80 93 13 06 	sts	0x0613, r24
	// 3.2 init radio message payload
	memcpy(&TxMessage.Payload[1], srcData, srcLength);
    147e:	4c 81       	ldd	r20, Y+4	; 0x04
    1480:	5d 81       	ldd	r21, Y+5	; 0x05
    1482:	84 e1       	ldi	r24, 0x14	; 20
    1484:	96 e0       	ldi	r25, 0x06	; 6
    1486:	2a 81       	ldd	r18, Y+2	; 0x02
    1488:	3b 81       	ldd	r19, Y+3	; 0x03
    148a:	b9 01       	movw	r22, r18
    148c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <memcpy>
	// 4. send HCI message with payload
	return WiMOD_HCI_SendMessage(&TxMessage);
    1490:	8f e0       	ldi	r24, 0x0F	; 15
    1492:	96 e0       	ldi	r25, 0x06	; 6
    1494:	0e 94 88 08 	call	0x1110	; 0x1110 <WiMOD_HCI_SendMessage>
    1498:	9f 83       	std	Y+7, r25	; 0x07
    149a:	8e 83       	std	Y+6, r24	; 0x06
    149c:	8e 81       	ldd	r24, Y+6	; 0x06
    149e:	9f 81       	ldd	r25, Y+7	; 0x07
}
    14a0:	27 96       	adiw	r28, 0x07	; 7
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <WiMOD_LoRaWAN_ABP_Activate>:
//
//------------------------------------------------------------------------------

int
WiMOD_LoRaWAN_ABP_Activate(unsigned char* DeviceAddress ,unsigned char* NetworkSessionKey , unsigned char* ApplicationSessionKey)
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <WiMOD_LoRaWAN_ABP_Activate+0x6>
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <WiMOD_LoRaWAN_ABP_Activate+0x8>
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <WiMOD_LoRaWAN_ABP_Activate+0xa>
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	9a 83       	std	Y+2, r25	; 0x02
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	7c 83       	std	Y+4, r23	; 0x04
    14c6:	6b 83       	std	Y+3, r22	; 0x03
    14c8:	5e 83       	std	Y+6, r21	; 0x06
    14ca:	4d 83       	std	Y+5, r20	; 0x05
	  // 1. init header

    TxMessage.SapID     = LORAWAN_SAP_ID;
    14cc:	80 e1       	ldi	r24, 0x10	; 16
    14ce:	80 93 11 06 	sts	0x0611, r24
    TxMessage.MsgID     = LORAWAN_MSG_ACTIVATE_DEVICE_REQ ;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	80 93 12 06 	sts	0x0612, r24
    TxMessage.Length    = 36;
    14d8:	84 e2       	ldi	r24, 0x24	; 36
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	90 93 10 06 	sts	0x0610, r25
    14e0:	80 93 0f 06 	sts	0x060F, r24

    TxMessage.Payload[0] = DeviceAddress[0] ;
    14e4:	e9 81       	ldd	r30, Y+1	; 0x01
    14e6:	fa 81       	ldd	r31, Y+2	; 0x02
    14e8:	80 81       	ld	r24, Z
    14ea:	80 93 13 06 	sts	0x0613, r24
    TxMessage.Payload[1] = DeviceAddress[1] ;
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	9a 81       	ldd	r25, Y+2	; 0x02
    14f2:	fc 01       	movw	r30, r24
    14f4:	31 96       	adiw	r30, 0x01	; 1
    14f6:	80 81       	ld	r24, Z
    14f8:	80 93 14 06 	sts	0x0614, r24
    TxMessage.Payload[2] = DeviceAddress[2] ;
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	fc 01       	movw	r30, r24
    1502:	32 96       	adiw	r30, 0x02	; 2
    1504:	80 81       	ld	r24, Z
    1506:	80 93 15 06 	sts	0x0615, r24
    TxMessage.Payload[3] = DeviceAddress[3] ;
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	9a 81       	ldd	r25, Y+2	; 0x02
    150e:	fc 01       	movw	r30, r24
    1510:	33 96       	adiw	r30, 0x03	; 3
    1512:	80 81       	ld	r24, Z
    1514:	80 93 16 06 	sts	0x0616, r24


    TxMessage.Payload[4] =  (NetworkSessionKey[15]) ;
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	fc 01       	movw	r30, r24
    151e:	3f 96       	adiw	r30, 0x0f	; 15
    1520:	80 81       	ld	r24, Z
    1522:	80 93 17 06 	sts	0x0617, r24
    TxMessage.Payload[5] =  (NetworkSessionKey[14]) ;
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	9c 81       	ldd	r25, Y+4	; 0x04
    152a:	fc 01       	movw	r30, r24
    152c:	3e 96       	adiw	r30, 0x0e	; 14
    152e:	80 81       	ld	r24, Z
    1530:	80 93 18 06 	sts	0x0618, r24
    TxMessage.Payload[6] =  (NetworkSessionKey[13]) ;
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	9c 81       	ldd	r25, Y+4	; 0x04
    1538:	fc 01       	movw	r30, r24
    153a:	3d 96       	adiw	r30, 0x0d	; 13
    153c:	80 81       	ld	r24, Z
    153e:	80 93 19 06 	sts	0x0619, r24
    TxMessage.Payload[7] =  (NetworkSessionKey[12]) ;
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	9c 81       	ldd	r25, Y+4	; 0x04
    1546:	fc 01       	movw	r30, r24
    1548:	3c 96       	adiw	r30, 0x0c	; 12
    154a:	80 81       	ld	r24, Z
    154c:	80 93 1a 06 	sts	0x061A, r24
    TxMessage.Payload[8] =  (NetworkSessionKey[11]) ;
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	9c 81       	ldd	r25, Y+4	; 0x04
    1554:	fc 01       	movw	r30, r24
    1556:	3b 96       	adiw	r30, 0x0b	; 11
    1558:	80 81       	ld	r24, Z
    155a:	80 93 1b 06 	sts	0x061B, r24
    TxMessage.Payload[9] =  (NetworkSessionKey[10]) ;
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	9c 81       	ldd	r25, Y+4	; 0x04
    1562:	fc 01       	movw	r30, r24
    1564:	3a 96       	adiw	r30, 0x0a	; 10
    1566:	80 81       	ld	r24, Z
    1568:	80 93 1c 06 	sts	0x061C, r24
    TxMessage.Payload[10] = (NetworkSessionKey[9])  ;
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	fc 01       	movw	r30, r24
    1572:	39 96       	adiw	r30, 0x09	; 9
    1574:	80 81       	ld	r24, Z
    1576:	80 93 1d 06 	sts	0x061D, r24
    TxMessage.Payload[11] = (NetworkSessionKey[8])  ;
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	9c 81       	ldd	r25, Y+4	; 0x04
    157e:	fc 01       	movw	r30, r24
    1580:	38 96       	adiw	r30, 0x08	; 8
    1582:	80 81       	ld	r24, Z
    1584:	80 93 1e 06 	sts	0x061E, r24
    TxMessage.Payload[12] = (NetworkSessionKey[7])  ;
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	fc 01       	movw	r30, r24
    158e:	37 96       	adiw	r30, 0x07	; 7
    1590:	80 81       	ld	r24, Z
    1592:	80 93 1f 06 	sts	0x061F, r24
    TxMessage.Payload[13] = (NetworkSessionKey[6])  ;
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	9c 81       	ldd	r25, Y+4	; 0x04
    159a:	fc 01       	movw	r30, r24
    159c:	36 96       	adiw	r30, 0x06	; 6
    159e:	80 81       	ld	r24, Z
    15a0:	80 93 20 06 	sts	0x0620, r24
    TxMessage.Payload[14] = (NetworkSessionKey[5])  ;
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	fc 01       	movw	r30, r24
    15aa:	35 96       	adiw	r30, 0x05	; 5
    15ac:	80 81       	ld	r24, Z
    15ae:	80 93 21 06 	sts	0x0621, r24
    TxMessage.Payload[15] = (NetworkSessionKey[4])  ;
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	9c 81       	ldd	r25, Y+4	; 0x04
    15b6:	fc 01       	movw	r30, r24
    15b8:	34 96       	adiw	r30, 0x04	; 4
    15ba:	80 81       	ld	r24, Z
    15bc:	80 93 22 06 	sts	0x0622, r24
    TxMessage.Payload[16] = (NetworkSessionKey[3])  ;
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	fc 01       	movw	r30, r24
    15c6:	33 96       	adiw	r30, 0x03	; 3
    15c8:	80 81       	ld	r24, Z
    15ca:	80 93 23 06 	sts	0x0623, r24
    TxMessage.Payload[17] = (NetworkSessionKey[2])  ;
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	9c 81       	ldd	r25, Y+4	; 0x04
    15d2:	fc 01       	movw	r30, r24
    15d4:	32 96       	adiw	r30, 0x02	; 2
    15d6:	80 81       	ld	r24, Z
    15d8:	80 93 24 06 	sts	0x0624, r24
    TxMessage.Payload[18] = (NetworkSessionKey[1])  ;
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	9c 81       	ldd	r25, Y+4	; 0x04
    15e0:	fc 01       	movw	r30, r24
    15e2:	31 96       	adiw	r30, 0x01	; 1
    15e4:	80 81       	ld	r24, Z
    15e6:	80 93 25 06 	sts	0x0625, r24
    TxMessage.Payload[19] = (NetworkSessionKey[0])  ;
    15ea:	eb 81       	ldd	r30, Y+3	; 0x03
    15ec:	fc 81       	ldd	r31, Y+4	; 0x04
    15ee:	80 81       	ld	r24, Z
    15f0:	80 93 26 06 	sts	0x0626, r24


    // must check whether its Little or big Endian .


    TxMessage.Payload[20] = (ApplicationSessionKey[15])  ;
    15f4:	8d 81       	ldd	r24, Y+5	; 0x05
    15f6:	9e 81       	ldd	r25, Y+6	; 0x06
    15f8:	fc 01       	movw	r30, r24
    15fa:	3f 96       	adiw	r30, 0x0f	; 15
    15fc:	80 81       	ld	r24, Z
    15fe:	80 93 27 06 	sts	0x0627, r24
    TxMessage.Payload[21] = (ApplicationSessionKey[14])  ;
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	9e 81       	ldd	r25, Y+6	; 0x06
    1606:	fc 01       	movw	r30, r24
    1608:	3e 96       	adiw	r30, 0x0e	; 14
    160a:	80 81       	ld	r24, Z
    160c:	80 93 28 06 	sts	0x0628, r24
    TxMessage.Payload[22] = (ApplicationSessionKey[13])  ;
    1610:	8d 81       	ldd	r24, Y+5	; 0x05
    1612:	9e 81       	ldd	r25, Y+6	; 0x06
    1614:	fc 01       	movw	r30, r24
    1616:	3d 96       	adiw	r30, 0x0d	; 13
    1618:	80 81       	ld	r24, Z
    161a:	80 93 29 06 	sts	0x0629, r24
    TxMessage.Payload[23] = (ApplicationSessionKey[12])  ;
    161e:	8d 81       	ldd	r24, Y+5	; 0x05
    1620:	9e 81       	ldd	r25, Y+6	; 0x06
    1622:	fc 01       	movw	r30, r24
    1624:	3c 96       	adiw	r30, 0x0c	; 12
    1626:	80 81       	ld	r24, Z
    1628:	80 93 2a 06 	sts	0x062A, r24
    TxMessage.Payload[24] = (ApplicationSessionKey[11])  ;
    162c:	8d 81       	ldd	r24, Y+5	; 0x05
    162e:	9e 81       	ldd	r25, Y+6	; 0x06
    1630:	fc 01       	movw	r30, r24
    1632:	3b 96       	adiw	r30, 0x0b	; 11
    1634:	80 81       	ld	r24, Z
    1636:	80 93 2b 06 	sts	0x062B, r24
    TxMessage.Payload[25] = (ApplicationSessionKey[10])  ;
    163a:	8d 81       	ldd	r24, Y+5	; 0x05
    163c:	9e 81       	ldd	r25, Y+6	; 0x06
    163e:	fc 01       	movw	r30, r24
    1640:	3a 96       	adiw	r30, 0x0a	; 10
    1642:	80 81       	ld	r24, Z
    1644:	80 93 2c 06 	sts	0x062C, r24
    TxMessage.Payload[26] = (ApplicationSessionKey[9])  ;
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	9e 81       	ldd	r25, Y+6	; 0x06
    164c:	fc 01       	movw	r30, r24
    164e:	39 96       	adiw	r30, 0x09	; 9
    1650:	80 81       	ld	r24, Z
    1652:	80 93 2d 06 	sts	0x062D, r24
    TxMessage.Payload[27] = (ApplicationSessionKey[8])  ;
    1656:	8d 81       	ldd	r24, Y+5	; 0x05
    1658:	9e 81       	ldd	r25, Y+6	; 0x06
    165a:	fc 01       	movw	r30, r24
    165c:	38 96       	adiw	r30, 0x08	; 8
    165e:	80 81       	ld	r24, Z
    1660:	80 93 2e 06 	sts	0x062E, r24
    TxMessage.Payload[28] = (ApplicationSessionKey[7])  ;
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
    1666:	9e 81       	ldd	r25, Y+6	; 0x06
    1668:	fc 01       	movw	r30, r24
    166a:	37 96       	adiw	r30, 0x07	; 7
    166c:	80 81       	ld	r24, Z
    166e:	80 93 2f 06 	sts	0x062F, r24
    TxMessage.Payload[29] = (ApplicationSessionKey[6])  ;
    1672:	8d 81       	ldd	r24, Y+5	; 0x05
    1674:	9e 81       	ldd	r25, Y+6	; 0x06
    1676:	fc 01       	movw	r30, r24
    1678:	36 96       	adiw	r30, 0x06	; 6
    167a:	80 81       	ld	r24, Z
    167c:	80 93 30 06 	sts	0x0630, r24
    TxMessage.Payload[30] = (ApplicationSessionKey[5])  ;
    1680:	8d 81       	ldd	r24, Y+5	; 0x05
    1682:	9e 81       	ldd	r25, Y+6	; 0x06
    1684:	fc 01       	movw	r30, r24
    1686:	35 96       	adiw	r30, 0x05	; 5
    1688:	80 81       	ld	r24, Z
    168a:	80 93 31 06 	sts	0x0631, r24
    TxMessage.Payload[31] = (ApplicationSessionKey[4])  ;
    168e:	8d 81       	ldd	r24, Y+5	; 0x05
    1690:	9e 81       	ldd	r25, Y+6	; 0x06
    1692:	fc 01       	movw	r30, r24
    1694:	34 96       	adiw	r30, 0x04	; 4
    1696:	80 81       	ld	r24, Z
    1698:	80 93 32 06 	sts	0x0632, r24
    TxMessage.Payload[32] = (ApplicationSessionKey[3])  ;
    169c:	8d 81       	ldd	r24, Y+5	; 0x05
    169e:	9e 81       	ldd	r25, Y+6	; 0x06
    16a0:	fc 01       	movw	r30, r24
    16a2:	33 96       	adiw	r30, 0x03	; 3
    16a4:	80 81       	ld	r24, Z
    16a6:	80 93 33 06 	sts	0x0633, r24
    TxMessage.Payload[33] = (ApplicationSessionKey[2])  ;
    16aa:	8d 81       	ldd	r24, Y+5	; 0x05
    16ac:	9e 81       	ldd	r25, Y+6	; 0x06
    16ae:	fc 01       	movw	r30, r24
    16b0:	32 96       	adiw	r30, 0x02	; 2
    16b2:	80 81       	ld	r24, Z
    16b4:	80 93 34 06 	sts	0x0634, r24
    TxMessage.Payload[34] = (ApplicationSessionKey[1])  ;
    16b8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ba:	9e 81       	ldd	r25, Y+6	; 0x06
    16bc:	fc 01       	movw	r30, r24
    16be:	31 96       	adiw	r30, 0x01	; 1
    16c0:	80 81       	ld	r24, Z
    16c2:	80 93 35 06 	sts	0x0635, r24
    TxMessage.Payload[35] = (ApplicationSessionKey[0])  ;
    16c6:	ed 81       	ldd	r30, Y+5	; 0x05
    16c8:	fe 81       	ldd	r31, Y+6	; 0x06
    16ca:	80 81       	ld	r24, Z
    16cc:	80 93 36 06 	sts	0x0636, r24


    // 2. send HCI message without payload
    return WiMOD_HCI_SendMessage(&TxMessage);
    16d0:	8f e0       	ldi	r24, 0x0F	; 15
    16d2:	96 e0       	ldi	r25, 0x06	; 6
    16d4:	0e 94 88 08 	call	0x1110	; 0x1110 <WiMOD_HCI_SendMessage>
}
    16d8:	26 96       	adiw	r28, 0x06	; 6
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <WiMOD_LoRaWAN_Process>:
// Process
//
// @brief: handle receiver process
//
//------------------------------------------------------------------------------
void WiMOD_LoRaWAN_Process() {
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
	// call HCI process
	WiMOD_HCI_Process();
    16f2:	0e 94 1b 09 	call	0x1236	; 0x1236 <WiMOD_HCI_Process>
}
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret

000016fc <WiMOD_LoRaWAN_Process_RxMessage>:
//
// @brief: handle receiver process
//
//------------------------------------------------------------------------------
static TWiMOD_HCI_Message*
WiMOD_LoRaWAN_Process_RxMessage(TWiMOD_HCI_Message* rxMessage) {
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	00 d0       	rcall	.+0      	; 0x1702 <WiMOD_LoRaWAN_Process_RxMessage+0x6>
    1702:	00 d0       	rcall	.+0      	; 0x1704 <WiMOD_LoRaWAN_Process_RxMessage+0x8>
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	9a 83       	std	Y+2, r25	; 0x02
    170a:	89 83       	std	Y+1, r24	; 0x01
	switch (rxMessage->SapID) {
    170c:	e9 81       	ldd	r30, Y+1	; 0x01
    170e:	fa 81       	ldd	r31, Y+2	; 0x02
    1710:	82 81       	ldd	r24, Z+2	; 0x02
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	3c 83       	std	Y+4, r19	; 0x04
    1718:	2b 83       	std	Y+3, r18	; 0x03
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	9c 81       	ldd	r25, Y+4	; 0x04
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	91 05       	cpc	r25, r1
    1722:	31 f0       	breq	.+12     	; 0x1730 <WiMOD_LoRaWAN_Process_RxMessage+0x34>
    1724:	2b 81       	ldd	r18, Y+3	; 0x03
    1726:	3c 81       	ldd	r19, Y+4	; 0x04
    1728:	20 31       	cpi	r18, 0x10	; 16
    172a:	31 05       	cpc	r19, r1
    172c:	31 f0       	breq	.+12     	; 0x173a <WiMOD_LoRaWAN_Process_RxMessage+0x3e>
    172e:	09 c0       	rjmp	.+18     	; 0x1742 <WiMOD_LoRaWAN_Process_RxMessage+0x46>
	case DEVMGMT_SAP_ID:
		WiMOD_LoRaWAN_Process_DevMgmt_Message(rxMessage);
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	9a 81       	ldd	r25, Y+2	; 0x02
    1734:	0e 94 aa 0b 	call	0x1754	; 0x1754 <WiMOD_LoRaWAN_Process_DevMgmt_Message>
    1738:	04 c0       	rjmp	.+8      	; 0x1742 <WiMOD_LoRaWAN_Process_RxMessage+0x46>
		break;
	case LORAWAN_SAP_ID:
		WiMOD_LoRaWAN_Process_LoRaWAN_Message(rxMessage);
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	9a 81       	ldd	r25, Y+2	; 0x02
    173e:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <WiMOD_LoRaWAN_Process_LoRaWAN_Message>
		break;
	}
	return &RxMessage;
    1742:	81 e4       	ldi	r24, 0x41	; 65
    1744:	97 e0       	ldi	r25, 0x07	; 7
}
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <WiMOD_LoRaWAN_Process_DevMgmt_Message>:
// Process_DevMgmt_Message
//
// @brief: handle received Device Management SAP messages
//
//------------------------------------------------------------------------------
static void WiMOD_LoRaWAN_Process_DevMgmt_Message(TWiMOD_HCI_Message* rxMessage) {
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	00 d0       	rcall	.+0      	; 0x175a <WiMOD_LoRaWAN_Process_DevMgmt_Message+0x6>
    175a:	00 d0       	rcall	.+0      	; 0x175c <WiMOD_LoRaWAN_Process_DevMgmt_Message+0x8>
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	9c 83       	std	Y+4, r25	; 0x04
    1762:	8b 83       	std	Y+3, r24	; 0x03
	char temp[2];
	switch (rxMessage->MsgID) {
    1764:	eb 81       	ldd	r30, Y+3	; 0x03
    1766:	fc 81       	ldd	r31, Y+4	; 0x04
    1768:	83 81       	ldd	r24, Z+3	; 0x03
    176a:	88 2f       	mov	r24, r24
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	82 30       	cpi	r24, 0x02	; 2
    1770:	91 05       	cpc	r25, r1
    1772:	f1 f4       	brne	.+60     	; 0x17b0 <WiMOD_LoRaWAN_Process_DevMgmt_Message+0x5c>
	case DEVMGMT_MSG_PING_RSP:
		//printf("Ping Response, Status : 0x%02X\n\r",
		//	(uint8) rxMessage->Payload[0]);
		LCD_VidWriteCommand4(0x01);
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LCD_VidWriteCommand4>
		LCD_String4("Ping Response");
    177c:	80 e6       	ldi	r24, 0x60	; 96
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LCD_String4>
		LCD_Goto_row_coulmn4(1, 0);
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	60 e0       	ldi	r22, 0x00	; 0
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <LCD_Goto_row_coulmn4>
		LCD_String4("Status : 0x");
    1790:	8e e6       	ldi	r24, 0x6E	; 110
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LCD_String4>
		(itoa(((uint8) rxMessage->Payload[0])), temp, 16);
    1798:	eb 81       	ldd	r30, Y+3	; 0x03
    179a:	fc 81       	ldd	r31, Y+4	; 0x04
    179c:	84 81       	ldd	r24, Z+4	; 0x04
    179e:	88 2f       	mov	r24, r24
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <itoa>
		LCD_String4(temp);
    17a6:	ce 01       	movw	r24, r28
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LCD_String4>
    17ae:	1d c0       	rjmp	.+58     	; 0x17ea <WiMOD_LoRaWAN_Process_DevMgmt_Message+0x96>
		break;
	default:
		//printf("unhandled DeviceMgmt message received - MsgID : 0x%02X\n\r",
		//(uint8) rxMessage->MsgID);
		LCD_VidWriteCommand4(0x01);
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LCD_VidWriteCommand4>
		LCD_String4("DevMgmt msg recv");
    17b8:	8a e7       	ldi	r24, 0x7A	; 122
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LCD_String4>
		LCD_Goto_row_coulmn4(1, 0);
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <LCD_Goto_row_coulmn4>
		LCD_String4("MsgID : 0x");
    17cc:	8b e8       	ldi	r24, 0x8B	; 139
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LCD_String4>
		(itoa(((uint8) rxMessage->MsgID)), temp, 16);
    17d4:	eb 81       	ldd	r30, Y+3	; 0x03
    17d6:	fc 81       	ldd	r31, Y+4	; 0x04
    17d8:	83 81       	ldd	r24, Z+3	; 0x03
    17da:	88 2f       	mov	r24, r24
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <itoa>
		LCD_String4(temp);
    17e2:	ce 01       	movw	r24, r28
    17e4:	01 96       	adiw	r24, 0x01	; 1
    17e6:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LCD_String4>
		break;
	}
}
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <WiMOD_LoRaWAN_Process_LoRaWAN_Message>:
// Process_LoRaWAN_Message
//
// @brief: handle received LoRaWAN SAP messages
//
//------------------------------------------------------------------------------
static void WiMOD_LoRaWAN_Process_LoRaWAN_Message(TWiMOD_HCI_Message* rxMessage) {
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <WiMOD_LoRaWAN_Process_LoRaWAN_Message+0x6>
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <WiMOD_LoRaWAN_Process_LoRaWAN_Message+0x8>
    1800:	00 d0       	rcall	.+0      	; 0x1802 <WiMOD_LoRaWAN_Process_LoRaWAN_Message+0xa>
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	9c 83       	std	Y+4, r25	; 0x04
    1808:	8b 83       	std	Y+3, r24	; 0x03
	char temp[2];
	switch (rxMessage->MsgID) {
    180a:	eb 81       	ldd	r30, Y+3	; 0x03
    180c:	fc 81       	ldd	r31, Y+4	; 0x04
    180e:	83 81       	ldd	r24, Z+3	; 0x03
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	3e 83       	std	Y+6, r19	; 0x06
    1816:	2d 83       	std	Y+5, r18	; 0x05
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
    181a:	9e 81       	ldd	r25, Y+6	; 0x06
    181c:	8e 30       	cpi	r24, 0x0E	; 14
    181e:	91 05       	cpc	r25, r1
    1820:	31 f0       	breq	.+12     	; 0x182e <WiMOD_LoRaWAN_Process_LoRaWAN_Message+0x36>
    1822:	2d 81       	ldd	r18, Y+5	; 0x05
    1824:	3e 81       	ldd	r19, Y+6	; 0x06
    1826:	22 31       	cpi	r18, 0x12	; 18
    1828:	31 05       	cpc	r19, r1
    182a:	f9 f0       	breq	.+62     	; 0x186a <WiMOD_LoRaWAN_Process_LoRaWAN_Message+0x72>
    182c:	3c c0       	rjmp	.+120    	; 0x18a6 <WiMOD_LoRaWAN_Process_LoRaWAN_Message+0xae>
	case LORAWAN_MSG_SEND_UDATA_RSP:
		//printf("Send U-Data Response, Status : 0x%02X\n\r",
		//(uint8) rxMessage->Payload[0]);
		LCD_VidWriteCommand4(0x01);
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LCD_VidWriteCommand4>
		LCD_String4("Send U-Data Res");
    1836:	86 e9       	ldi	r24, 0x96	; 150
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LCD_String4>
		LCD_Goto_row_coulmn4(1, 0);
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <LCD_Goto_row_coulmn4>
		LCD_String4("Status : 0x");
    184a:	8e e6       	ldi	r24, 0x6E	; 110
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LCD_String4>
		(itoa(((uint8) rxMessage->Payload[0])), temp, 16);
    1852:	eb 81       	ldd	r30, Y+3	; 0x03
    1854:	fc 81       	ldd	r31, Y+4	; 0x04
    1856:	84 81       	ldd	r24, Z+4	; 0x04
    1858:	88 2f       	mov	r24, r24
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <itoa>
		LCD_String4(temp);
    1860:	ce 01       	movw	r24, r28
    1862:	01 96       	adiw	r24, 0x01	; 1
    1864:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LCD_String4>
    1868:	3b c0       	rjmp	.+118    	; 0x18e0 <WiMOD_LoRaWAN_Process_LoRaWAN_Message+0xe8>
		break;
	case LORAWAN_MSG_SEND_CDATA_RSP:
		//printf("Send C-Data Response, Status : 0x%02X\n\r",
		//		(uint8) rxMessage->Payload[0]);
		LCD_VidWriteCommand4(0x01);
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LCD_VidWriteCommand4>
		LCD_String4("Send C-Data Res");
    1872:	86 ea       	ldi	r24, 0xA6	; 166
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LCD_String4>
		LCD_Goto_row_coulmn4(1, 0);
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	60 e0       	ldi	r22, 0x00	; 0
    1880:	70 e0       	ldi	r23, 0x00	; 0
    1882:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <LCD_Goto_row_coulmn4>
		LCD_String4("Status : 0x");
    1886:	8e e6       	ldi	r24, 0x6E	; 110
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LCD_String4>
		(itoa(((uint8) rxMessage->Payload[0])), temp, 16);
    188e:	eb 81       	ldd	r30, Y+3	; 0x03
    1890:	fc 81       	ldd	r31, Y+4	; 0x04
    1892:	84 81       	ldd	r24, Z+4	; 0x04
    1894:	88 2f       	mov	r24, r24
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <itoa>
		LCD_String4(temp);
    189c:	ce 01       	movw	r24, r28
    189e:	01 96       	adiw	r24, 0x01	; 1
    18a0:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LCD_String4>
    18a4:	1d c0       	rjmp	.+58     	; 0x18e0 <WiMOD_LoRaWAN_Process_LoRaWAN_Message+0xe8>
		break;
	default:
		//printf("unhandled LoRaWAN SAP message received - MsgID : 0x%02X\n\r",
		//		(uint8) rxMessage->MsgID);
		LCD_VidWriteCommand4(0x01);
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LCD_VidWriteCommand4>
		LCD_String4("SAP msg recv");
    18ae:	86 eb       	ldi	r24, 0xB6	; 182
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LCD_String4>
		LCD_Goto_row_coulmn4(1, 0);
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <LCD_Goto_row_coulmn4>
		LCD_String4("MsgID : 0x");
    18c2:	8b e8       	ldi	r24, 0x8B	; 139
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LCD_String4>
		(itoa(((uint8) rxMessage->MsgID)), temp, 16);
    18ca:	eb 81       	ldd	r30, Y+3	; 0x03
    18cc:	fc 81       	ldd	r31, Y+4	; 0x04
    18ce:	83 81       	ldd	r24, Z+3	; 0x03
    18d0:	88 2f       	mov	r24, r24
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <itoa>
		LCD_String4(temp);
    18d8:	ce 01       	movw	r24, r28
    18da:	01 96       	adiw	r24, 0x01	; 1
    18dc:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LCD_String4>
		break;
	}
}
    18e0:	26 96       	adiw	r28, 0x06	; 6
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	08 95       	ret

000018f2 <delay_ms>:



void delay_ms(uint32 ms)

{
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
    18fa:	28 97       	sbiw	r28, 0x08	; 8
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	6d 83       	std	Y+5, r22	; 0x05
    1908:	7e 83       	std	Y+6, r23	; 0x06
    190a:	8f 83       	std	Y+7, r24	; 0x07
    190c:	98 87       	std	Y+8, r25	; 0x08

	CLRPORT(TCNT0);
    190e:	e2 e5       	ldi	r30, 0x52	; 82
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	10 82       	st	Z, r1
	ASSIGPORT(OCR0,60);
    1914:	ec e5       	ldi	r30, 0x5C	; 92
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	8c e3       	ldi	r24, 0x3C	; 60
    191a:	80 83       	st	Z, r24
	SETBIT(TCCR0,1);
    191c:	a3 e5       	ldi	r26, 0x53	; 83
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e3 e5       	ldi	r30, 0x53	; 83
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	82 60       	ori	r24, 0x02	; 2
    1928:	8c 93       	st	X, r24
	SETBIT(TCCR0,3);
    192a:	a3 e5       	ldi	r26, 0x53	; 83
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e3 e5       	ldi	r30, 0x53	; 83
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	88 60       	ori	r24, 0x08	; 8
    1936:	8c 93       	st	X, r24

	uint32 counter=0;
    1938:	19 82       	std	Y+1, r1	; 0x01
    193a:	1a 82       	std	Y+2, r1	; 0x02
    193c:	1b 82       	std	Y+3, r1	; 0x03
    193e:	1c 82       	std	Y+4, r1	; 0x04

	while(1)
	{
		if(GETBIT(TIFR,1)==1)
    1940:	e8 e5       	ldi	r30, 0x58	; 88
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	86 95       	lsr	r24
    1948:	88 2f       	mov	r24, r24
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	81 70       	andi	r24, 0x01	; 1
    194e:	90 70       	andi	r25, 0x00	; 0
    1950:	88 23       	and	r24, r24
    1952:	91 f0       	breq	.+36     	; 0x1978 <delay_ms+0x86>
		{
		    SETBIT(TIFR,1);
    1954:	a8 e5       	ldi	r26, 0x58	; 88
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e8 e5       	ldi	r30, 0x58	; 88
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	82 60       	ori	r24, 0x02	; 2
    1960:	8c 93       	st	X, r24
		    counter++;
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	9a 81       	ldd	r25, Y+2	; 0x02
    1966:	ab 81       	ldd	r26, Y+3	; 0x03
    1968:	bc 81       	ldd	r27, Y+4	; 0x04
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	a1 1d       	adc	r26, r1
    196e:	b1 1d       	adc	r27, r1
    1970:	89 83       	std	Y+1, r24	; 0x01
    1972:	9a 83       	std	Y+2, r25	; 0x02
    1974:	ab 83       	std	Y+3, r26	; 0x03
    1976:	bc 83       	std	Y+4, r27	; 0x04
		}

		if(counter==(ms*25) )
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	af 81       	ldd	r26, Y+7	; 0x07
    197e:	b8 85       	ldd	r27, Y+8	; 0x08
    1980:	29 e1       	ldi	r18, 0x19	; 25
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	40 e0       	ldi	r20, 0x00	; 0
    1986:	50 e0       	ldi	r21, 0x00	; 0
    1988:	bc 01       	movw	r22, r24
    198a:	cd 01       	movw	r24, r26
    198c:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__mulsi3>
    1990:	9b 01       	movw	r18, r22
    1992:	ac 01       	movw	r20, r24
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	9a 81       	ldd	r25, Y+2	; 0x02
    1998:	ab 81       	ldd	r26, Y+3	; 0x03
    199a:	bc 81       	ldd	r27, Y+4	; 0x04
    199c:	28 17       	cp	r18, r24
    199e:	39 07       	cpc	r19, r25
    19a0:	4a 07       	cpc	r20, r26
    19a2:	5b 07       	cpc	r21, r27
    19a4:	69 f6       	brne	.-102    	; 0x1940 <delay_ms+0x4e>
		        {
	        CLRPORT(TCNT0);
    19a6:	e2 e5       	ldi	r30, 0x52	; 82
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	10 82       	st	Z, r1
		        	break;
		        }
	}
    19ac:	28 96       	adiw	r28, 0x08	; 8
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	de bf       	out	0x3e, r29	; 62
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	cd bf       	out	0x3d, r28	; 61
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	08 95       	ret

000019be <LCD_VidWriteData4>:
#include "DIO.h"
#include "DIO_local.h"
#include "delay.h"
#include <string.h>

void LCD_VidWriteData4(uint8 u8Data) {
    19be:	df 93       	push	r29
    19c0:	cf 93       	push	r28
    19c2:	0f 92       	push	r0
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	89 83       	std	Y+1, r24	; 0x01

	// Rs=1
	SETBIT(PORTB, 1);
    19ca:	a8 e3       	ldi	r26, 0x38	; 56
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e8 e3       	ldi	r30, 0x38	; 56
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	82 60       	ori	r24, 0x02	; 2
    19d6:	8c 93       	st	X, r24
	// R/W=0
	CLRBIT(PORTB, 2);
    19d8:	a8 e3       	ldi	r26, 0x38	; 56
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e8 e3       	ldi	r30, 0x38	; 56
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	8b 7f       	andi	r24, 0xFB	; 251
    19e4:	8c 93       	st	X, r24
	// send data
	ASS_HIGH_NIPPLE(PORTA, GET_HIGH_NIPPLE(u8Data));
    19e6:	ab e3       	ldi	r26, 0x3B	; 59
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	82 95       	swap	r24
    19ee:	8f 70       	andi	r24, 0x0F	; 15
    19f0:	88 2f       	mov	r24, r24
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	82 95       	swap	r24
    19f6:	92 95       	swap	r25
    19f8:	90 7f       	andi	r25, 0xF0	; 240
    19fa:	98 27       	eor	r25, r24
    19fc:	80 7f       	andi	r24, 0xF0	; 240
    19fe:	98 27       	eor	r25, r24
    1a00:	98 2f       	mov	r25, r24
    1a02:	eb e3       	ldi	r30, 0x3B	; 59
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	8f 70       	andi	r24, 0x0F	; 15
    1a0a:	89 2b       	or	r24, r25
    1a0c:	8c 93       	st	X, r24
	//latch E=1 delay E=0
	SETBIT(PORTB, 3);
    1a0e:	a8 e3       	ldi	r26, 0x38	; 56
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e8 e3       	ldi	r30, 0x38	; 56
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	88 60       	ori	r24, 0x08	; 8
    1a1a:	8c 93       	st	X, r24
	delay_ms(5);
    1a1c:	65 e0       	ldi	r22, 0x05	; 5
    1a1e:	70 e0       	ldi	r23, 0x00	; 0
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <delay_ms>
	CLRBIT(PORTB, 3);
    1a28:	a8 e3       	ldi	r26, 0x38	; 56
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e8 e3       	ldi	r30, 0x38	; 56
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	87 7f       	andi	r24, 0xF7	; 247
    1a34:	8c 93       	st	X, r24

	ASS_HIGH_NIPPLE(PORTA, GET_LOW_NIPPLE(u8Data));
    1a36:	ab e3       	ldi	r26, 0x3B	; 59
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	88 2f       	mov	r24, r24
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	82 95       	swap	r24
    1a42:	92 95       	swap	r25
    1a44:	90 7f       	andi	r25, 0xF0	; 240
    1a46:	98 27       	eor	r25, r24
    1a48:	80 7f       	andi	r24, 0xF0	; 240
    1a4a:	98 27       	eor	r25, r24
    1a4c:	98 2f       	mov	r25, r24
    1a4e:	eb e3       	ldi	r30, 0x3B	; 59
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	8f 70       	andi	r24, 0x0F	; 15
    1a56:	89 2b       	or	r24, r25
    1a58:	8c 93       	st	X, r24
	//latch E=1 delay E=0
	SETBIT(PORTB, 3);
    1a5a:	a8 e3       	ldi	r26, 0x38	; 56
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e8 e3       	ldi	r30, 0x38	; 56
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	88 60       	ori	r24, 0x08	; 8
    1a66:	8c 93       	st	X, r24
	delay_ms(5);
    1a68:	65 e0       	ldi	r22, 0x05	; 5
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <delay_ms>
	CLRBIT(PORTB, 3);
    1a74:	a8 e3       	ldi	r26, 0x38	; 56
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e8 e3       	ldi	r30, 0x38	; 56
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	87 7f       	andi	r24, 0xF7	; 247
    1a80:	8c 93       	st	X, r24

}
    1a82:	0f 90       	pop	r0
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <LCD_VidWriteCommand4>:

void LCD_VidWriteCommand4(uint8 u8Command) {
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	0f 92       	push	r0
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	89 83       	std	Y+1, r24	; 0x01

	CLRBIT(PORTB, 1);
    1a96:	a8 e3       	ldi	r26, 0x38	; 56
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	e8 e3       	ldi	r30, 0x38	; 56
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	8d 7f       	andi	r24, 0xFD	; 253
    1aa2:	8c 93       	st	X, r24

	CLRBIT(PORTB, 2);
    1aa4:	a8 e3       	ldi	r26, 0x38	; 56
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e8 e3       	ldi	r30, 0x38	; 56
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	8b 7f       	andi	r24, 0xFB	; 251
    1ab0:	8c 93       	st	X, r24

	ASS_HIGH_NIPPLE(PORTA, GET_HIGH_NIPPLE(u8Command));
    1ab2:	ab e3       	ldi	r26, 0x3B	; 59
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	82 95       	swap	r24
    1aba:	8f 70       	andi	r24, 0x0F	; 15
    1abc:	88 2f       	mov	r24, r24
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	82 95       	swap	r24
    1ac2:	92 95       	swap	r25
    1ac4:	90 7f       	andi	r25, 0xF0	; 240
    1ac6:	98 27       	eor	r25, r24
    1ac8:	80 7f       	andi	r24, 0xF0	; 240
    1aca:	98 27       	eor	r25, r24
    1acc:	98 2f       	mov	r25, r24
    1ace:	eb e3       	ldi	r30, 0x3B	; 59
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	8f 70       	andi	r24, 0x0F	; 15
    1ad6:	89 2b       	or	r24, r25
    1ad8:	8c 93       	st	X, r24
//latch E=1 delay E=0
	SETBIT(PORTB, 3);
    1ada:	a8 e3       	ldi	r26, 0x38	; 56
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e8 e3       	ldi	r30, 0x38	; 56
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	88 60       	ori	r24, 0x08	; 8
    1ae6:	8c 93       	st	X, r24
	delay_ms(5);
    1ae8:	65 e0       	ldi	r22, 0x05	; 5
    1aea:	70 e0       	ldi	r23, 0x00	; 0
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <delay_ms>
	CLRBIT(PORTB, 3);
    1af4:	a8 e3       	ldi	r26, 0x38	; 56
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e8 e3       	ldi	r30, 0x38	; 56
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	87 7f       	andi	r24, 0xF7	; 247
    1b00:	8c 93       	st	X, r24

	ASS_HIGH_NIPPLE(PORTA, GET_LOW_NIPPLE(u8Command));
    1b02:	ab e3       	ldi	r26, 0x3B	; 59
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	88 2f       	mov	r24, r24
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	82 95       	swap	r24
    1b0e:	92 95       	swap	r25
    1b10:	90 7f       	andi	r25, 0xF0	; 240
    1b12:	98 27       	eor	r25, r24
    1b14:	80 7f       	andi	r24, 0xF0	; 240
    1b16:	98 27       	eor	r25, r24
    1b18:	98 2f       	mov	r25, r24
    1b1a:	eb e3       	ldi	r30, 0x3B	; 59
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	8f 70       	andi	r24, 0x0F	; 15
    1b22:	89 2b       	or	r24, r25
    1b24:	8c 93       	st	X, r24
//latch E=1 delay E=0
	SETBIT(PORTB, 3);
    1b26:	a8 e3       	ldi	r26, 0x38	; 56
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e8 e3       	ldi	r30, 0x38	; 56
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	88 60       	ori	r24, 0x08	; 8
    1b32:	8c 93       	st	X, r24
	delay_ms(5);
    1b34:	65 e0       	ldi	r22, 0x05	; 5
    1b36:	70 e0       	ldi	r23, 0x00	; 0
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <delay_ms>
	CLRBIT(PORTB, 3);
    1b40:	a8 e3       	ldi	r26, 0x38	; 56
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e8 e3       	ldi	r30, 0x38	; 56
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	87 7f       	andi	r24, 0xF7	; 247
    1b4c:	8c 93       	st	X, r24

}
    1b4e:	0f 90       	pop	r0
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <LCD_String4>:

void LCD_String4(char* arr) {
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <LCD_String4+0xa>
    1b60:	0f 92       	push	r0
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	9b 83       	std	Y+3, r25	; 0x03
    1b68:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for (i = 0; i < strlen(arr); i++)/* Send each char of string till the NULL */
    1b6a:	19 82       	std	Y+1, r1	; 0x01
    1b6c:	0e c0       	rjmp	.+28     	; 0x1b8a <LCD_String4+0x34>
	{
		LCD_VidWriteData4(arr[i]);
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	9b 81       	ldd	r25, Y+3	; 0x03
    1b78:	fc 01       	movw	r30, r24
    1b7a:	e2 0f       	add	r30, r18
    1b7c:	f3 1f       	adc	r31, r19
    1b7e:	80 81       	ld	r24, Z
    1b80:	0e 94 df 0c 	call	0x19be	; 0x19be <LCD_VidWriteData4>

}

void LCD_String4(char* arr) {
	uint8 i;
	for (i = 0; i < strlen(arr); i++)/* Send each char of string till the NULL */
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	8f 5f       	subi	r24, 0xFF	; 255
    1b88:	89 83       	std	Y+1, r24	; 0x01
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	08 2f       	mov	r16, r24
    1b8e:	10 e0       	ldi	r17, 0x00	; 0
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	9b 81       	ldd	r25, Y+3	; 0x03
    1b94:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <strlen>
    1b98:	08 17       	cp	r16, r24
    1b9a:	19 07       	cpc	r17, r25
    1b9c:	40 f3       	brcs	.-48     	; 0x1b6e <LCD_String4+0x18>
	{
		LCD_VidWriteData4(arr[i]);
	}
}
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	1f 91       	pop	r17
    1baa:	0f 91       	pop	r16
    1bac:	08 95       	ret

00001bae <LCD_Goto_row_coulmn4>:

void LCD_Goto_row_coulmn4(uint8 y, uint8 x) {
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <LCD_Goto_row_coulmn4+0x6>
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <LCD_Goto_row_coulmn4+0x8>
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <LCD_Goto_row_coulmn4+0xa>
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
    1bbe:	6e 83       	std	Y+6, r22	; 0x06
	uint8 firstcharAdr[] = { 0x80, 0xC0, 0x94, 0xD4 };
    1bc0:	80 e8       	ldi	r24, 0x80	; 128
    1bc2:	89 83       	std	Y+1, r24	; 0x01
    1bc4:	80 ec       	ldi	r24, 0xC0	; 192
    1bc6:	8a 83       	std	Y+2, r24	; 0x02
    1bc8:	84 e9       	ldi	r24, 0x94	; 148
    1bca:	8b 83       	std	Y+3, r24	; 0x03
    1bcc:	84 ed       	ldi	r24, 0xD4	; 212
    1bce:	8c 83       	std	Y+4, r24	; 0x04
	LCD_VidWriteCommand4(firstcharAdr[y] + x);
    1bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	01 96       	adiw	r24, 0x01	; 1
    1bda:	fc 01       	movw	r30, r24
    1bdc:	e2 0f       	add	r30, r18
    1bde:	f3 1f       	adc	r31, r19
    1be0:	90 81       	ld	r25, Z
    1be2:	8e 81       	ldd	r24, Y+6	; 0x06
    1be4:	89 0f       	add	r24, r25
    1be6:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LCD_VidWriteCommand4>
	delay_ms(1);
    1bea:	61 e0       	ldi	r22, 0x01	; 1
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <delay_ms>
}
    1bf6:	26 96       	adiw	r28, 0x06	; 6
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <LCD_Goto_coulmn_row4>:

void LCD_Goto_coulmn_row4(uint8 x, uint8 y) {
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <LCD_Goto_coulmn_row4+0x6>
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <LCD_Goto_coulmn_row4+0x8>
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <LCD_Goto_coulmn_row4+0xa>
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	8d 83       	std	Y+5, r24	; 0x05
    1c18:	6e 83       	std	Y+6, r22	; 0x06
	uint8 firstcharAdr[] = { 0x80, 0xC0, 0x94, 0xD4 };
    1c1a:	80 e8       	ldi	r24, 0x80	; 128
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	80 ec       	ldi	r24, 0xC0	; 192
    1c20:	8a 83       	std	Y+2, r24	; 0x02
    1c22:	84 e9       	ldi	r24, 0x94	; 148
    1c24:	8b 83       	std	Y+3, r24	; 0x03
    1c26:	84 ed       	ldi	r24, 0xD4	; 212
    1c28:	8c 83       	std	Y+4, r24	; 0x04
	LCD_VidWriteCommand4(firstcharAdr[y] + x);
    1c2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c2c:	28 2f       	mov	r18, r24
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	ce 01       	movw	r24, r28
    1c32:	01 96       	adiw	r24, 0x01	; 1
    1c34:	fc 01       	movw	r30, r24
    1c36:	e2 0f       	add	r30, r18
    1c38:	f3 1f       	adc	r31, r19
    1c3a:	90 81       	ld	r25, Z
    1c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3e:	89 0f       	add	r24, r25
    1c40:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LCD_VidWriteCommand4>
	delay_ms(1);
    1c44:	61 e0       	ldi	r22, 0x01	; 1
    1c46:	70 e0       	ldi	r23, 0x00	; 0
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <delay_ms>
}
    1c50:	26 96       	adiw	r28, 0x06	; 6
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	de bf       	out	0x3e, r29	; 62
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	cd bf       	out	0x3d, r28	; 61
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <LCD_vidInit4>:

void LCD_vidInit4(void) {
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62

	SET_HIGH_NIPPLE(DDRA);
    1c6a:	aa e3       	ldi	r26, 0x3A	; 58
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	ea e3       	ldi	r30, 0x3A	; 58
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	80 6f       	ori	r24, 0xF0	; 240
    1c76:	8c 93       	st	X, r24
	SET_LOW_NIPPLE(DDRB);
    1c78:	a7 e3       	ldi	r26, 0x37	; 55
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e7 e3       	ldi	r30, 0x37	; 55
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	8f 60       	ori	r24, 0x0F	; 15
    1c84:	8c 93       	st	X, r24

//delay(>30)
	delay_ms(40);
    1c86:	68 e2       	ldi	r22, 0x28	; 40
    1c88:	70 e0       	ldi	r23, 0x00	; 0
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <delay_ms>
//0x3c function set N=1,F=1
	LCD_VidWriteCommand4(0x02);
    1c92:	82 e0       	ldi	r24, 0x02	; 2
    1c94:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LCD_VidWriteCommand4>
//delay(>30)
	delay_ms(5);
    1c98:	65 e0       	ldi	r22, 0x05	; 5
    1c9a:	70 e0       	ldi	r23, 0x00	; 0
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <delay_ms>
	LCD_VidWriteCommand4(0x28);
    1ca4:	88 e2       	ldi	r24, 0x28	; 40
    1ca6:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LCD_VidWriteCommand4>
//delay(>30)
	delay_ms(5);
    1caa:	65 e0       	ldi	r22, 0x05	; 5
    1cac:	70 e0       	ldi	r23, 0x00	; 0
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <delay_ms>
//0x0c D=1 c=0 b=1
	LCD_VidWriteCommand4(0x0C);
    1cb6:	8c e0       	ldi	r24, 0x0C	; 12
    1cb8:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LCD_VidWriteCommand4>
//delay(>30)
	delay_ms(5);
    1cbc:	65 e0       	ldi	r22, 0x05	; 5
    1cbe:	70 e0       	ldi	r23, 0x00	; 0
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <delay_ms>
//clr screen 0x01
	LCD_VidWriteCommand4(0x01);
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LCD_VidWriteCommand4>
//delay(>135)
	delay_ms(10);
    1cce:	6a e0       	ldi	r22, 0x0A	; 10
    1cd0:	70 e0       	ldi	r23, 0x00	; 0
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <delay_ms>

}
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <main>:
// Network session key (LoRaWAN 1.0):
unsigned char NetworkSessionKey[16] = {0xbf, 0x36, 0xd1, 0xfa, 0xb8, 0x9c, 0x84, 0x1d, 0x74, 0xae, 0x03, 0xc3, 0xa0, 0x58, 0xdc, 0xde};

int main(void)

{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	e4 97       	sbiw	r28, 0x34	; 52
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit;
    // Initialize UART
	UART_VIDint;

    // Initialize LoRaWAN
    WiMOD_LoRaWAN_Init();
    1cf4:	0e 94 ae 09 	call	0x135c	; 0x135c <WiMOD_LoRaWAN_Init>

    // Activate the device using ABP (Activation by Personalization)
    if (WiMOD_LoRaWAN_ABP_Activate(DeviceAddress, NetworkSessionKey, ApplicationSessionKey) != LORAWAN_STATUS_OK) {
    1cf8:	8c ee       	ldi	r24, 0xEC	; 236
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	31 e0       	ldi	r19, 0x01	; 1
    1d00:	40 ef       	ldi	r20, 0xF0	; 240
    1d02:	50 e0       	ldi	r21, 0x00	; 0
    1d04:	b9 01       	movw	r22, r18
    1d06:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <WiMOD_LoRaWAN_ABP_Activate>
    1d0a:	00 97       	sbiw	r24, 0x00	; 0
    1d0c:	09 f0       	breq	.+2      	; 0x1d10 <main+0x30>
    1d0e:	ff cf       	rjmp	.-2      	; 0x1d0e <main+0x2e>
        // Handle activation error
        while (1);  // Stay here if activation fails
    }

    uint8 port = 1;  // Data port
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	8a 83       	std	Y+2, r24	; 0x02
    uint8 counter = 0;
    1d14:	19 82       	std	Y+1, r1	; 0x01
    char data[50];

    while (1) {
        // Prepare data to send
        sprintf(data, "Abdelhameed Nayel Abdelhameed %d", counter);
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	28 2f       	mov	r18, r24
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <main+0x3e>
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <main+0x40>
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <main+0x42>
    1d22:	ed b7       	in	r30, 0x3d	; 61
    1d24:	fe b7       	in	r31, 0x3e	; 62
    1d26:	31 96       	adiw	r30, 0x01	; 1
    1d28:	ce 01       	movw	r24, r28
    1d2a:	03 96       	adiw	r24, 0x03	; 3
    1d2c:	91 83       	std	Z+1, r25	; 0x01
    1d2e:	80 83       	st	Z, r24
    1d30:	83 ec       	ldi	r24, 0xC3	; 195
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	93 83       	std	Z+3, r25	; 0x03
    1d36:	82 83       	std	Z+2, r24	; 0x02
    1d38:	35 83       	std	Z+5, r19	; 0x05
    1d3a:	24 83       	std	Z+4, r18	; 0x04
    1d3c:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <sprintf>
    1d40:	8d b7       	in	r24, 0x3d	; 61
    1d42:	9e b7       	in	r25, 0x3e	; 62
    1d44:	06 96       	adiw	r24, 0x06	; 6
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	9e bf       	out	0x3e, r25	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	8d bf       	out	0x3d, r24	; 61

        // Send the data as unconfirmed radio data
        if (WiMOD_LoRaWAN_SendURadioData(port, (uint8*)data, strlen(data)) != LORAWAN_STATUS_OK) {
    1d50:	ce 01       	movw	r24, r28
    1d52:	03 96       	adiw	r24, 0x03	; 3
    1d54:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <strlen>
    1d58:	ac 01       	movw	r20, r24
    1d5a:	9e 01       	movw	r18, r28
    1d5c:	2d 5f       	subi	r18, 0xFD	; 253
    1d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	b9 01       	movw	r22, r18
    1d64:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <WiMOD_LoRaWAN_SendURadioData>
    1d68:	00 97       	sbiw	r24, 0x00	; 0
    1d6a:	09 f0       	breq	.+2      	; 0x1d6e <main+0x8e>
    1d6c:	ff cf       	rjmp	.-2      	; 0x1d6c <main+0x8c>
            // Handle transmission error
            while (1);  // Stay here if transmission fails
        }

        // Increment the counter
        counter++;
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	8f 5f       	subi	r24, 0xFF	; 255
    1d72:	89 83       	std	Y+1, r24	; 0x01

        // Delay before sending the next message
        delay_ms(1000);
    1d74:	68 ee       	ldi	r22, 0xE8	; 232
    1d76:	73 e0       	ldi	r23, 0x03	; 3
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <delay_ms>
    1d80:	ca cf       	rjmp	.-108    	; 0x1d16 <main+0x36>

00001d82 <__mulsi3>:
    1d82:	62 9f       	mul	r22, r18
    1d84:	d0 01       	movw	r26, r0
    1d86:	73 9f       	mul	r23, r19
    1d88:	f0 01       	movw	r30, r0
    1d8a:	82 9f       	mul	r24, r18
    1d8c:	e0 0d       	add	r30, r0
    1d8e:	f1 1d       	adc	r31, r1
    1d90:	64 9f       	mul	r22, r20
    1d92:	e0 0d       	add	r30, r0
    1d94:	f1 1d       	adc	r31, r1
    1d96:	92 9f       	mul	r25, r18
    1d98:	f0 0d       	add	r31, r0
    1d9a:	83 9f       	mul	r24, r19
    1d9c:	f0 0d       	add	r31, r0
    1d9e:	74 9f       	mul	r23, r20
    1da0:	f0 0d       	add	r31, r0
    1da2:	65 9f       	mul	r22, r21
    1da4:	f0 0d       	add	r31, r0
    1da6:	99 27       	eor	r25, r25
    1da8:	72 9f       	mul	r23, r18
    1daa:	b0 0d       	add	r27, r0
    1dac:	e1 1d       	adc	r30, r1
    1dae:	f9 1f       	adc	r31, r25
    1db0:	63 9f       	mul	r22, r19
    1db2:	b0 0d       	add	r27, r0
    1db4:	e1 1d       	adc	r30, r1
    1db6:	f9 1f       	adc	r31, r25
    1db8:	bd 01       	movw	r22, r26
    1dba:	cf 01       	movw	r24, r30
    1dbc:	11 24       	eor	r1, r1
    1dbe:	08 95       	ret

00001dc0 <__udivmodsi4>:
    1dc0:	a1 e2       	ldi	r26, 0x21	; 33
    1dc2:	1a 2e       	mov	r1, r26
    1dc4:	aa 1b       	sub	r26, r26
    1dc6:	bb 1b       	sub	r27, r27
    1dc8:	fd 01       	movw	r30, r26
    1dca:	0d c0       	rjmp	.+26     	; 0x1de6 <__udivmodsi4_ep>

00001dcc <__udivmodsi4_loop>:
    1dcc:	aa 1f       	adc	r26, r26
    1dce:	bb 1f       	adc	r27, r27
    1dd0:	ee 1f       	adc	r30, r30
    1dd2:	ff 1f       	adc	r31, r31
    1dd4:	a2 17       	cp	r26, r18
    1dd6:	b3 07       	cpc	r27, r19
    1dd8:	e4 07       	cpc	r30, r20
    1dda:	f5 07       	cpc	r31, r21
    1ddc:	20 f0       	brcs	.+8      	; 0x1de6 <__udivmodsi4_ep>
    1dde:	a2 1b       	sub	r26, r18
    1de0:	b3 0b       	sbc	r27, r19
    1de2:	e4 0b       	sbc	r30, r20
    1de4:	f5 0b       	sbc	r31, r21

00001de6 <__udivmodsi4_ep>:
    1de6:	66 1f       	adc	r22, r22
    1de8:	77 1f       	adc	r23, r23
    1dea:	88 1f       	adc	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	1a 94       	dec	r1
    1df0:	69 f7       	brne	.-38     	; 0x1dcc <__udivmodsi4_loop>
    1df2:	60 95       	com	r22
    1df4:	70 95       	com	r23
    1df6:	80 95       	com	r24
    1df8:	90 95       	com	r25
    1dfa:	9b 01       	movw	r18, r22
    1dfc:	ac 01       	movw	r20, r24
    1dfe:	bd 01       	movw	r22, r26
    1e00:	cf 01       	movw	r24, r30
    1e02:	08 95       	ret

00001e04 <memcpy>:
    1e04:	fb 01       	movw	r30, r22
    1e06:	dc 01       	movw	r26, r24
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <memcpy+0xa>
    1e0a:	01 90       	ld	r0, Z+
    1e0c:	0d 92       	st	X+, r0
    1e0e:	41 50       	subi	r20, 0x01	; 1
    1e10:	50 40       	sbci	r21, 0x00	; 0
    1e12:	d8 f7       	brcc	.-10     	; 0x1e0a <memcpy+0x6>
    1e14:	08 95       	ret

00001e16 <strlen>:
    1e16:	fc 01       	movw	r30, r24
    1e18:	01 90       	ld	r0, Z+
    1e1a:	00 20       	and	r0, r0
    1e1c:	e9 f7       	brne	.-6      	; 0x1e18 <strlen+0x2>
    1e1e:	80 95       	com	r24
    1e20:	90 95       	com	r25
    1e22:	8e 0f       	add	r24, r30
    1e24:	9f 1f       	adc	r25, r31
    1e26:	08 95       	ret

00001e28 <itoa>:
    1e28:	fb 01       	movw	r30, r22
    1e2a:	9f 01       	movw	r18, r30
    1e2c:	e8 94       	clt
    1e2e:	42 30       	cpi	r20, 0x02	; 2
    1e30:	c4 f0       	brlt	.+48     	; 0x1e62 <itoa+0x3a>
    1e32:	45 32       	cpi	r20, 0x25	; 37
    1e34:	b4 f4       	brge	.+44     	; 0x1e62 <itoa+0x3a>
    1e36:	4a 30       	cpi	r20, 0x0A	; 10
    1e38:	29 f4       	brne	.+10     	; 0x1e44 <itoa+0x1c>
    1e3a:	97 fb       	bst	r25, 7
    1e3c:	1e f4       	brtc	.+6      	; 0x1e44 <itoa+0x1c>
    1e3e:	90 95       	com	r25
    1e40:	81 95       	neg	r24
    1e42:	9f 4f       	sbci	r25, 0xFF	; 255
    1e44:	64 2f       	mov	r22, r20
    1e46:	77 27       	eor	r23, r23
    1e48:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__udivmodhi4>
    1e4c:	80 5d       	subi	r24, 0xD0	; 208
    1e4e:	8a 33       	cpi	r24, 0x3A	; 58
    1e50:	0c f0       	brlt	.+2      	; 0x1e54 <itoa+0x2c>
    1e52:	89 5d       	subi	r24, 0xD9	; 217
    1e54:	81 93       	st	Z+, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	a1 f7       	brne	.-24     	; 0x1e44 <itoa+0x1c>
    1e5c:	16 f4       	brtc	.+4      	; 0x1e62 <itoa+0x3a>
    1e5e:	5d e2       	ldi	r21, 0x2D	; 45
    1e60:	51 93       	st	Z+, r21
    1e62:	10 82       	st	Z, r1
    1e64:	c9 01       	movw	r24, r18
    1e66:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <strrev>

00001e6a <sprintf>:
    1e6a:	ae e0       	ldi	r26, 0x0E	; 14
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	eb e3       	ldi	r30, 0x3B	; 59
    1e70:	ff e0       	ldi	r31, 0x0F	; 15
    1e72:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__prologue_saves__+0x1c>
    1e76:	0d 89       	ldd	r16, Y+21	; 0x15
    1e78:	1e 89       	ldd	r17, Y+22	; 0x16
    1e7a:	86 e0       	ldi	r24, 0x06	; 6
    1e7c:	8c 83       	std	Y+4, r24	; 0x04
    1e7e:	1a 83       	std	Y+2, r17	; 0x02
    1e80:	09 83       	std	Y+1, r16	; 0x01
    1e82:	8f ef       	ldi	r24, 0xFF	; 255
    1e84:	9f e7       	ldi	r25, 0x7F	; 127
    1e86:	9e 83       	std	Y+6, r25	; 0x06
    1e88:	8d 83       	std	Y+5, r24	; 0x05
    1e8a:	9e 01       	movw	r18, r28
    1e8c:	27 5e       	subi	r18, 0xE7	; 231
    1e8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e90:	ce 01       	movw	r24, r28
    1e92:	01 96       	adiw	r24, 0x01	; 1
    1e94:	6f 89       	ldd	r22, Y+23	; 0x17
    1e96:	78 8d       	ldd	r23, Y+24	; 0x18
    1e98:	a9 01       	movw	r20, r18
    1e9a:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <vfprintf>
    1e9e:	2f 81       	ldd	r18, Y+7	; 0x07
    1ea0:	38 85       	ldd	r19, Y+8	; 0x08
    1ea2:	02 0f       	add	r16, r18
    1ea4:	13 1f       	adc	r17, r19
    1ea6:	f8 01       	movw	r30, r16
    1ea8:	10 82       	st	Z, r1
    1eaa:	2e 96       	adiw	r28, 0x0e	; 14
    1eac:	e4 e0       	ldi	r30, 0x04	; 4
    1eae:	0c 94 24 12 	jmp	0x2448	; 0x2448 <__epilogue_restores__+0x1c>

00001eb2 <vfprintf>:
    1eb2:	ab e0       	ldi	r26, 0x0B	; 11
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	ef e5       	ldi	r30, 0x5F	; 95
    1eb8:	ff e0       	ldi	r31, 0x0F	; 15
    1eba:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <__prologue_saves__>
    1ebe:	3c 01       	movw	r6, r24
    1ec0:	2b 01       	movw	r4, r22
    1ec2:	5a 01       	movw	r10, r20
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	17 82       	std	Z+7, r1	; 0x07
    1ec8:	16 82       	std	Z+6, r1	; 0x06
    1eca:	83 81       	ldd	r24, Z+3	; 0x03
    1ecc:	81 fd       	sbrc	r24, 1
    1ece:	03 c0       	rjmp	.+6      	; 0x1ed6 <vfprintf+0x24>
    1ed0:	6f ef       	ldi	r22, 0xFF	; 255
    1ed2:	7f ef       	ldi	r23, 0xFF	; 255
    1ed4:	c6 c1       	rjmp	.+908    	; 0x2262 <vfprintf+0x3b0>
    1ed6:	9a e0       	ldi	r25, 0x0A	; 10
    1ed8:	89 2e       	mov	r8, r25
    1eda:	1e 01       	movw	r2, r28
    1edc:	08 94       	sec
    1ede:	21 1c       	adc	r2, r1
    1ee0:	31 1c       	adc	r3, r1
    1ee2:	f3 01       	movw	r30, r6
    1ee4:	23 81       	ldd	r18, Z+3	; 0x03
    1ee6:	f2 01       	movw	r30, r4
    1ee8:	23 fd       	sbrc	r18, 3
    1eea:	85 91       	lpm	r24, Z+
    1eec:	23 ff       	sbrs	r18, 3
    1eee:	81 91       	ld	r24, Z+
    1ef0:	2f 01       	movw	r4, r30
    1ef2:	88 23       	and	r24, r24
    1ef4:	09 f4       	brne	.+2      	; 0x1ef8 <vfprintf+0x46>
    1ef6:	b2 c1       	rjmp	.+868    	; 0x225c <vfprintf+0x3aa>
    1ef8:	85 32       	cpi	r24, 0x25	; 37
    1efa:	39 f4       	brne	.+14     	; 0x1f0a <vfprintf+0x58>
    1efc:	23 fd       	sbrc	r18, 3
    1efe:	85 91       	lpm	r24, Z+
    1f00:	23 ff       	sbrs	r18, 3
    1f02:	81 91       	ld	r24, Z+
    1f04:	2f 01       	movw	r4, r30
    1f06:	85 32       	cpi	r24, 0x25	; 37
    1f08:	29 f4       	brne	.+10     	; 0x1f14 <vfprintf+0x62>
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	b3 01       	movw	r22, r6
    1f0e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <fputc>
    1f12:	e7 cf       	rjmp	.-50     	; 0x1ee2 <vfprintf+0x30>
    1f14:	98 2f       	mov	r25, r24
    1f16:	ff 24       	eor	r15, r15
    1f18:	ee 24       	eor	r14, r14
    1f1a:	99 24       	eor	r9, r9
    1f1c:	ff e1       	ldi	r31, 0x1F	; 31
    1f1e:	ff 15       	cp	r31, r15
    1f20:	d0 f0       	brcs	.+52     	; 0x1f56 <vfprintf+0xa4>
    1f22:	9b 32       	cpi	r25, 0x2B	; 43
    1f24:	69 f0       	breq	.+26     	; 0x1f40 <vfprintf+0x8e>
    1f26:	9c 32       	cpi	r25, 0x2C	; 44
    1f28:	28 f4       	brcc	.+10     	; 0x1f34 <vfprintf+0x82>
    1f2a:	90 32       	cpi	r25, 0x20	; 32
    1f2c:	59 f0       	breq	.+22     	; 0x1f44 <vfprintf+0x92>
    1f2e:	93 32       	cpi	r25, 0x23	; 35
    1f30:	91 f4       	brne	.+36     	; 0x1f56 <vfprintf+0xa4>
    1f32:	0e c0       	rjmp	.+28     	; 0x1f50 <vfprintf+0x9e>
    1f34:	9d 32       	cpi	r25, 0x2D	; 45
    1f36:	49 f0       	breq	.+18     	; 0x1f4a <vfprintf+0x98>
    1f38:	90 33       	cpi	r25, 0x30	; 48
    1f3a:	69 f4       	brne	.+26     	; 0x1f56 <vfprintf+0xa4>
    1f3c:	41 e0       	ldi	r20, 0x01	; 1
    1f3e:	24 c0       	rjmp	.+72     	; 0x1f88 <vfprintf+0xd6>
    1f40:	52 e0       	ldi	r21, 0x02	; 2
    1f42:	f5 2a       	or	r15, r21
    1f44:	84 e0       	ldi	r24, 0x04	; 4
    1f46:	f8 2a       	or	r15, r24
    1f48:	28 c0       	rjmp	.+80     	; 0x1f9a <vfprintf+0xe8>
    1f4a:	98 e0       	ldi	r25, 0x08	; 8
    1f4c:	f9 2a       	or	r15, r25
    1f4e:	25 c0       	rjmp	.+74     	; 0x1f9a <vfprintf+0xe8>
    1f50:	e0 e1       	ldi	r30, 0x10	; 16
    1f52:	fe 2a       	or	r15, r30
    1f54:	22 c0       	rjmp	.+68     	; 0x1f9a <vfprintf+0xe8>
    1f56:	f7 fc       	sbrc	r15, 7
    1f58:	29 c0       	rjmp	.+82     	; 0x1fac <vfprintf+0xfa>
    1f5a:	89 2f       	mov	r24, r25
    1f5c:	80 53       	subi	r24, 0x30	; 48
    1f5e:	8a 30       	cpi	r24, 0x0A	; 10
    1f60:	70 f4       	brcc	.+28     	; 0x1f7e <vfprintf+0xcc>
    1f62:	f6 fe       	sbrs	r15, 6
    1f64:	05 c0       	rjmp	.+10     	; 0x1f70 <vfprintf+0xbe>
    1f66:	98 9c       	mul	r9, r8
    1f68:	90 2c       	mov	r9, r0
    1f6a:	11 24       	eor	r1, r1
    1f6c:	98 0e       	add	r9, r24
    1f6e:	15 c0       	rjmp	.+42     	; 0x1f9a <vfprintf+0xe8>
    1f70:	e8 9c       	mul	r14, r8
    1f72:	e0 2c       	mov	r14, r0
    1f74:	11 24       	eor	r1, r1
    1f76:	e8 0e       	add	r14, r24
    1f78:	f0 e2       	ldi	r31, 0x20	; 32
    1f7a:	ff 2a       	or	r15, r31
    1f7c:	0e c0       	rjmp	.+28     	; 0x1f9a <vfprintf+0xe8>
    1f7e:	9e 32       	cpi	r25, 0x2E	; 46
    1f80:	29 f4       	brne	.+10     	; 0x1f8c <vfprintf+0xda>
    1f82:	f6 fc       	sbrc	r15, 6
    1f84:	6b c1       	rjmp	.+726    	; 0x225c <vfprintf+0x3aa>
    1f86:	40 e4       	ldi	r20, 0x40	; 64
    1f88:	f4 2a       	or	r15, r20
    1f8a:	07 c0       	rjmp	.+14     	; 0x1f9a <vfprintf+0xe8>
    1f8c:	9c 36       	cpi	r25, 0x6C	; 108
    1f8e:	19 f4       	brne	.+6      	; 0x1f96 <vfprintf+0xe4>
    1f90:	50 e8       	ldi	r21, 0x80	; 128
    1f92:	f5 2a       	or	r15, r21
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <vfprintf+0xe8>
    1f96:	98 36       	cpi	r25, 0x68	; 104
    1f98:	49 f4       	brne	.+18     	; 0x1fac <vfprintf+0xfa>
    1f9a:	f2 01       	movw	r30, r4
    1f9c:	23 fd       	sbrc	r18, 3
    1f9e:	95 91       	lpm	r25, Z+
    1fa0:	23 ff       	sbrs	r18, 3
    1fa2:	91 91       	ld	r25, Z+
    1fa4:	2f 01       	movw	r4, r30
    1fa6:	99 23       	and	r25, r25
    1fa8:	09 f0       	breq	.+2      	; 0x1fac <vfprintf+0xfa>
    1faa:	b8 cf       	rjmp	.-144    	; 0x1f1c <vfprintf+0x6a>
    1fac:	89 2f       	mov	r24, r25
    1fae:	85 54       	subi	r24, 0x45	; 69
    1fb0:	83 30       	cpi	r24, 0x03	; 3
    1fb2:	18 f0       	brcs	.+6      	; 0x1fba <vfprintf+0x108>
    1fb4:	80 52       	subi	r24, 0x20	; 32
    1fb6:	83 30       	cpi	r24, 0x03	; 3
    1fb8:	38 f4       	brcc	.+14     	; 0x1fc8 <vfprintf+0x116>
    1fba:	44 e0       	ldi	r20, 0x04	; 4
    1fbc:	50 e0       	ldi	r21, 0x00	; 0
    1fbe:	a4 0e       	add	r10, r20
    1fc0:	b5 1e       	adc	r11, r21
    1fc2:	5f e3       	ldi	r21, 0x3F	; 63
    1fc4:	59 83       	std	Y+1, r21	; 0x01
    1fc6:	0f c0       	rjmp	.+30     	; 0x1fe6 <vfprintf+0x134>
    1fc8:	93 36       	cpi	r25, 0x63	; 99
    1fca:	31 f0       	breq	.+12     	; 0x1fd8 <vfprintf+0x126>
    1fcc:	93 37       	cpi	r25, 0x73	; 115
    1fce:	79 f0       	breq	.+30     	; 0x1fee <vfprintf+0x13c>
    1fd0:	93 35       	cpi	r25, 0x53	; 83
    1fd2:	09 f0       	breq	.+2      	; 0x1fd6 <vfprintf+0x124>
    1fd4:	56 c0       	rjmp	.+172    	; 0x2082 <vfprintf+0x1d0>
    1fd6:	20 c0       	rjmp	.+64     	; 0x2018 <vfprintf+0x166>
    1fd8:	f5 01       	movw	r30, r10
    1fda:	80 81       	ld	r24, Z
    1fdc:	89 83       	std	Y+1, r24	; 0x01
    1fde:	42 e0       	ldi	r20, 0x02	; 2
    1fe0:	50 e0       	ldi	r21, 0x00	; 0
    1fe2:	a4 0e       	add	r10, r20
    1fe4:	b5 1e       	adc	r11, r21
    1fe6:	61 01       	movw	r12, r2
    1fe8:	01 e0       	ldi	r16, 0x01	; 1
    1fea:	10 e0       	ldi	r17, 0x00	; 0
    1fec:	12 c0       	rjmp	.+36     	; 0x2012 <vfprintf+0x160>
    1fee:	f5 01       	movw	r30, r10
    1ff0:	c0 80       	ld	r12, Z
    1ff2:	d1 80       	ldd	r13, Z+1	; 0x01
    1ff4:	f6 fc       	sbrc	r15, 6
    1ff6:	03 c0       	rjmp	.+6      	; 0x1ffe <vfprintf+0x14c>
    1ff8:	6f ef       	ldi	r22, 0xFF	; 255
    1ffa:	7f ef       	ldi	r23, 0xFF	; 255
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <vfprintf+0x150>
    1ffe:	69 2d       	mov	r22, r9
    2000:	70 e0       	ldi	r23, 0x00	; 0
    2002:	42 e0       	ldi	r20, 0x02	; 2
    2004:	50 e0       	ldi	r21, 0x00	; 0
    2006:	a4 0e       	add	r10, r20
    2008:	b5 1e       	adc	r11, r21
    200a:	c6 01       	movw	r24, r12
    200c:	0e 94 41 11 	call	0x2282	; 0x2282 <strnlen>
    2010:	8c 01       	movw	r16, r24
    2012:	5f e7       	ldi	r21, 0x7F	; 127
    2014:	f5 22       	and	r15, r21
    2016:	14 c0       	rjmp	.+40     	; 0x2040 <vfprintf+0x18e>
    2018:	f5 01       	movw	r30, r10
    201a:	c0 80       	ld	r12, Z
    201c:	d1 80       	ldd	r13, Z+1	; 0x01
    201e:	f6 fc       	sbrc	r15, 6
    2020:	03 c0       	rjmp	.+6      	; 0x2028 <vfprintf+0x176>
    2022:	6f ef       	ldi	r22, 0xFF	; 255
    2024:	7f ef       	ldi	r23, 0xFF	; 255
    2026:	02 c0       	rjmp	.+4      	; 0x202c <vfprintf+0x17a>
    2028:	69 2d       	mov	r22, r9
    202a:	70 e0       	ldi	r23, 0x00	; 0
    202c:	42 e0       	ldi	r20, 0x02	; 2
    202e:	50 e0       	ldi	r21, 0x00	; 0
    2030:	a4 0e       	add	r10, r20
    2032:	b5 1e       	adc	r11, r21
    2034:	c6 01       	movw	r24, r12
    2036:	0e 94 36 11 	call	0x226c	; 0x226c <strnlen_P>
    203a:	8c 01       	movw	r16, r24
    203c:	50 e8       	ldi	r21, 0x80	; 128
    203e:	f5 2a       	or	r15, r21
    2040:	f3 fe       	sbrs	r15, 3
    2042:	07 c0       	rjmp	.+14     	; 0x2052 <vfprintf+0x1a0>
    2044:	1a c0       	rjmp	.+52     	; 0x207a <vfprintf+0x1c8>
    2046:	80 e2       	ldi	r24, 0x20	; 32
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	b3 01       	movw	r22, r6
    204c:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <fputc>
    2050:	ea 94       	dec	r14
    2052:	8e 2d       	mov	r24, r14
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	08 17       	cp	r16, r24
    2058:	19 07       	cpc	r17, r25
    205a:	a8 f3       	brcs	.-22     	; 0x2046 <vfprintf+0x194>
    205c:	0e c0       	rjmp	.+28     	; 0x207a <vfprintf+0x1c8>
    205e:	f6 01       	movw	r30, r12
    2060:	f7 fc       	sbrc	r15, 7
    2062:	85 91       	lpm	r24, Z+
    2064:	f7 fe       	sbrs	r15, 7
    2066:	81 91       	ld	r24, Z+
    2068:	6f 01       	movw	r12, r30
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	b3 01       	movw	r22, r6
    206e:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <fputc>
    2072:	e1 10       	cpse	r14, r1
    2074:	ea 94       	dec	r14
    2076:	01 50       	subi	r16, 0x01	; 1
    2078:	10 40       	sbci	r17, 0x00	; 0
    207a:	01 15       	cp	r16, r1
    207c:	11 05       	cpc	r17, r1
    207e:	79 f7       	brne	.-34     	; 0x205e <vfprintf+0x1ac>
    2080:	ea c0       	rjmp	.+468    	; 0x2256 <vfprintf+0x3a4>
    2082:	94 36       	cpi	r25, 0x64	; 100
    2084:	11 f0       	breq	.+4      	; 0x208a <vfprintf+0x1d8>
    2086:	99 36       	cpi	r25, 0x69	; 105
    2088:	69 f5       	brne	.+90     	; 0x20e4 <vfprintf+0x232>
    208a:	f7 fe       	sbrs	r15, 7
    208c:	08 c0       	rjmp	.+16     	; 0x209e <vfprintf+0x1ec>
    208e:	f5 01       	movw	r30, r10
    2090:	20 81       	ld	r18, Z
    2092:	31 81       	ldd	r19, Z+1	; 0x01
    2094:	42 81       	ldd	r20, Z+2	; 0x02
    2096:	53 81       	ldd	r21, Z+3	; 0x03
    2098:	84 e0       	ldi	r24, 0x04	; 4
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	0a c0       	rjmp	.+20     	; 0x20b2 <vfprintf+0x200>
    209e:	f5 01       	movw	r30, r10
    20a0:	80 81       	ld	r24, Z
    20a2:	91 81       	ldd	r25, Z+1	; 0x01
    20a4:	9c 01       	movw	r18, r24
    20a6:	44 27       	eor	r20, r20
    20a8:	37 fd       	sbrc	r19, 7
    20aa:	40 95       	com	r20
    20ac:	54 2f       	mov	r21, r20
    20ae:	82 e0       	ldi	r24, 0x02	; 2
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	a8 0e       	add	r10, r24
    20b4:	b9 1e       	adc	r11, r25
    20b6:	9f e6       	ldi	r25, 0x6F	; 111
    20b8:	f9 22       	and	r15, r25
    20ba:	57 ff       	sbrs	r21, 7
    20bc:	09 c0       	rjmp	.+18     	; 0x20d0 <vfprintf+0x21e>
    20be:	50 95       	com	r21
    20c0:	40 95       	com	r20
    20c2:	30 95       	com	r19
    20c4:	21 95       	neg	r18
    20c6:	3f 4f       	sbci	r19, 0xFF	; 255
    20c8:	4f 4f       	sbci	r20, 0xFF	; 255
    20ca:	5f 4f       	sbci	r21, 0xFF	; 255
    20cc:	e0 e8       	ldi	r30, 0x80	; 128
    20ce:	fe 2a       	or	r15, r30
    20d0:	ca 01       	movw	r24, r20
    20d2:	b9 01       	movw	r22, r18
    20d4:	a1 01       	movw	r20, r2
    20d6:	2a e0       	ldi	r18, 0x0A	; 10
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	0e 94 88 11 	call	0x2310	; 0x2310 <__ultoa_invert>
    20de:	d8 2e       	mov	r13, r24
    20e0:	d2 18       	sub	r13, r2
    20e2:	40 c0       	rjmp	.+128    	; 0x2164 <vfprintf+0x2b2>
    20e4:	95 37       	cpi	r25, 0x75	; 117
    20e6:	29 f4       	brne	.+10     	; 0x20f2 <vfprintf+0x240>
    20e8:	1f 2d       	mov	r17, r15
    20ea:	1f 7e       	andi	r17, 0xEF	; 239
    20ec:	2a e0       	ldi	r18, 0x0A	; 10
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	1d c0       	rjmp	.+58     	; 0x212c <vfprintf+0x27a>
    20f2:	1f 2d       	mov	r17, r15
    20f4:	19 7f       	andi	r17, 0xF9	; 249
    20f6:	9f 36       	cpi	r25, 0x6F	; 111
    20f8:	61 f0       	breq	.+24     	; 0x2112 <vfprintf+0x260>
    20fa:	90 37       	cpi	r25, 0x70	; 112
    20fc:	20 f4       	brcc	.+8      	; 0x2106 <vfprintf+0x254>
    20fe:	98 35       	cpi	r25, 0x58	; 88
    2100:	09 f0       	breq	.+2      	; 0x2104 <vfprintf+0x252>
    2102:	ac c0       	rjmp	.+344    	; 0x225c <vfprintf+0x3aa>
    2104:	0f c0       	rjmp	.+30     	; 0x2124 <vfprintf+0x272>
    2106:	90 37       	cpi	r25, 0x70	; 112
    2108:	39 f0       	breq	.+14     	; 0x2118 <vfprintf+0x266>
    210a:	98 37       	cpi	r25, 0x78	; 120
    210c:	09 f0       	breq	.+2      	; 0x2110 <vfprintf+0x25e>
    210e:	a6 c0       	rjmp	.+332    	; 0x225c <vfprintf+0x3aa>
    2110:	04 c0       	rjmp	.+8      	; 0x211a <vfprintf+0x268>
    2112:	28 e0       	ldi	r18, 0x08	; 8
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	0a c0       	rjmp	.+20     	; 0x212c <vfprintf+0x27a>
    2118:	10 61       	ori	r17, 0x10	; 16
    211a:	14 fd       	sbrc	r17, 4
    211c:	14 60       	ori	r17, 0x04	; 4
    211e:	20 e1       	ldi	r18, 0x10	; 16
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	04 c0       	rjmp	.+8      	; 0x212c <vfprintf+0x27a>
    2124:	14 fd       	sbrc	r17, 4
    2126:	16 60       	ori	r17, 0x06	; 6
    2128:	20 e1       	ldi	r18, 0x10	; 16
    212a:	32 e0       	ldi	r19, 0x02	; 2
    212c:	17 ff       	sbrs	r17, 7
    212e:	08 c0       	rjmp	.+16     	; 0x2140 <vfprintf+0x28e>
    2130:	f5 01       	movw	r30, r10
    2132:	60 81       	ld	r22, Z
    2134:	71 81       	ldd	r23, Z+1	; 0x01
    2136:	82 81       	ldd	r24, Z+2	; 0x02
    2138:	93 81       	ldd	r25, Z+3	; 0x03
    213a:	44 e0       	ldi	r20, 0x04	; 4
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	08 c0       	rjmp	.+16     	; 0x2150 <vfprintf+0x29e>
    2140:	f5 01       	movw	r30, r10
    2142:	80 81       	ld	r24, Z
    2144:	91 81       	ldd	r25, Z+1	; 0x01
    2146:	bc 01       	movw	r22, r24
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	42 e0       	ldi	r20, 0x02	; 2
    214e:	50 e0       	ldi	r21, 0x00	; 0
    2150:	a4 0e       	add	r10, r20
    2152:	b5 1e       	adc	r11, r21
    2154:	a1 01       	movw	r20, r2
    2156:	0e 94 88 11 	call	0x2310	; 0x2310 <__ultoa_invert>
    215a:	d8 2e       	mov	r13, r24
    215c:	d2 18       	sub	r13, r2
    215e:	8f e7       	ldi	r24, 0x7F	; 127
    2160:	f8 2e       	mov	r15, r24
    2162:	f1 22       	and	r15, r17
    2164:	f6 fe       	sbrs	r15, 6
    2166:	0b c0       	rjmp	.+22     	; 0x217e <vfprintf+0x2cc>
    2168:	5e ef       	ldi	r21, 0xFE	; 254
    216a:	f5 22       	and	r15, r21
    216c:	d9 14       	cp	r13, r9
    216e:	38 f4       	brcc	.+14     	; 0x217e <vfprintf+0x2cc>
    2170:	f4 fe       	sbrs	r15, 4
    2172:	07 c0       	rjmp	.+14     	; 0x2182 <vfprintf+0x2d0>
    2174:	f2 fc       	sbrc	r15, 2
    2176:	05 c0       	rjmp	.+10     	; 0x2182 <vfprintf+0x2d0>
    2178:	8f ee       	ldi	r24, 0xEF	; 239
    217a:	f8 22       	and	r15, r24
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <vfprintf+0x2d0>
    217e:	1d 2d       	mov	r17, r13
    2180:	01 c0       	rjmp	.+2      	; 0x2184 <vfprintf+0x2d2>
    2182:	19 2d       	mov	r17, r9
    2184:	f4 fe       	sbrs	r15, 4
    2186:	0d c0       	rjmp	.+26     	; 0x21a2 <vfprintf+0x2f0>
    2188:	fe 01       	movw	r30, r28
    218a:	ed 0d       	add	r30, r13
    218c:	f1 1d       	adc	r31, r1
    218e:	80 81       	ld	r24, Z
    2190:	80 33       	cpi	r24, 0x30	; 48
    2192:	19 f4       	brne	.+6      	; 0x219a <vfprintf+0x2e8>
    2194:	99 ee       	ldi	r25, 0xE9	; 233
    2196:	f9 22       	and	r15, r25
    2198:	08 c0       	rjmp	.+16     	; 0x21aa <vfprintf+0x2f8>
    219a:	1f 5f       	subi	r17, 0xFF	; 255
    219c:	f2 fe       	sbrs	r15, 2
    219e:	05 c0       	rjmp	.+10     	; 0x21aa <vfprintf+0x2f8>
    21a0:	03 c0       	rjmp	.+6      	; 0x21a8 <vfprintf+0x2f6>
    21a2:	8f 2d       	mov	r24, r15
    21a4:	86 78       	andi	r24, 0x86	; 134
    21a6:	09 f0       	breq	.+2      	; 0x21aa <vfprintf+0x2f8>
    21a8:	1f 5f       	subi	r17, 0xFF	; 255
    21aa:	0f 2d       	mov	r16, r15
    21ac:	f3 fc       	sbrc	r15, 3
    21ae:	14 c0       	rjmp	.+40     	; 0x21d8 <vfprintf+0x326>
    21b0:	f0 fe       	sbrs	r15, 0
    21b2:	0f c0       	rjmp	.+30     	; 0x21d2 <vfprintf+0x320>
    21b4:	1e 15       	cp	r17, r14
    21b6:	10 f0       	brcs	.+4      	; 0x21bc <vfprintf+0x30a>
    21b8:	9d 2c       	mov	r9, r13
    21ba:	0b c0       	rjmp	.+22     	; 0x21d2 <vfprintf+0x320>
    21bc:	9d 2c       	mov	r9, r13
    21be:	9e 0c       	add	r9, r14
    21c0:	91 1a       	sub	r9, r17
    21c2:	1e 2d       	mov	r17, r14
    21c4:	06 c0       	rjmp	.+12     	; 0x21d2 <vfprintf+0x320>
    21c6:	80 e2       	ldi	r24, 0x20	; 32
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	b3 01       	movw	r22, r6
    21cc:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <fputc>
    21d0:	1f 5f       	subi	r17, 0xFF	; 255
    21d2:	1e 15       	cp	r17, r14
    21d4:	c0 f3       	brcs	.-16     	; 0x21c6 <vfprintf+0x314>
    21d6:	04 c0       	rjmp	.+8      	; 0x21e0 <vfprintf+0x32e>
    21d8:	1e 15       	cp	r17, r14
    21da:	10 f4       	brcc	.+4      	; 0x21e0 <vfprintf+0x32e>
    21dc:	e1 1a       	sub	r14, r17
    21de:	01 c0       	rjmp	.+2      	; 0x21e2 <vfprintf+0x330>
    21e0:	ee 24       	eor	r14, r14
    21e2:	04 ff       	sbrs	r16, 4
    21e4:	0f c0       	rjmp	.+30     	; 0x2204 <vfprintf+0x352>
    21e6:	80 e3       	ldi	r24, 0x30	; 48
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	b3 01       	movw	r22, r6
    21ec:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <fputc>
    21f0:	02 ff       	sbrs	r16, 2
    21f2:	1d c0       	rjmp	.+58     	; 0x222e <vfprintf+0x37c>
    21f4:	01 fd       	sbrc	r16, 1
    21f6:	03 c0       	rjmp	.+6      	; 0x21fe <vfprintf+0x34c>
    21f8:	88 e7       	ldi	r24, 0x78	; 120
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	0e c0       	rjmp	.+28     	; 0x221a <vfprintf+0x368>
    21fe:	88 e5       	ldi	r24, 0x58	; 88
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	0b c0       	rjmp	.+22     	; 0x221a <vfprintf+0x368>
    2204:	80 2f       	mov	r24, r16
    2206:	86 78       	andi	r24, 0x86	; 134
    2208:	91 f0       	breq	.+36     	; 0x222e <vfprintf+0x37c>
    220a:	01 ff       	sbrs	r16, 1
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <vfprintf+0x360>
    220e:	8b e2       	ldi	r24, 0x2B	; 43
    2210:	01 c0       	rjmp	.+2      	; 0x2214 <vfprintf+0x362>
    2212:	80 e2       	ldi	r24, 0x20	; 32
    2214:	f7 fc       	sbrc	r15, 7
    2216:	8d e2       	ldi	r24, 0x2D	; 45
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	b3 01       	movw	r22, r6
    221c:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <fputc>
    2220:	06 c0       	rjmp	.+12     	; 0x222e <vfprintf+0x37c>
    2222:	80 e3       	ldi	r24, 0x30	; 48
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	b3 01       	movw	r22, r6
    2228:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <fputc>
    222c:	9a 94       	dec	r9
    222e:	d9 14       	cp	r13, r9
    2230:	c0 f3       	brcs	.-16     	; 0x2222 <vfprintf+0x370>
    2232:	da 94       	dec	r13
    2234:	f1 01       	movw	r30, r2
    2236:	ed 0d       	add	r30, r13
    2238:	f1 1d       	adc	r31, r1
    223a:	80 81       	ld	r24, Z
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	b3 01       	movw	r22, r6
    2240:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <fputc>
    2244:	dd 20       	and	r13, r13
    2246:	a9 f7       	brne	.-22     	; 0x2232 <vfprintf+0x380>
    2248:	06 c0       	rjmp	.+12     	; 0x2256 <vfprintf+0x3a4>
    224a:	80 e2       	ldi	r24, 0x20	; 32
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	b3 01       	movw	r22, r6
    2250:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <fputc>
    2254:	ea 94       	dec	r14
    2256:	ee 20       	and	r14, r14
    2258:	c1 f7       	brne	.-16     	; 0x224a <vfprintf+0x398>
    225a:	43 ce       	rjmp	.-890    	; 0x1ee2 <vfprintf+0x30>
    225c:	f3 01       	movw	r30, r6
    225e:	66 81       	ldd	r22, Z+6	; 0x06
    2260:	77 81       	ldd	r23, Z+7	; 0x07
    2262:	cb 01       	movw	r24, r22
    2264:	2b 96       	adiw	r28, 0x0b	; 11
    2266:	e2 e1       	ldi	r30, 0x12	; 18
    2268:	0c 94 16 12 	jmp	0x242c	; 0x242c <__epilogue_restores__>

0000226c <strnlen_P>:
    226c:	fc 01       	movw	r30, r24
    226e:	05 90       	lpm	r0, Z+
    2270:	61 50       	subi	r22, 0x01	; 1
    2272:	70 40       	sbci	r23, 0x00	; 0
    2274:	01 10       	cpse	r0, r1
    2276:	d8 f7       	brcc	.-10     	; 0x226e <strnlen_P+0x2>
    2278:	80 95       	com	r24
    227a:	90 95       	com	r25
    227c:	8e 0f       	add	r24, r30
    227e:	9f 1f       	adc	r25, r31
    2280:	08 95       	ret

00002282 <strnlen>:
    2282:	fc 01       	movw	r30, r24
    2284:	61 50       	subi	r22, 0x01	; 1
    2286:	70 40       	sbci	r23, 0x00	; 0
    2288:	01 90       	ld	r0, Z+
    228a:	01 10       	cpse	r0, r1
    228c:	d8 f7       	brcc	.-10     	; 0x2284 <strnlen+0x2>
    228e:	80 95       	com	r24
    2290:	90 95       	com	r25
    2292:	8e 0f       	add	r24, r30
    2294:	9f 1f       	adc	r25, r31
    2296:	08 95       	ret

00002298 <strrev>:
    2298:	dc 01       	movw	r26, r24
    229a:	fc 01       	movw	r30, r24
    229c:	67 2f       	mov	r22, r23
    229e:	71 91       	ld	r23, Z+
    22a0:	77 23       	and	r23, r23
    22a2:	e1 f7       	brne	.-8      	; 0x229c <strrev+0x4>
    22a4:	32 97       	sbiw	r30, 0x02	; 2
    22a6:	04 c0       	rjmp	.+8      	; 0x22b0 <strrev+0x18>
    22a8:	7c 91       	ld	r23, X
    22aa:	6d 93       	st	X+, r22
    22ac:	70 83       	st	Z, r23
    22ae:	62 91       	ld	r22, -Z
    22b0:	ae 17       	cp	r26, r30
    22b2:	bf 07       	cpc	r27, r31
    22b4:	c8 f3       	brcs	.-14     	; 0x22a8 <strrev+0x10>
    22b6:	08 95       	ret

000022b8 <fputc>:
    22b8:	0f 93       	push	r16
    22ba:	1f 93       	push	r17
    22bc:	cf 93       	push	r28
    22be:	df 93       	push	r29
    22c0:	8c 01       	movw	r16, r24
    22c2:	eb 01       	movw	r28, r22
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	81 ff       	sbrs	r24, 1
    22c8:	1b c0       	rjmp	.+54     	; 0x2300 <fputc+0x48>
    22ca:	82 ff       	sbrs	r24, 2
    22cc:	0d c0       	rjmp	.+26     	; 0x22e8 <fputc+0x30>
    22ce:	2e 81       	ldd	r18, Y+6	; 0x06
    22d0:	3f 81       	ldd	r19, Y+7	; 0x07
    22d2:	8c 81       	ldd	r24, Y+4	; 0x04
    22d4:	9d 81       	ldd	r25, Y+5	; 0x05
    22d6:	28 17       	cp	r18, r24
    22d8:	39 07       	cpc	r19, r25
    22da:	64 f4       	brge	.+24     	; 0x22f4 <fputc+0x3c>
    22dc:	e8 81       	ld	r30, Y
    22de:	f9 81       	ldd	r31, Y+1	; 0x01
    22e0:	01 93       	st	Z+, r16
    22e2:	f9 83       	std	Y+1, r31	; 0x01
    22e4:	e8 83       	st	Y, r30
    22e6:	06 c0       	rjmp	.+12     	; 0x22f4 <fputc+0x3c>
    22e8:	e8 85       	ldd	r30, Y+8	; 0x08
    22ea:	f9 85       	ldd	r31, Y+9	; 0x09
    22ec:	80 2f       	mov	r24, r16
    22ee:	09 95       	icall
    22f0:	89 2b       	or	r24, r25
    22f2:	31 f4       	brne	.+12     	; 0x2300 <fputc+0x48>
    22f4:	8e 81       	ldd	r24, Y+6	; 0x06
    22f6:	9f 81       	ldd	r25, Y+7	; 0x07
    22f8:	01 96       	adiw	r24, 0x01	; 1
    22fa:	9f 83       	std	Y+7, r25	; 0x07
    22fc:	8e 83       	std	Y+6, r24	; 0x06
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <fputc+0x4c>
    2300:	0f ef       	ldi	r16, 0xFF	; 255
    2302:	1f ef       	ldi	r17, 0xFF	; 255
    2304:	c8 01       	movw	r24, r16
    2306:	df 91       	pop	r29
    2308:	cf 91       	pop	r28
    230a:	1f 91       	pop	r17
    230c:	0f 91       	pop	r16
    230e:	08 95       	ret

00002310 <__ultoa_invert>:
    2310:	fa 01       	movw	r30, r20
    2312:	aa 27       	eor	r26, r26
    2314:	28 30       	cpi	r18, 0x08	; 8
    2316:	51 f1       	breq	.+84     	; 0x236c <__ultoa_invert+0x5c>
    2318:	20 31       	cpi	r18, 0x10	; 16
    231a:	81 f1       	breq	.+96     	; 0x237c <__ultoa_invert+0x6c>
    231c:	e8 94       	clt
    231e:	6f 93       	push	r22
    2320:	6e 7f       	andi	r22, 0xFE	; 254
    2322:	6e 5f       	subi	r22, 0xFE	; 254
    2324:	7f 4f       	sbci	r23, 0xFF	; 255
    2326:	8f 4f       	sbci	r24, 0xFF	; 255
    2328:	9f 4f       	sbci	r25, 0xFF	; 255
    232a:	af 4f       	sbci	r26, 0xFF	; 255
    232c:	b1 e0       	ldi	r27, 0x01	; 1
    232e:	3e d0       	rcall	.+124    	; 0x23ac <__ultoa_invert+0x9c>
    2330:	b4 e0       	ldi	r27, 0x04	; 4
    2332:	3c d0       	rcall	.+120    	; 0x23ac <__ultoa_invert+0x9c>
    2334:	67 0f       	add	r22, r23
    2336:	78 1f       	adc	r23, r24
    2338:	89 1f       	adc	r24, r25
    233a:	9a 1f       	adc	r25, r26
    233c:	a1 1d       	adc	r26, r1
    233e:	68 0f       	add	r22, r24
    2340:	79 1f       	adc	r23, r25
    2342:	8a 1f       	adc	r24, r26
    2344:	91 1d       	adc	r25, r1
    2346:	a1 1d       	adc	r26, r1
    2348:	6a 0f       	add	r22, r26
    234a:	71 1d       	adc	r23, r1
    234c:	81 1d       	adc	r24, r1
    234e:	91 1d       	adc	r25, r1
    2350:	a1 1d       	adc	r26, r1
    2352:	20 d0       	rcall	.+64     	; 0x2394 <__ultoa_invert+0x84>
    2354:	09 f4       	brne	.+2      	; 0x2358 <__ultoa_invert+0x48>
    2356:	68 94       	set
    2358:	3f 91       	pop	r19
    235a:	2a e0       	ldi	r18, 0x0A	; 10
    235c:	26 9f       	mul	r18, r22
    235e:	11 24       	eor	r1, r1
    2360:	30 19       	sub	r19, r0
    2362:	30 5d       	subi	r19, 0xD0	; 208
    2364:	31 93       	st	Z+, r19
    2366:	de f6       	brtc	.-74     	; 0x231e <__ultoa_invert+0xe>
    2368:	cf 01       	movw	r24, r30
    236a:	08 95       	ret
    236c:	46 2f       	mov	r20, r22
    236e:	47 70       	andi	r20, 0x07	; 7
    2370:	40 5d       	subi	r20, 0xD0	; 208
    2372:	41 93       	st	Z+, r20
    2374:	b3 e0       	ldi	r27, 0x03	; 3
    2376:	0f d0       	rcall	.+30     	; 0x2396 <__ultoa_invert+0x86>
    2378:	c9 f7       	brne	.-14     	; 0x236c <__ultoa_invert+0x5c>
    237a:	f6 cf       	rjmp	.-20     	; 0x2368 <__ultoa_invert+0x58>
    237c:	46 2f       	mov	r20, r22
    237e:	4f 70       	andi	r20, 0x0F	; 15
    2380:	40 5d       	subi	r20, 0xD0	; 208
    2382:	4a 33       	cpi	r20, 0x3A	; 58
    2384:	18 f0       	brcs	.+6      	; 0x238c <__ultoa_invert+0x7c>
    2386:	49 5d       	subi	r20, 0xD9	; 217
    2388:	31 fd       	sbrc	r19, 1
    238a:	40 52       	subi	r20, 0x20	; 32
    238c:	41 93       	st	Z+, r20
    238e:	02 d0       	rcall	.+4      	; 0x2394 <__ultoa_invert+0x84>
    2390:	a9 f7       	brne	.-22     	; 0x237c <__ultoa_invert+0x6c>
    2392:	ea cf       	rjmp	.-44     	; 0x2368 <__ultoa_invert+0x58>
    2394:	b4 e0       	ldi	r27, 0x04	; 4
    2396:	a6 95       	lsr	r26
    2398:	97 95       	ror	r25
    239a:	87 95       	ror	r24
    239c:	77 95       	ror	r23
    239e:	67 95       	ror	r22
    23a0:	ba 95       	dec	r27
    23a2:	c9 f7       	brne	.-14     	; 0x2396 <__ultoa_invert+0x86>
    23a4:	00 97       	sbiw	r24, 0x00	; 0
    23a6:	61 05       	cpc	r22, r1
    23a8:	71 05       	cpc	r23, r1
    23aa:	08 95       	ret
    23ac:	9b 01       	movw	r18, r22
    23ae:	ac 01       	movw	r20, r24
    23b0:	0a 2e       	mov	r0, r26
    23b2:	06 94       	lsr	r0
    23b4:	57 95       	ror	r21
    23b6:	47 95       	ror	r20
    23b8:	37 95       	ror	r19
    23ba:	27 95       	ror	r18
    23bc:	ba 95       	dec	r27
    23be:	c9 f7       	brne	.-14     	; 0x23b2 <__ultoa_invert+0xa2>
    23c0:	62 0f       	add	r22, r18
    23c2:	73 1f       	adc	r23, r19
    23c4:	84 1f       	adc	r24, r20
    23c6:	95 1f       	adc	r25, r21
    23c8:	a0 1d       	adc	r26, r0
    23ca:	08 95       	ret

000023cc <__udivmodhi4>:
    23cc:	aa 1b       	sub	r26, r26
    23ce:	bb 1b       	sub	r27, r27
    23d0:	51 e1       	ldi	r21, 0x11	; 17
    23d2:	07 c0       	rjmp	.+14     	; 0x23e2 <__udivmodhi4_ep>

000023d4 <__udivmodhi4_loop>:
    23d4:	aa 1f       	adc	r26, r26
    23d6:	bb 1f       	adc	r27, r27
    23d8:	a6 17       	cp	r26, r22
    23da:	b7 07       	cpc	r27, r23
    23dc:	10 f0       	brcs	.+4      	; 0x23e2 <__udivmodhi4_ep>
    23de:	a6 1b       	sub	r26, r22
    23e0:	b7 0b       	sbc	r27, r23

000023e2 <__udivmodhi4_ep>:
    23e2:	88 1f       	adc	r24, r24
    23e4:	99 1f       	adc	r25, r25
    23e6:	5a 95       	dec	r21
    23e8:	a9 f7       	brne	.-22     	; 0x23d4 <__udivmodhi4_loop>
    23ea:	80 95       	com	r24
    23ec:	90 95       	com	r25
    23ee:	bc 01       	movw	r22, r24
    23f0:	cd 01       	movw	r24, r26
    23f2:	08 95       	ret

000023f4 <__prologue_saves__>:
    23f4:	2f 92       	push	r2
    23f6:	3f 92       	push	r3
    23f8:	4f 92       	push	r4
    23fa:	5f 92       	push	r5
    23fc:	6f 92       	push	r6
    23fe:	7f 92       	push	r7
    2400:	8f 92       	push	r8
    2402:	9f 92       	push	r9
    2404:	af 92       	push	r10
    2406:	bf 92       	push	r11
    2408:	cf 92       	push	r12
    240a:	df 92       	push	r13
    240c:	ef 92       	push	r14
    240e:	ff 92       	push	r15
    2410:	0f 93       	push	r16
    2412:	1f 93       	push	r17
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
    241c:	ca 1b       	sub	r28, r26
    241e:	db 0b       	sbc	r29, r27
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	09 94       	ijmp

0000242c <__epilogue_restores__>:
    242c:	2a 88       	ldd	r2, Y+18	; 0x12
    242e:	39 88       	ldd	r3, Y+17	; 0x11
    2430:	48 88       	ldd	r4, Y+16	; 0x10
    2432:	5f 84       	ldd	r5, Y+15	; 0x0f
    2434:	6e 84       	ldd	r6, Y+14	; 0x0e
    2436:	7d 84       	ldd	r7, Y+13	; 0x0d
    2438:	8c 84       	ldd	r8, Y+12	; 0x0c
    243a:	9b 84       	ldd	r9, Y+11	; 0x0b
    243c:	aa 84       	ldd	r10, Y+10	; 0x0a
    243e:	b9 84       	ldd	r11, Y+9	; 0x09
    2440:	c8 84       	ldd	r12, Y+8	; 0x08
    2442:	df 80       	ldd	r13, Y+7	; 0x07
    2444:	ee 80       	ldd	r14, Y+6	; 0x06
    2446:	fd 80       	ldd	r15, Y+5	; 0x05
    2448:	0c 81       	ldd	r16, Y+4	; 0x04
    244a:	1b 81       	ldd	r17, Y+3	; 0x03
    244c:	aa 81       	ldd	r26, Y+2	; 0x02
    244e:	b9 81       	ldd	r27, Y+1	; 0x01
    2450:	ce 0f       	add	r28, r30
    2452:	d1 1d       	adc	r29, r1
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	ed 01       	movw	r28, r26
    2460:	08 95       	ret

00002462 <_exit>:
    2462:	f8 94       	cli

00002464 <__stop_program>:
    2464:	ff cf       	rjmp	.-2      	; 0x2464 <__stop_program>
